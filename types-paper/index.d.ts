import '@grakkit/types';

declare module '@grakkit/types' {
   /**Represents an arrow.*/
   export interface obeAbstractArrow extends obeProjectile {
      /**Gets the block to which this arrow is attached.*/
      getAttachedBlock(): obbBlock;
      /**Gets the base amount of damage this arrow will do.*/
      getDamage(): number;
      /**Gets the ItemStack for this arrow.*/
      getItemStack(): obiItemStack;
      /**Gets the knockback strength for an arrow, which is the  KnockBack level  of the bow that shot it.*/
      getKnockbackStrength(): number;
      /**Gets the current pickup status of this arrow.*/
      getPickupStatus(): obeAPickupStatus;
      /**Gets the number of times this arrow can pierce through an entity.*/
      getPierceLevel(): number;
      /**Gets whether this arrow is critical.*/
      isCritical(): boolean;
      /**Gets whether this arrow is in a block or not.*/
      isInBlock(): boolean;
      /**Gets if this arrow was shot from a crossbow.*/
      isShotFromCrossbow(): boolean;
      /**Sets whether or not this arrow should be critical.*/
      setCritical(critical: boolean): void;
      /**Sets the base amount of damage this arrow will do.*/
      setDamage(damage: number): void;
      /**Sets the knockback strength for an arrow.*/
      setKnockbackStrength(knockbackStrength: number): void;
      /**Sets the current pickup status of this arrow.*/
      setPickupStatus(status: obeAPickupStatus): void;
      /**Sets the number of times this arrow can pierce through an entity.*/
      setPierceLevel(pierceLevel: number): void;
      /**Sets if this arrow was shot from a crossbow.*/
      setShotFromCrossbow(shotFromCrossbow: boolean): void;
   }
   /**Represents the pickup status of this arrow.*/
   export class obeAPickupStatus extends jlEnum<obeAPickupStatus> {
      /**The arrow can be picked up.*/
      static ALLOWED: obeAPickupStatus;
      /**The arrow can only be picked up by players in creative mode.*/
      static CREATIVE_ONLY: obeAPickupStatus;
      /**The arrow cannot be picked up.*/
      static DISALLOWED: obeAPickupStatus;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeAPickupStatus;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeAPickupStatus[];
   }
   /**Represents a Horse-like creature.*/
   export interface obeAbstractHorse extends obeVehicle, obiInventoryHolder, obeTameable {
      /**Gets the domestication level of this horse.*/
      getDomestication(): number;
      /**Get the object's inventory.*/
      getInventory(): obiAbstractHorseInventory;
      /**Gets the jump strength of this horse.*/
      getJumpStrength(): number;
      /**Gets the maximum domestication level of this horse.*/
      getMaxDomestication(): number;
      /**Sets the domestication level of this horse.*/
      setDomestication(level: number): void;
      /**Sets the jump strength of this horse.*/
      setJumpStrength(strength: number): void;
      /**Sets the maximum domestication level of this horse.*/
      setMaxDomestication(level: number): void;
   }
   /**An interface to the inventory of an AbstractHorse.*/
   export interface obiAbstractHorseInventory extends obiInventory {
      /**Gets the item in the horse's saddle slot.*/
      getSaddle(): obiItemStack;
      /**Sets the item in the horse's saddle slot.*/
      setSaddle(stack: obiItemStack): void;
   }
   /**Represents a villager NPC*/
   export interface obeAbstractVillager extends obeBreedable, obeNPC, obiInventoryHolder, obiMerchant {
      /**Gets this villager's inventory.*/
      getInventory(): obiInventory;
      /**Reset this villager's trade offers*/
      resetOffers(): void;
   }
   export class obebAction extends jlEnum<obebAction> {
      /**Left-clicking the air*/
      static LEFT_CLICK_AIR: obebAction;
      /**Left-clicking a block*/
      static LEFT_CLICK_BLOCK: obebAction;
      /**Stepping onto or into a block (Ass-pressure)   Examples:    Jumping on soil  Standing on pressure plate  Triggering redstone ore  Triggering tripwire*/
      static PHYSICAL: obebAction;
      /**Right-clicking the air*/
      static RIGHT_CLICK_AIR: obebAction;
      /**Right-clicking a block*/
      static RIGHT_CLICK_BLOCK: obebAction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obebAction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obebAction[];
   }
   /**Represents an advancement that may be awarded to a player. This class is not  reference safe as the underlying advancement may be reloaded.*/
   export interface obaAdvancement extends obKeyed {
      /**Get all the criteria present in this advancement.*/
      getCriteria(): juCollection<string>;
   }
   /**The individual status of an advancement for a player. This class is not  reference safe as the underlying advancement may be reloaded.*/
   export interface obaAdvancementProgress {
      /**Mark the specified criteria as awarded at the current time.*/
      awardCriteria(criteria: string): boolean;
      /**The advancement this progress is concerning.*/
      getAdvancement(): obaAdvancement;
      /**Gets the criteria which have been awarded.*/
      getAwardedCriteria(): juCollection<string>;
      /**Get the date the specified criteria was awarded.*/
      getDateAwarded(criteria: string): juDate;
      /**Get the criteria which have not been awarded.*/
      getRemainingCriteria(): juCollection<string>;
      /**Check if all criteria for this advancement have been met.*/
      isDone(): boolean;
      /**Mark the specified criteria as uncompleted.*/
      revokeCriteria(criteria: string): boolean;
   }
   /**'age' represents the different growth stages that a crop-like block can go  through.    A value of 0 indicates that the crop was freshly planted, whilst a value  equal to getMaximumAge() indicates that the crop is ripe and ready  to be harvested.*/
   export interface obbdAgeable extends obbdBlockData {
      /**Gets the value of the 'age' property.*/
      getAge(): number;
      /**Gets the maximum allowed value of the 'age' property.*/
      getMaximumAge(): number;
      /**Sets the value of the 'age' property.*/
      setAge(age: number): void;
   }
   /**Represents an entity that can age.*/
   export interface obeAgeable extends obeCreature {
      /**Gets the age of this mob.*/
      getAge(): number;
      /**Returns true if the mob is an adult.*/
      isAdult(): boolean;
      /**Sets the age of the mob to an adult*/
      setAdult(): void;
      /**Sets the age of this mob.*/
      setAge(age: number): void;
      /**Sets the age of the mob to a baby*/
      setBaby(): void;
   }
   /**Represents an ambient mob*/
   export interface obeAmbient extends obeMob {}
   /**'power' represents the redstone power level currently being emitted or  transmitted via this block.    May not be over 9000 or getMaximumPower() (usually 15).*/
   export interface obbdAnaloguePowerable extends obbdBlockData {
      /**Gets the maximum allowed value of the 'power' property.*/
      getMaximumPower(): number;
      /**Gets the value of the 'power' property.*/
      getPower(): number;
      /**Sets the value of the 'power' property.*/
      setPower(power: number): void;
   }
   /**Represents an Animal.*/
   export interface obeAnimals extends obeBreedable {
      /**Get the UUID of the entity that caused this entity to enter the  Breedable.canBreed() state.*/
      getBreedCause(): juUUID;
      /**Get the amount of ticks remaining for this entity in love mode.*/
      getLoveModeTicks(): number;
      /**Get whether or not this entity is in love mode and will produce  offspring with another entity in love mode.*/
      isLoveMode(): boolean;
      /**Set the UUID of the entity that caused this entity to enter the  Breedable.canBreed() state.*/
      setBreedCause(uuid: juUUID): void;
      /**Set the amount of ticks for which this entity should be in love mode.*/
      setLoveModeTicks(ticks: number): void;
   }
   export interface obeAnimalTamer {
      /**This is the name of the specified AnimalTamer.*/
      getName(): string;
      /**This is the UUID of the specified AnimalTamer.*/
      getUniqueId(): juUUID;
   }
   /**Called when an anvil is damaged from being used*/
   export class cdpebAnvilDamagedEvent extends obeiInventoryEvent implements obeCancellable {
      constructor (inventory: obiInventoryView, blockData: obbdBlockData);
      /**Gets the new state of damage on the anvil*/
      getDamageState (): cdpebADamageState;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiAnvilInventory;
      /**Gets if anvil is breaking on this use*/
      isBreaking (): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets if anvil is breaking on this use*/
      setBreaking (breaking: boolean): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the new state of damage on the anvil*/
      setDamageState (damageState: cdpebADamageState): void;
   }
   /**Represents the amount of damage on an anvil block*/
   export class cdpebADamageState extends jlEnum<cdpebADamageState> {
      static BROKEN: cdpebADamageState;
      static CHIPPED: cdpebADamageState;
      static DAMAGED: cdpebADamageState;
      static FULL: cdpebADamageState;
      /**Get block material of this state*/
      getMaterial (): obMaterial;
      /**Get damaged state by block data*/
      static getState (blockData: obbdBlockData): cdpebADamageState;
      /**Get damaged state by block material*/
      static getState (material: obMaterial): cdpebADamageState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpebADamageState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpebADamageState[];
   }
   /**Interface to the inventory of an Anvil.*/
   export interface obiAnvilInventory extends obiInventory {
      /**Gets the item in the left input slot.*/
      getFirstItem(): obiItemStack;
      /**Get the maximum experience cost (in levels) to be allowed by the current  repair.*/
      getMaximumRepairCost(): number;
      /**Get the name to be applied to the repaired item.*/
      getRenameText(): string;
      /**Get the experience cost (in levels) to complete the current repair.*/
      getRepairCost(): number;
      /**Gets the item in the result slot.*/
      getResult(): obiItemStack;
      /**Gets the item in the right input slot.*/
      getSecondItem(): obiItemStack;
      /**Sets the item in the left input slot.*/
      setFirstItem(firstItem: obiItemStack): void;
      /**Set the maximum experience cost (in levels) to be allowed by the current  repair.*/
      setMaximumRepairCost(levels: number): void;
      /**Set the experience cost (in levels) to complete the current repair.*/
      setRepairCost(levels: number): void;
      /**Sets the item in the result slot.*/
      setResult(result: obiItemStack): void;
      /**Sets the item in the right input slot.*/
      setSecondItem(secondItem: obiItemStack): void;
   }
   /**Represents an area effect cloud which will imbue a potion effect onto  entities which enter it.*/
   export interface obeAreaEffectCloud extends obeEntity {
      /**Adds a custom potion effect to this cloud.*/
      addCustomEffect(effect: obpPotionEffect, overwrite: boolean): boolean;
      /**Removes all custom potion effects from this cloud.*/
      clearCustomEffects(): void;
      /**Returns the potion data about the base potion*/
      getBasePotionData(): obpPotionData;
      /**Gets the color of this cloud.*/
      getColor(): obColor;
      /**Gets an immutable list containing all custom potion effects applied to  this cloud.*/
      getCustomEffects(): juList<obpPotionEffect>;
      /**Gets the duration which this cloud will exist for (in ticks).*/
      getDuration(): number;
      /**Gets the amount that the duration of this cloud will decrease by when it  applies an effect to an entity.*/
      getDurationOnUse(): number;
      /**Gets the particle which this cloud will be composed of*/
      getParticle(): obParticle;
      /**Gets the initial radius of the cloud.*/
      getRadius(): number;
      /**Gets the amount that the radius of this cloud will decrease by when it  applies an effect to an entity.*/
      getRadiusOnUse(): number;
      /**Gets the amount that the radius of this cloud will decrease by each tick.*/
      getRadiusPerTick(): number;
      /**Gets the time that an entity will be immune from subsequent exposure.*/
      getReapplicationDelay(): number;
      /**Retrieve the original source of this cloud.*/
      getSource(): obpProjectileSource;
      /**Gets the time which an entity has to be exposed to the cloud before the  effect is applied.*/
      getWaitTime(): number;
      /**Checks for a specific custom potion effect type on this cloud.*/
      hasCustomEffect(type: obpPotionEffectType): boolean;
      /**Checks for the presence of custom potion effects.*/
      hasCustomEffects(): boolean;
      /**Removes a custom potion effect from this cloud.*/
      removeCustomEffect(type: obpPotionEffectType): boolean;
      /**Sets the underlying potion data*/
      setBasePotionData(data: obpPotionData): void;
      /**Sets the color of this cloud.*/
      setColor(color: obColor): void;
      /**Sets the duration which this cloud will exist for (in ticks).*/
      setDuration(duration: number): void;
      /**Sets the amount that the duration of this cloud will decrease by when it  applies an effect to an entity.*/
      setDurationOnUse(duration: number): void;
      /**Sets the particle which this cloud will be composed of*/
      setParticle(particle: obParticle): void;
      /**Sets the particle which this cloud will be composed of*/
      setParticle<T>(particle: obParticle, data: T): void;
      /**Sets the initial radius of the cloud.*/
      setRadius(radius: number): void;
      /**Sets the amount that the radius of this cloud will decrease by when it  applies an effect to an entity.*/
      setRadiusOnUse(radius: number): void;
      /**Gets the amount that the radius of this cloud will decrease by each tick.*/
      setRadiusPerTick(radius: number): void;
      /**Sets the time that an entity will be immune from subsequent exposure.*/
      setReapplicationDelay(delay: number): void;
      /**Set the original source of this cloud.*/
      setSource(source: obpProjectileSource): void;
      /**Sets the time which an entity has to be exposed to the cloud before the  effect is applied.*/
      setWaitTime(waitTime: number): void;
   }
   /**Called when a lingering potion applies it's effects. Happens  once every 5 ticks*/
   export class obeeAreaEffectCloudApplyEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeAreaEffectCloud, affectedEntities: juList<obeLivingEntity>);
      /**Retrieves a mutable list of the effected entities*/
      getAffectedEntities (): juList<obeLivingEntity>;
      /**Returns the Entity involved in this event*/
      getEntity (): obeAreaEffectCloud;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export interface obiArmoredHorseInventory extends obiAbstractHorseInventory {
      /**Gets the item in the horse's armor slot.*/
      getArmor(): obiItemStack;
      /**Sets the item in the horse's armor slot.*/
      setArmor(stack: obiItemStack): void;
   }
   export interface obeArmorStand extends obeLivingEntity {
      /**Disable specific slots, adding them  to the currently disabled slots   This makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)  Note: Once a slot is disabled, the only way to get an item back it to break the armor stand.*/
      addDisabledSlots(...slots: obiEquipmentSlot[]): void;
      /**Locks the equipment slot with the specified  locking mechanism.*/
      addEquipmentLock(slot: obiEquipmentSlot, lockType: obeALockType): void;
      /**Tests if this armor stand can move.*/
      canMove(): boolean;
      /**Tests if this armor stand can tick.*/
      canTick(): boolean;
      /**Returns the armor stand's body's current pose as a  EulerAngle.*/
      getBodyPose(): obuEulerAngle;
      /**Get the list of disabled slots*/
      getDisabledSlots(): juSet<obiEquipmentSlot>;
      /**Returns the armor stand's head's current pose as a  EulerAngle.*/
      getHeadPose(): obuEulerAngle;
      /**Returns the item the armor stand has  equip in the given equipment slot*/
      getItem(slot: obiEquipmentSlot): obiItemStack;
      /**Returns the armor stand's left arm's current pose as a  EulerAngle.*/
      getLeftArmPose(): obuEulerAngle;
      /**Returns the armor stand's left leg's current pose as a  EulerAngle.*/
      getLeftLegPose(): obuEulerAngle;
      /**Returns the armor stand's right arm's current pose as a  EulerAngle.*/
      getRightArmPose(): obuEulerAngle;
      /**Returns the armor stand's right leg's current pose as a  EulerAngle.*/
      getRightLegPose(): obuEulerAngle;
      /**Returns whether this armor stand has arms.*/
      hasArms(): boolean;
      /**Returns whether the armor stand has a base plate.*/
      hasBasePlate(): boolean;
      /**Returns if the ArmorStand has the specified  locking mechanism.*/
      hasEquipmentLock(slot: obiEquipmentSlot, lockType: obeALockType): boolean;
      /**Returns whether this armor stand is a marker, meaning it has a very small  collision box.*/
      isMarker(): boolean;
      /**Check if a specific slot is disabled*/
      isSlotDisabled(slot: obiEquipmentSlot): boolean;
      /**Returns whether this armor stand is scaled down.*/
      isSmall(): boolean;
      /**Returns whether the armor stand should be visible or not.*/
      isVisible(): boolean;
      /**Remove the given slots from the disabled  slots list, enabling them.*/
      removeDisabledSlots(...slots: obiEquipmentSlot[]): void;
      /**Remove a locking mechanism.*/
      removeEquipmentLock(slot: obiEquipmentSlot, lockType: obeALockType): void;
      /**Sets whether this armor stand has arms.*/
      setArms(arms: boolean): void;
      /**Sets whether the armor stand has a base plate.*/
      setBasePlate(basePlate: boolean): void;
      /**Sets the armor stand's body's current pose as a  EulerAngle.*/
      setBodyPose(pose: obuEulerAngle): void;
      /**Sets if this armor stand can move.*/
      setCanMove(move: boolean): void;
      /**Sets if this armor stand can tick.*/
      setCanTick(tick: boolean): void;
      /**Set the disabled slots   This makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)  Note: Once a slot is disabled, the only way to get an item back it to break the armor stand.*/
      setDisabledSlots(...slots: obiEquipmentSlot[]): void;
      /**Sets the armor stand's head's current pose as a  EulerAngle.*/
      setHeadPose(pose: obuEulerAngle): void;
      /**Sets the item the armor stand has  equip in the given equipment slot*/
      setItem(slot: obiEquipmentSlot, item: obiItemStack): void;
      /**Sets the armor stand's left arm's current pose as a  EulerAngle.*/
      setLeftArmPose(pose: obuEulerAngle): void;
      /**Sets the armor stand's left leg's current pose as a  EulerAngle.*/
      setLeftLegPose(pose: obuEulerAngle): void;
      /**Sets whether this armor stand is a marker, meaning it has a very small  collision box.*/
      setMarker(marker: boolean): void;
      /**Sets the armor stand's right arm's current pose as a  EulerAngle.*/
      setRightArmPose(pose: obuEulerAngle): void;
      /**Sets the armor stand's right leg's current pose as a  EulerAngle.*/
      setRightLegPose(pose: obuEulerAngle): void;
      /**Sets whether this armor stand is scaled down.*/
      setSmall(small: boolean): void;
      /**Sets whether the armor stand should be visible or not.*/
      setVisible(visible: boolean): void;
   }
   /**Represents types of locking mechanisms for ArmorStand equipment.*/
   export class obeALockType extends jlEnum<obeALockType> {
      /**Prevents adding the respective equipment - players cannot replace the  empty slot with a new item, but can swap items between themselves and  the ArmorStand.*/
      static ADDING: obeALockType;
      /**Prevents adding or changing the respective equipment - players cannot  replace the empty slot with a new item or swap the items between  themselves and the ArmorStand.*/
      static ADDING_OR_CHANGING: obeALockType;
      /**Prevents removing or changing the respective equipment - players  cannot take an item from the slot or swap the items between  themselves and the ArmorStand.*/
      static REMOVING_OR_CHANGING: obeALockType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeALockType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeALockType[];
   }
   export interface cdpimArmorStandMeta extends obimItemMeta {
      /**Gets whether this ArmorStand should have no base plate when spawned*/
      hasNoBasePlate(): boolean;
      /**Gets whether the ArmorStand should be invisible when spawned*/
      isInvisible(): boolean;
      /**Gets whether this ArmorStand will be a marker when spawned  The exact details of this flag are an implementation detail*/
      isMarker(): boolean;
      /**Gets whether this ArmorStand will be small when spawned*/
      isSmall(): boolean;
      /**Sets that this ArmorStand should be invisible when spawned*/
      setInvisible(invisible: boolean): void;
      /**Sets that this ArmorStand should be a marker when spawned  The exact details of this flag are an implementation detail*/
      setMarker(marker: boolean): void;
      /**Sets that this ArmorStand should have no base plate when spawned*/
      setNoBasePlate(noBasePlate: boolean): void;
      /**Sets that this ArmorStand should show arms when spawned*/
      setShowArms(showArms: boolean): void;
      /**Sets that this ArmorStand should be small when spawned*/
      setSmall(small: boolean): void;
      /**Gets whether this ArmorStand should show arms when spawned*/
      shouldShowArms(): boolean;
   }
   export interface obeArrow extends obeAbstractArrow {
      /**Adds a custom potion effect to this arrow.*/
      addCustomEffect(effect: obpPotionEffect, overwrite: boolean): boolean;
      /**Removes all custom potion effects from this arrow.*/
      clearCustomEffects(): void;
      /**Returns the potion data about the base potion*/
      getBasePotionData(): obpPotionData;
      /**Gets the color of this arrow.*/
      getColor(): obColor;
      /**Gets an immutable list containing all custom potion effects applied to  this arrow.*/
      getCustomEffects(): juList<obpPotionEffect>;
      /**Checks for a specific custom potion effect type on this arrow.*/
      hasCustomEffect(type: obpPotionEffectType): boolean;
      /**Checks for the presence of custom potion effects.*/
      hasCustomEffects(): boolean;
      /**Removes a custom potion effect from this arrow.*/
      removeCustomEffect(type: obpPotionEffectType): boolean;
      /**Sets the underlying potion data*/
      setBasePotionData(data: obpPotionData): void;
      /**Sets the color of this arrow.*/
      setColor(color: obColor): void;
   }
   /**Called when an arrow enters or exists an entity's body.*/
   export class obeeArrowBodyCountChangeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, oldAmount: number, newAmount: number, isReset: boolean);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the new amount of arrows in the entity's body.*/
      getNewAmount (): number;
      /**Gets the old amount of arrows in the entity's body.*/
      getOldAmount (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Whether the event was called because the entity was reset.*/
      isReset (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the final amount of arrows in the entity's body.*/
      setNewAmount (newAmount: number): void;
   }
   /**Represents the art on a painting*/
   export class obArt extends jlEnum<obArt> implements obKeyed {
      static ALBAN: obArt;
      static AZTEC: obArt;
      static AZTEC2: obArt;
      static BOMB: obArt;
      static BURNING_SKULL: obArt;
      static BUST: obArt;
      static COURBET: obArt;
      static CREEBET: obArt;
      static DONKEY_KONG: obArt;
      static FIGHTERS: obArt;
      static GRAHAM: obArt;
      static KEBAB: obArt;
      static MATCH: obArt;
      static PIGSCENE: obArt;
      static PLANT: obArt;
      static POINTER: obArt;
      static POOL: obArt;
      static SEA: obArt;
      static SKELETON: obArt;
      static SKULL_AND_ROSES: obArt;
      static STAGE: obArt;
      static SUNSET: obArt;
      static VOID: obArt;
      static WANDERER: obArt;
      static WASTELAND: obArt;
      static WITHER: obArt;
      /**Gets the height of the painting, in blocks*/
      getBlockHeight (): number;
      /**Gets the width of the painting, in blocks*/
      getBlockWidth (): number;
      /**Get a painting by its unique name*/
      static getByName (name: string): obArt;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obArt;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obArt[];
   }
   export class cdpeeaASMEventExecutorGenerator extends jlObject {
      constructor ();
      static generateEventExecutor (m: jlrMethod, name: string): number[];
      static generateName (): string;
   }
   /**This event will sometimes fire synchronously, depending on how it was  triggered.    The constructor provides a boolean to indicate if the event was fired  synchronously or asynchronously. When asynchronous, this event can be  called from any thread, sans the main thread, and has limited access to the  API.    If a player is the direct cause of this event by an incoming packet, this  event will be asynchronous. If a plugin triggers this event by compelling a  player to chat, this event will be synchronous.    Care should be taken to check Event.isAsynchronous() and treat the event  appropriately.*/
   export class obepAsyncPlayerChatEvent extends obepPlayerEvent implements obeCancellable {
      constructor (async: boolean, who: obePlayer, message: string, players: juSet<obePlayer>);
      /**Gets the format to use to display this chat message.*/
      getFormat (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the message that the player is attempting to send.*/
      getMessage (): string;
      /**Gets a set of recipients that this chat message will be displayed to.*/
      getRecipients (): juSet<obePlayer>;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the format to use to display this chat message.*/
      setFormat (format: string): void;
      /**Sets the message that the player will send.*/
      setMessage (message: string): void;
   }
   /**Stores details for players attempting to log in.    This event is asynchronous, and not run using main thread.*/
   export class obepAsyncPlayerPreLoginEvent extends obeEvent {
      constructor (name: string, ipAddress: jnInetAddress);
      constructor (name: string, ipAddress: jnInetAddress, uniqueId: juUUID);
      constructor (name: string, ipAddress: jnInetAddress, uniqueId: juUUID, profile: cdppPlayerProfile);
      /**Allows the player to log in*/
      allow (): void;
      /**Disallows the player from logging in, with the given reason*/
      disallow (result: obepAResult, message: string): void;
      /**Gets the player IP address.*/
      getAddress (): jnInetAddress;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the current kick message that will be used if getResult() !=  Result.ALLOWED*/
      getKickMessage (): string;
      /**Gets the current result of the login, as an enum*/
      getLoginResult (): obepAResult;
      /**Gets the player's name.*/
      getName (): string;
      /**Gets the PlayerProfile of the player logging in*/
      getPlayerProfile (): cdppPlayerProfile;
      /**Gets the player's unique ID.*/
      getUniqueId (): juUUID;
      /**Sets the kick message to display if getResult() != Result.ALLOWED*/
      setKickMessage (message: string): void;
      /**Sets the new result of the login, as an enum*/
      setLoginResult (result: obepAResult): void;
      setPlayerProfile (profile: cdppPlayerProfile): void;
   }
   /**Basic kick reasons for communicating to plugins*/
   export class obepAResult extends jlEnum<obepAResult> {
      /**The player is allowed to log in*/
      static ALLOWED: obepAResult;
      /**The player is not allowed to log in, due to them being banned*/
      static KICK_BANNED: obepAResult;
      /**The player is not allowed to log in, due to the server being full*/
      static KICK_FULL: obepAResult;
      /**The player is not allowed to log in, for reasons undefined*/
      static KICK_OTHER: obepAResult;
      /**The player is not allowed to log in, due to them not being on the  white list*/
      static KICK_WHITELIST: obepAResult;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepAResult;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepAResult[];
   }
   /**Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results.   Only 1 process will be allowed to provide completions, the Async Event, or the standard process.*/
   export class cdpesAsyncTabCompleteEvent extends obeEvent implements obeCancellable {
      constructor (
         sender: obcCommandSender,
         completions: juList<string>,
         buffer: string,
         isCommand: boolean,
         loc: obLocation
      );
      /**Return the entire buffer which formed the basis of this completion.*/
      getBuffer (): string;
      /**The list of completions which will be offered to the sender, in order.*/
      getCompletions (): juList<string>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getLocation (): obLocation;
      /**Get the sender completing this command.*/
      getSender (): obcCommandSender;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isCommand (): boolean;
      /**If true, the standard process of calling Command.tabComplete(CommandSender, String, String[])  or current player names will not be called.*/
      isHandled (): boolean;
      /**Will provide no completions, and will not fire the synchronous process*/
      setCancelled (cancelled: boolean): void;
      /**Set the completions offered, overriding any already set.*/
      setCompletions (completions: juList<string>): void;
      /**Sets whether or not to consider the completion request handled.*/
      setHandled (handled: boolean): void;
   }
   /**'attached' denotes whether a tripwire hook or string forms a complete  tripwire circuit and is ready to trigger.    Updating the property on a tripwire hook will change the texture to indicate  a connected string, but will not have any effect when used on the tripwire  string itself. It may however still be used to check whether the string forms  a circuit.*/
   export interface obbdAttachable extends obbdBlockData {
      /**Gets the value of the 'attached' property.*/
      isAttached(): boolean;
      /**Sets the value of the 'attached' property.*/
      setAttached(attached: boolean): void;
   }
   /**Indicates that a block can be attached to another block*/
   export interface obmAttachable extends obmDirectional {
      /**Gets the face that this block is attached on*/
      getAttachedFace(): obbBlockFace;
   }
   /**Represents an object which may contain attributes.*/
   export interface obaAttributable {
      /**Gets the specified attribute instance from the object.*/
      getAttribute(attribute: obaAttribute): obaAttributeInstance;
   }
   /**Types of attributes which may be present on an Attributable.*/
   export class obaAttribute extends jlEnum<obaAttribute> implements obKeyed {
      /**Armor bonus of an Entity.*/
      static GENERIC_ARMOR: obaAttribute;
      /**Armor durability bonus of an Entity.*/
      static GENERIC_ARMOR_TOUGHNESS: obaAttribute;
      /**Attack damage of an Entity.*/
      static GENERIC_ATTACK_DAMAGE: obaAttribute;
      /**Attack knockback of an Entity.*/
      static GENERIC_ATTACK_KNOCKBACK: obaAttribute;
      /**Attack speed of an Entity.*/
      static GENERIC_ATTACK_SPEED: obaAttribute;
      /**Flying speed of an Entity.*/
      static GENERIC_FLYING_SPEED: obaAttribute;
      /**Range at which an Entity will follow others.*/
      static GENERIC_FOLLOW_RANGE: obaAttribute;
      /**Resistance of an Entity to knockback.*/
      static GENERIC_KNOCKBACK_RESISTANCE: obaAttribute;
      /**Luck bonus of an Entity.*/
      static GENERIC_LUCK: obaAttribute;
      /**Maximum health of an Entity.*/
      static GENERIC_MAX_HEALTH: obaAttribute;
      /**Movement speed of an Entity.*/
      static GENERIC_MOVEMENT_SPEED: obaAttribute;
      /**Strength with which a horse will jump.*/
      static HORSE_JUMP_STRENGTH: obaAttribute;
      /**Chance of a zombie to spawn reinforcements.*/
      static ZOMBIE_SPAWN_REINFORCEMENTS: obaAttribute;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obaAttribute;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obaAttribute[];
   }
   /**Represents a mutable instance of an attribute and its associated modifiers  and values.*/
   export interface obaAttributeInstance {
      /**Add a modifier to this instance.*/
      addModifier(modifier: obaAttributeModifier): void;
      /**The attribute pertaining to this instance.*/
      getAttribute(): obaAttribute;
      /**Base value of this instance before modifiers are applied.*/
      getBaseValue(): number;
      /**Gets the default value of the Attribute attached to this instance.*/
      getDefaultValue(): number;
      /**Get all modifiers present on this instance.*/
      getModifiers(): juCollection<obaAttributeModifier>;
      /**Get the value of this instance after all associated modifiers have been  applied.*/
      getValue(): number;
      /**Remove a modifier from this instance.*/
      removeModifier(modifier: obaAttributeModifier): void;
      /**Set the base value of this instance.*/
      setBaseValue(value: number): void;
   }
   /**Concrete implementation of an attribute modifier.*/
   export class obaAttributeModifier extends jlObject implements obcsConfigurationSerializable {
      constructor (name: string, amount: number, operation: obaAOperation);
      constructor (uuid: juUUID, name: string, amount: number, operation: obaAOperation);
      constructor (uuid: juUUID, name: string, amount: number, operation: obaAOperation, slot: obiEquipmentSlot);
      static deserialize (args: juMap<string, jlObject>): obaAttributeModifier;
      equals (other: jlObject): boolean;
      /**Get the amount by which this modifier will apply its AttributeModifier.Operation.*/
      getAmount (): number;
      /**Get the name of this modifier.*/
      getName (): string;
      /**Get the operation this modifier will apply.*/
      getOperation (): obaAOperation;
      /**Get the EquipmentSlot this AttributeModifier is active on,  or null if this modifier is applicable for any slot.*/
      getSlot (): obiEquipmentSlot;
      /**Get the unique ID for this modifier.*/
      getUniqueId (): juUUID;
      hashCode (): number;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      toString (): string;
   }
   /**Enumerable operation to be applied.*/
   export class obaAOperation extends jlEnum<obaAOperation> {
      /**Adds (or subtracts) the specified amount to the base value.*/
      static ADD_NUMBER: obaAOperation;
      /**Adds this scalar of amount to the base value.*/
      static ADD_SCALAR: obaAOperation;
      /**Multiply amount by this value, after adding 1 to it.*/
      static MULTIPLY_SCALAR_1: obaAOperation;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obaAOperation;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obaAOperation[];
   }
   export class obpAuthorNagException extends jlRuntimeException {
      constructor (message: string);
      getMessage (): string;
   }
   /**Represents a mutually perpendicular axis in 3D Cartesian coordinates. In  Minecraft the x, z axes lie in the horizontal plane, whilst the y axis points  upwards.*/
   export class obAxis extends jlEnum<obAxis> {
      /**The x axis.*/
      static X: obAxis;
      /**The y axis.*/
      static Y: obAxis;
      /**The z axis.*/
      static Z: obAxis;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obAxis;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obAxis[];
   }
   /**'leaves' represents the size of the leaves on this bamboo block.*/
   export interface obbdtBamboo extends obbdAgeable, obbdtSapling {
      /**Gets the value of the 'leaves' property.*/
      getLeaves(): obbdtBLeaves;
      /**Sets the value of the 'leaves' property.*/
      setLeaves(leaves: obbdtBLeaves): void;
   }
   /**Bamboo leaf size.*/
   export class obbdtBLeaves extends jlEnum<obbdtBLeaves> {
      /**Large leaves.*/
      static LARGE: obbdtBLeaves;
      /**No leaves.*/
      static NONE: obbdtBLeaves;
      /**Small leaves.*/
      static SMALL: obbdtBLeaves;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtBLeaves;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtBLeaves[];
   }
   /**A single entry from a ban list. This may represent either a player ban or  an IP ban.    Ban entries include the following properties:    Property information        Property      Description        Target Name \/ IP Address      The target name or IP address        Creation Date      The creation date of the ban        Source      The source of the ban, such as a player, console, plugin, etc        Expiration Date      The expiration date of the ban        Reason      The reason for the ban        Unsaved information is not automatically written to the implementation's  ban list, instead, the save() method must be called to write the  changes to the ban list. If this ban entry has expired (such as from an  unban) and is no longer found in the list, the save() call will  re-add it to the list, therefore banning the victim specified.    Likewise, changes to the associated BanList or other entries may or  may not be reflected in this entry.*/
   export interface obBanEntry {
      /**Gets the date this ban entry was created.*/
      getCreated(): juDate;
      /**Gets the date this ban expires on, or null for no defined end date.*/
      getExpiration(): juDate;
      /**Gets the reason for this ban.*/
      getReason(): string;
      /**Gets the source of this ban.*/
      getSource(): string;
      /**Gets the target involved.*/
      getTarget(): string;
      /**Saves the ban entry, overwriting any previous data in the ban list.*/
      save(): void;
      /**Sets the date this ban entry was created.*/
      setCreated(created: juDate): void;
      /**Sets the date this ban expires on.*/
      setExpiration(expiration: juDate): void;
      /**Sets the reason for this ban.*/
      setReason(reason: string): void;
      /**Sets the source of this ban.*/
      setSource(source: string): void;
   }
   /**A ban list, containing bans of some BanList.Type.*/
   export interface obBanList {
      /**Adds a ban to the this list.*/
      addBan(target: string, reason: string, expires: juDate, source: string): obBanEntry;
      /**Gets a set containing every BanEntry in this list.*/
      getBanEntries(): juSet<obBanEntry>;
      /**Gets a BanEntry by target.*/
      getBanEntry(target: string): obBanEntry;
      /**Gets if a BanEntry exists for the target, indicating an active  ban status.*/
      isBanned(target: string): boolean;
      /**Removes the specified target from this list, therefore indicating a  "not banned" status.*/
      pardon(target: string): void;
   }
   /**Represents a ban-type that a BanList may track.*/
   export class obBType extends jlEnum<obBType> {
      /**Banned player IP addresses*/
      static IP: obBType;
      /**Banned player names*/
      static NAME: obBType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obBType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obBType[];
   }
   /**Represents a captured state of a banner.*/
   export interface obbBanner extends obbTileState {
      /**Adds a new pattern on top of the existing  patterns*/
      addPattern(pattern: obbbPattern): void;
      /**Returns the base color for this banner*/
      getBaseColor(): obDyeColor;
      /**Returns the pattern at the specified index*/
      getPattern(i: number): obbbPattern;
      /**Returns a list of patterns on this banner*/
      getPatterns(): juList<obbbPattern>;
      /**Returns the number of patterns on this  banner*/
      numberOfPatterns(): number;
      /**Removes the pattern at the specified index*/
      removePattern(i: number): obbbPattern;
      /**Sets the base color for this banner.*/
      setBaseColor(color: obDyeColor): void;
      /**Sets the pattern at the specified index*/
      setPattern(i: number, pattern: obbbPattern): void;
      /**Sets the patterns used on this banner*/
      setPatterns(patterns: juList<obbbPattern>): void;
   }
   export interface obimBannerMeta extends obimItemMeta {
      /**Adds a new pattern on top of the existing  patterns*/
      addPattern(pattern: obbbPattern): void;
      /**Returns the pattern at the specified index*/
      getPattern(i: number): obbbPattern;
      /**Returns a list of patterns on this banner*/
      getPatterns(): juList<obbbPattern>;
      /**Returns the number of patterns on this  banner*/
      numberOfPatterns(): number;
      /**Removes the pattern at the specified index*/
      removePattern(i: number): obbbPattern;
      /**Sets the pattern at the specified index*/
      setPattern(i: number, pattern: obbbPattern): void;
      /**Sets the patterns used on this banner*/
      setPatterns(patterns: juList<obbbPattern>): void;
   }
   export class obbBarColor extends jlEnum<obbBarColor> {
      static BLUE: obbBarColor;
      static GREEN: obbBarColor;
      static PINK: obbBarColor;
      static PURPLE: obbBarColor;
      static RED: obbBarColor;
      static WHITE: obbBarColor;
      static YELLOW: obbBarColor;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbBarColor;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbBarColor[];
   }
   export class obbBarFlag extends jlEnum<obbBarFlag> {
      /**Creates fog around the world.*/
      static CREATE_FOG: obbBarFlag;
      /**Darkens the sky like during fighting a wither.*/
      static DARKEN_SKY: obbBarFlag;
      /**Tells the client to play the Ender Dragon boss music.*/
      static PLAY_BOSS_MUSIC: obbBarFlag;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbBarFlag;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbBarFlag[];
   }
   /**Represents a captured state of a Barrel.*/
   export interface obbBarrel extends obbContainer, oblLootable, obbLidded {}
   export class obbBarStyle extends jlEnum<obbBarStyle> {
      /**Splits the boss bar into 10 segments*/
      static SEGMENTED_10: obbBarStyle;
      /**Splits the boss bar into 12 segments*/
      static SEGMENTED_12: obbBarStyle;
      /**Splits the boss bar into 20 segments*/
      static SEGMENTED_20: obbBarStyle;
      /**Splits the boss bar into 6 segments*/
      static SEGMENTED_6: obbBarStyle;
      /**Makes the boss bar solid (no segments)*/
      static SOLID: obbBarStyle;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbBarStyle;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbBarStyle[];
   }
   export class ipptBaseTag<T extends Keyed, C extends BaseTag<T, C>> extends jlObject implements obTag<T> {
      constructor (clazz: jlClass<T>, key: obNamespacedKey, values: juCollection<T>);
      constructor (
         clazz: jlClass<T>,
         key: obNamespacedKey,
         values: juCollection<T>,
         ...globalPredicates: jufPredicate<T>[]
      );
      constructor (clazz: jlClass<T>, key: obNamespacedKey, filter: jufPredicate<T>);
      constructor (clazz: jlClass<T>, key: obNamespacedKey, ...values: T[]);
      add (collection: juCollection<T>): C;
      add (filter: jufPredicate<T>): C;
      add (...tags: obTag<T>[]): C;
      add (...values: T[]): C;
      contains (_with: string): C;
      endsWith (_with: string): C;
      ensureSize (label: string, size: number): C;
      getAllPossibleValues (): juSet<T>;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      getName (value: T): string;
      /**Gets an immutable set of all tagged items.*/
      getValues (): juSet<T>;
      /**Returns whether or not this tag has an entry for the specified item.*/
      isTagged (item: T): boolean;
      not (values: juCollection<T>): C;
      not (filter: jufPredicate<T>): C;
      not (...tags: obTag<T>[]): C;
      not (...values: T[]): C;
      notContains (_with: string): C;
      notEndsWith (_with: string): C;
      notStartsWith (_with: string): C;
      startsWith (_with: string): C;
   }
   /**Represents a Bat*/
   export interface obeBat extends obeAmbient {
      /**Checks the current waking state of this bat.*/
      isAwake(): boolean;
      /**This method modifies the current waking state of this bat.*/
      setAwake(state: boolean): void;
   }
   /**Called when a bat attempts to sleep or wake up from its slumber.    If a Bat Toggle Sleep event is cancelled, the Bat will not toggle its sleep  state.*/
   export class obeeBatToggleSleepEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeBat, awake: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get whether or not the bat is attempting to awaken.*/
      isAwake (): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a captured state of a beacon.*/
   export interface obbBeacon extends obbTileState, obbLockable, obNameable {
      /**Gets the effect range of this beacon.*/
      getEffectRange(): number;
      /**Returns the list of players within the beacon's range of effect.*/
      getEntitiesInRange(): juCollection<obeLivingEntity>;
      /**Returns the primary effect set on the beacon*/
      getPrimaryEffect(): obpPotionEffect;
      /**Returns the secondary effect set on the beacon.*/
      getSecondaryEffect(): obpPotionEffect;
      /**Returns the tier of the beacon pyramid (0-4).*/
      getTier(): number;
      /**Resets the custom range from this beacon and falls back to the range based on the the beacon tier.*/
      resetEffectRange(): void;
      /**Sets the effect range of the beacon  A negative range value means the beacon is using its default range based on tier.*/
      setEffectRange(range: number): void;
      /**Set the primary effect on this beacon, or null to clear.*/
      setPrimaryEffect(effect: obpPotionEffectType): void;
      /**Set the secondary effect on this beacon, or null to clear.*/
      setSecondaryEffect(effect: obpPotionEffectType): void;
   }
   /**Called when a beacon effect is being applied to a player.*/
   export class cdpebBeaconEffectEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, effect: obpPotionEffect, player: obePlayer, primary: boolean);
      /**Gets the potion effect being applied.*/
      getEffect (): obpPotionEffect;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the player who the potion effect is being applied to.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets whether the effect is a primary beacon effect.*/
      isPrimary (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      /**Sets the potion effect that will be applied.*/
      setEffect (effect: obpPotionEffect): void;
   }
   /**Interface to the inventory of a Beacon.*/
   export interface obiBeaconInventory extends obiInventory {
      /**Get the item powering the beacon.*/
      getItem(): obiItemStack;
      /**Set the item powering the beacon.*/
      setItem(item: obiItemStack): void;
   }
   /**Similar to Bisected, 'part' denotes which half of the bed this block  corresponds to.    'occupied' property is a quick flag to check if a player is currently  sleeping in this bed block.*/
   export interface obbdtBed extends obbdDirectional {
      /**Gets the value of the 'part' property.*/
      getPart(): obbdtBPart;
      /**Gets the value of the 'occupied' property.*/
      isOccupied(): boolean;
      /**Sets the value of the 'part' property.*/
      setPart(part: obbdtBPart): void;
   }
   /**Horizontal half of a bed.*/
   export class obbdtBPart extends jlEnum<obbdtBPart> {
      /**The foot is the lower half of the bed.*/
      static FOOT: obbdtBPart;
      /**The head is the upper part of the bed containing the pillow.*/
      static HEAD: obbdtBPart;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtBPart;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtBPart[];
   }
   /**Represents a Bee.*/
   export interface obeBee extends obeAnimals {
      /**Get the bee's anger level.*/
      getAnger(): number;
      /**Get the amount of ticks the bee cannot enter the hive for.*/
      getCannotEnterHiveTicks(): number;
      /**Get the bee's flower location.*/
      getFlower(): obLocation;
      /**Get the bee's hive location.*/
      getHive(): obLocation;
      /**Get if the bee has nectar.*/
      hasNectar(): boolean;
      /**Get if the bee has stung.*/
      hasStung(): boolean;
      /**Set the bee's new anger level.*/
      setAnger(anger: number): void;
      /**Set the amount of ticks the bee cannot enter a hive for.*/
      setCannotEnterHiveTicks(ticks: number): void;
      /**Set the bee's flower location.*/
      setFlower(location: obLocation): void;
      /**Set if the bee has nectar.*/
      setHasNectar(nectar: boolean): void;
      /**Set if the bee has stung.*/
      setHasStung(stung: boolean): void;
      /**Set the bee's hive location.*/
      setHive(location: obLocation): void;
   }
   /**Represents a captured state of a bee hive.*/
   export interface obbBeehive extends obbEntityBlockStorage<obeBee> {
      /**Get the hive's flower location.*/
      getFlower(): obLocation;
      /**Check if the hive is sedated due to smoke from a nearby campfire.*/
      isSedated(): boolean;
      /**Set the hive's flower location.*/
      setFlower(location: obLocation): void;
   }
   /**'honey_level' represents the amount of honey stored in the hive.*/
   export interface obbdtBeehive extends obbdDirectional {
      /**Gets the value of the 'honey_level' property.*/
      getHoneyLevel(): number;
      /**Gets the maximum allowed value of the 'honey_level' property.*/
      getMaximumHoneyLevel(): number;
      /**Sets the value of the 'honey_level' property.*/
      setHoneyLevel(honeyLevel: number): void;
   }
   /**Represents a captured state of Bell.*/
   export interface obbBell extends obbTileState {}
   /**'attachment' denotes how the bell is attached to its block.*/
   export interface obbdtBell extends obbdDirectional, obbdPowerable {
      /**Gets the value of the 'attachment' property.*/
      getAttachment(): obbdtBAttachment;
      /**Sets the value of the 'attachment' property.*/
      setAttachment(attachment: obbdtBAttachment): void;
   }
   /**What the bell is attached to.*/
   export class obbdtBAttachment extends jlEnum<obbdtBAttachment> {
      /**Placed on ceiling.*/
      static CEILING: obbdtBAttachment;
      /**Placed between two walls.*/
      static DOUBLE_WALL: obbdtBAttachment;
      /**Placed on floor.*/
      static FLOOR: obbdtBAttachment;
      /**Placed on one wall.*/
      static SINGLE_WALL: obbdtBAttachment;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtBAttachment;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtBAttachment[];
   }
   /**Called when a bell is rung.*/
   export class ippebBellRingEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, entity: obeEntity);
      /**Gets the entity that rang the bell.*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Holds all accepted Biomes in the default server*/
   export class obbBiome extends jlEnum<obbBiome> implements obKeyed {
      static BADLANDS: obbBiome;
      static BADLANDS_PLATEAU: obbBiome;
      static BAMBOO_JUNGLE: obbBiome;
      static BAMBOO_JUNGLE_HILLS: obbBiome;
      static BASALT_DELTAS: obbBiome;
      static BEACH: obbBiome;
      static BIRCH_FOREST: obbBiome;
      static BIRCH_FOREST_HILLS: obbBiome;
      static COLD_OCEAN: obbBiome;
      static CRIMSON_FOREST: obbBiome;
      static DARK_FOREST: obbBiome;
      static DARK_FOREST_HILLS: obbBiome;
      static DEEP_COLD_OCEAN: obbBiome;
      static DEEP_FROZEN_OCEAN: obbBiome;
      static DEEP_LUKEWARM_OCEAN: obbBiome;
      static DEEP_OCEAN: obbBiome;
      static DEEP_WARM_OCEAN: obbBiome;
      static DESERT: obbBiome;
      static DESERT_HILLS: obbBiome;
      static DESERT_LAKES: obbBiome;
      static END_BARRENS: obbBiome;
      static END_HIGHLANDS: obbBiome;
      static END_MIDLANDS: obbBiome;
      static ERODED_BADLANDS: obbBiome;
      static FLOWER_FOREST: obbBiome;
      static FOREST: obbBiome;
      static FROZEN_OCEAN: obbBiome;
      static FROZEN_RIVER: obbBiome;
      static GIANT_SPRUCE_TAIGA: obbBiome;
      static GIANT_SPRUCE_TAIGA_HILLS: obbBiome;
      static GIANT_TREE_TAIGA: obbBiome;
      static GIANT_TREE_TAIGA_HILLS: obbBiome;
      static GRAVELLY_MOUNTAINS: obbBiome;
      static ICE_SPIKES: obbBiome;
      static JUNGLE: obbBiome;
      static JUNGLE_EDGE: obbBiome;
      static JUNGLE_HILLS: obbBiome;
      static LUKEWARM_OCEAN: obbBiome;
      static MODIFIED_BADLANDS_PLATEAU: obbBiome;
      static MODIFIED_GRAVELLY_MOUNTAINS: obbBiome;
      static MODIFIED_JUNGLE: obbBiome;
      static MODIFIED_JUNGLE_EDGE: obbBiome;
      static MODIFIED_WOODED_BADLANDS_PLATEAU: obbBiome;
      static MOUNTAIN_EDGE: obbBiome;
      static MOUNTAINS: obbBiome;
      static MUSHROOM_FIELD_SHORE: obbBiome;
      static MUSHROOM_FIELDS: obbBiome;
      static NETHER_WASTES: obbBiome;
      static OCEAN: obbBiome;
      static PLAINS: obbBiome;
      static RIVER: obbBiome;
      static SAVANNA: obbBiome;
      static SAVANNA_PLATEAU: obbBiome;
      static SHATTERED_SAVANNA: obbBiome;
      static SHATTERED_SAVANNA_PLATEAU: obbBiome;
      static SMALL_END_ISLANDS: obbBiome;
      static SNOWY_BEACH: obbBiome;
      static SNOWY_MOUNTAINS: obbBiome;
      static SNOWY_TAIGA: obbBiome;
      static SNOWY_TAIGA_HILLS: obbBiome;
      static SNOWY_TAIGA_MOUNTAINS: obbBiome;
      static SNOWY_TUNDRA: obbBiome;
      static SOUL_SAND_VALLEY: obbBiome;
      static STONE_SHORE: obbBiome;
      static SUNFLOWER_PLAINS: obbBiome;
      static SWAMP: obbBiome;
      static SWAMP_HILLS: obbBiome;
      static TAIGA: obbBiome;
      static TAIGA_HILLS: obbBiome;
      static TAIGA_MOUNTAINS: obbBiome;
      static TALL_BIRCH_FOREST: obbBiome;
      static TALL_BIRCH_HILLS: obbBiome;
      static THE_END: obbBiome;
      static THE_VOID: obbBiome;
      static WARM_OCEAN: obbBiome;
      static WARPED_FOREST: obbBiome;
      static WOODED_BADLANDS_PLATEAU: obbBiome;
      static WOODED_HILLS: obbBiome;
      static WOODED_MOUNTAINS: obbBiome;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbBiome;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbBiome[];
   }
   /**'half' denotes which half of a two block tall material this block is.    In game it may be referred to as either (top, bottom) or (upper, lower).*/
   export interface obbdBisected extends obbdBlockData {
      /**Gets the value of the 'half' property.*/
      getHalf(): obbdBHalf;
      /**Sets the value of the 'half' property.*/
      setHalf(half: obbdBHalf): void;
   }
   /**The half of a vertically bisected block.*/
   export class obbdBHalf extends jlEnum<obbdBHalf> {
      /**The bottom half of the block, normally with the lower y coordinate.*/
      static BOTTOM: obbdBHalf;
      /**The top half of the block, normally with the higher y coordinate.*/
      static TOP: obbdBHalf;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdBHalf;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdBHalf[];
   }
   /**Represents a captured state of a blast furnace.*/
   export interface obbBlastFurnace extends obbFurnace {}
   /**Represents a campfire recipe.*/
   export class obiBlastingRecipe extends obiCookingRecipe<obiBlastingRecipe> {
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         input: obiRecipeChoice,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         experience: number,
         cookingTime: number
      );
   }
   /**Represents a Blaze monster*/
   export interface obeBlaze extends obeMonster {}
   /**Represents a block. This is a live object, and only one Block may exist for  any given location in a world. The state of the block may change  concurrently to your own handling of it; use block.getState() to get a  snapshot state of a block which will not be modified.     Note that parts of this class which require access to the world at large  (i.e. lighting and power) may not be able to be safely accessed during world  generation when used in cases like BlockPhysicsEvent!!!!*/
   export interface obbBlock extends obmMetadatable {
      /**Simulate bone meal application to this block (if possible).*/
      applyBoneMeal(face: obbBlockFace): boolean;
      /**Breaks the block and spawns items as if a player had digged it regardless  of the tool.*/
      breakNaturally(): boolean;
      /**Breaks the block and spawns items as if a player had digged it with a  specific tool*/
      breakNaturally(tool: obiItemStack): boolean;
      /**Breaks the block and spawns items as if a player had digged it with a  specific tool*/
      breakNaturally(tool: obiItemStack, triggerEffect: boolean): boolean;
      /**Returns the biome that this block resides in*/
      getBiome(): obbBiome;
      /**Gets the complete block data for this block*/
      getBlockData(): obbdBlockData;
      /**Returns this block's coordinates packed into a long value.*/
      getBlockKey(): number;
      /**Returns the specified block coordinates packed into a long value*/
      static getBlockKey(x: number, y: number, z: number): number;
      /**Returns the x component from the packed value.*/
      static getBlockKeyX(packed: number): number;
      /**Returns the y component from the packed value.*/
      static getBlockKeyY(packed: number): number;
      /**Returns the z component from the packed value.*/
      static getBlockKeyZ(packed: number): number;
      /**Returns the redstone power being provided to this block*/
      getBlockPower(): number;
      /**Returns the redstone power being provided to this block face*/
      getBlockPower(face: obbBlockFace): number;
      /**Gets the approximate bounding box for this block.*/
      getBoundingBox(): obuBoundingBox;
      /**Gets the chunk which contains this block*/
      getChunk(): obChunk;
      /**Gets the speed at which this block will be destroyed by a given ItemStack*/
      getDestroySpeed(itemStack: obiItemStack): number;
      /**Returns a list of items which would drop by destroying this block*/
      getDrops(): juCollection<obiItemStack>;
      /**Returns a list of items which would drop by destroying this block with  a specific tool*/
      getDrops(tool: obiItemStack): juCollection<obiItemStack>;
      /**Returns a list of items which would drop by the entity destroying this  block with a specific tool*/
      getDrops(tool: obiItemStack, entity: obeEntity): juCollection<obiItemStack>;
      /**Gets the face relation of this block compared to the given block.*/
      getFace(block: obbBlock): obbBlockFace;
      /**Gets the humidity of the biome of this block*/
      getHumidity(): number;
      /**Get the amount of light at this block from nearby blocks.*/
      getLightFromBlocks(): number;
      /**Get the amount of light at this block from the sky.*/
      getLightFromSky(): number;
      /**Gets the light level between 0-15*/
      getLightLevel(): number;
      /**Gets the Location of the block*/
      getLocation(): obLocation;
      /**Stores the location of the block in the provided Location object.*/
      getLocation(loc: obLocation): obLocation;
      /**Returns the reaction of the block when moved by a piston*/
      getPistonMoveReaction(): obbPistonMoveReaction;
      /**Gets the block at the given offsets*/
      getRelative(modX: number, modY: number, modZ: number): obbBlock;
      /**Gets the block at the given face*/
      getRelative(face: obbBlockFace): obbBlock;
      /**Gets the block at the given distance of the given face*/
      getRelative(face: obbBlockFace, distance: number): obbBlock;
      /**Gets the BlockSoundGroup for this block.*/
      getSoundGroup(): cdpbBlockSoundGroup;
      /**Captures the current state of this block.*/
      getState(): obbBlockState;
      getState(useSnapshot: boolean): obbBlockState;
      /**Gets the temperature of this block.*/
      getTemperature(): number;
      /**Return the translation key for the Block, so the client can translate it into the active  locale when using a TranslatableComponent.*/
      getTranslationKey(): string;
      /**Gets the type of this block*/
      getType(): obMaterial;
      /**Gets the world which contains this Block*/
      getWorld(): obWorld;
      /**Gets the x-coordinate of this block*/
      getX(): number;
      /**Gets the y-coordinate of this block*/
      getY(): number;
      /**Gets the z-coordinate of this block*/
      getZ(): number;
      /**Returns true if the block face is being indirectly powered by Redstone.*/
      isBlockFaceIndirectlyPowered(face: obbBlockFace): boolean;
      /**Returns true if the block face is being powered by Redstone.*/
      isBlockFacePowered(face: obbBlockFace): boolean;
      /**Returns true if the block is being indirectly powered by Redstone.*/
      isBlockIndirectlyPowered(): boolean;
      /**Returns true if the block is being powered by Redstone.*/
      isBlockPowered(): boolean;
      /**Check if this block is solid*/
      isBuildable(): boolean;
      /**Check if this block is burnable*/
      isBurnable(): boolean;
      /**Checks if this block is empty.*/
      isEmpty(): boolean;
      /**Checks if this block is liquid.*/
      isLiquid(): boolean;
      /**Checks if this block is passable.*/
      isPassable(): boolean;
      /**Check if this block is replaceable*/
      isReplaceable(): boolean;
      /**Check if this block is solid*/
      isSolid(): boolean;
      /**Performs a ray trace that checks for collision with this specific block  in its current state using its precise collision shape.*/
      rayTrace(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         fluidCollisionMode: obFluidCollisionMode
      ): obuRayTraceResult;
      /**Sets the biome that this block resides in*/
      setBiome(bio: obbBiome): void;
      /**Sets the complete data for this block*/
      setBlockData(data: obbdBlockData): void;
      /**Sets the complete data for this block     Note that applyPhysics = false is not in general safe.*/
      setBlockData(data: obbdBlockData, applyPhysics: boolean): void;
      /**Sets the type of this block*/
      setType(type: obMaterial): void;
      /**Sets the type of this block     Note that applyPhysics = false is not in general safe.*/
      setType(type: obMaterial, applyPhysics: boolean): void;
   }
   /**Called when a block is broken by a player.    If you wish to have the block drop experience, you must set the experience  value above 0. By default, experience will be set in the event if:    The player is not in creative or adventure mode  The player can loot the block (ie: does not destroy it completely, by      using the correct tool)  The player does not have silk touch  The block drops experience in vanilla Minecraft      Note:  Plugins wanting to simulate a traditional block drop should set the block  to air and utilize their own methods for determining what the default drop  for the block being broken is and what to do about it, if anything.    If a Block Break event is cancelled, the block will not break and  experience will not drop.*/
   export class obebBlockBreakEvent extends obebBlockExpEvent implements obeCancellable {
      constructor (theBlock: obbBlock, player: obePlayer);
      /**Gets the Player that is breaking the block involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets whether or not the block will drop items.*/
      isDropItems (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether or not the block will drop items as it normally would.*/
      setDropItems (dropItems: boolean): void;
   }
   /**Called when a block is destroyed as a result of being burnt by fire.    If a Block Burn event is cancelled, the block will not be destroyed as a  result of being burnt by fire.*/
   export class obebBlockBurnEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock);
      constructor (block: obbBlock, ignitingBlock: obbBlock);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the block which ignited this block.*/
      getIgnitingBlock (): obbBlock;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when we try to place a block, to see if we can build it here or not.    Note:    The Block returned by getBlock() is the block we are trying to place      on, not the block we are trying to place.  If you want to figure out what is being placed, use getMaterial() instead.*/
   export class obebBlockCanBuildEvent extends obebBlockEvent {
      constructor (block: obbBlock, type: obbdBlockData, canBuild: boolean);
      constructor (block: obbBlock, player: obePlayer, type: obbdBlockData, canBuild: boolean);
      /**Gets the BlockData that we are trying to place.*/
      getBlockData (): obbdBlockData;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Material that we are trying to place.*/
      getMaterial (): obMaterial;
      /**Gets the player who placed the block involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets whether or not the block can be built here.*/
      isBuildable (): boolean;
      /**Sets whether the block can be built here or not.*/
      setBuildable (cancel: boolean): void;
   }
   /**A delegate for handling block changes. This serves as a direct interface  between generation algorithms in the server implementation and utilizing  code.*/
   export interface obBlockChangeDelegate {
      /**Get the block data at the location.*/
      getBlockData(x: number, y: number, z: number): obbdBlockData;
      /**Gets the height of the world.*/
      getHeight(): number;
      /**Checks if the specified block is empty (air) or not.*/
      isEmpty(x: number, y: number, z: number): boolean;
      /**Set a block data at the specified coordinates.*/
      setBlockData(x: number, y: number, z: number, blockData: obbdBlockData): boolean;
   }
   export interface obcBlockCommandSender extends obcCommandSender {
      /**Returns the block this command sender belongs to*/
      getBlock(): obbBlock;
   }
   /**Called when an ItemStack is successfully cooked in a block.*/
   export class obebBlockCookEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, source: obiItemStack, result: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the resultant ItemStack for this event*/
      getResult (): obiItemStack;
      /**Gets the smelted ItemStack for this event*/
      getSource (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the resultant ItemStack for this event*/
      setResult (result: obiItemStack): void;
   }
   /**Called when a block is damaged by a player.    If a Block Damage event is cancelled, the block will not be damaged.*/
   export class obebBlockDamageEvent extends obebBlockEvent implements obeCancellable {
      constructor (player: obePlayer, block: obbBlock, itemInHand: obiItemStack, instaBreak: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets if the block is set to instantly break when damaged by the player.*/
      getInstaBreak (): boolean;
      /**Gets the ItemStack for the item currently in the player's hand.*/
      getItemInHand (): obiItemStack;
      /**Gets the player damaging the block involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets if the block should instantly break when damaged by the player.*/
      setInstaBreak (bool: boolean): void;
   }
   export interface obbdBlockData extends jlCloneable {
      /**Returns a copy of this BlockData.*/
      clone(): obbdBlockData;
      /**Gets a string, which when passed into a method such as  Server.createBlockData(java.lang.String) will unambiguously  recreate this instance.*/
      getAsString(): string;
      /**Gets a string, which when passed into a method such as  Server.createBlockData(java.lang.String) will recreate this or a  similar instance where unspecified states (if any) may be optionally  omitted.*/
      getAsString(hideUnspecified: boolean): string;
      /**Get the Material represented by this block data.*/
      getMaterial(): obMaterial;
      /**Gets the block's SoundGroup which can be used to get its step  sound, hit sound, and others.*/
      getSoundGroup(): obSoundGroup;
      /**Checks if the specified BlockData matches this block data.*/
      matches(data: obbdBlockData): boolean;
      /**Merges all explicitly set states from the given data with this BlockData.*/
      merge(data: obbdBlockData): obbdBlockData;
   }
   export interface obimBlockDataMeta extends obimItemMeta {
      /**Returns the currently attached block data for this item or creates a new  one if one doesn't exist.*/
      getBlockData(material: obMaterial): obbdBlockData;
      /**Returns whether the item has block data currently attached to it.*/
      hasBlockData(): boolean;
      /**Attaches a copy of the passed block data to the item.*/
      setBlockData(blockData: obbdBlockData): void;
   }
   /**Fired anytime the server intends to 'destroy' a block through some triggering reason.  This does not fire anytime a block is set to air, but only with more direct triggers such  as physics updates, pistons, Entities changing blocks, commands set to "Destroy".   This event is associated with the game playing a sound effect at the block in question, when  something can be described as "intend to destroy what is there",   Events such as leaves decaying, pistons retracting (where the block is moving), does NOT fire this event.*/
   export class cdpebBlockDestroyEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, newState: obbdBlockData, willDrop: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getNewState (): obbdBlockData;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      playEffect (): boolean;
      /**If the event is cancelled, the block will remain in its previous state.*/
      setCancelled (cancel: boolean): void;
      setPlayEffect (playEffect: boolean): void;
      willDrop (): boolean;
   }
   /**Called when an equippable item is dispensed from a block and equipped on a  nearby entity.    If a Block Dispense Armor event is cancelled, the equipment will not be  equipped on the target entity.*/
   export class obebBlockDispenseArmorEvent extends obebBlockDispenseEvent {
      constructor (block: obbBlock, dispensed: obiItemStack, target: obeLivingEntity);
      /**Get the living entity on which the armor was dispensed.*/
      getTargetEntity (): obeLivingEntity;
   }
   /**Called when an item is dispensed from a block.    If a Block Dispense event is cancelled, the block will not dispense the  item.*/
   export class obebBlockDispenseEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, dispensed: obiItemStack, velocity: obuVector);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item that is being dispensed.*/
      getItem (): obiItemStack;
      /**Gets the velocity.*/
      getVelocity (): obuVector;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the item being dispensed.*/
      setItem (item: obiItemStack): void;
      /**Sets the velocity of the item being dispensed.*/
      setVelocity (vel: obuVector): void;
   }
   /**Called if a block broken by a player drops an item.   If the block break is cancelled, this event won't be called.   If isDropItems in BlockBreakEvent is set to false, this event won't be  called.   This event will also be called if the player breaks a multi block structure,  for example a torch on top of a stone. Both items will have an event call.   The Block is already broken as this event is called, so #getBlock() will be  AIR in most cases. Use #getBlockState() for more Information about the broken  block.*/
   export class obebBlockDropItemEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, blockState: obbBlockState, player: obePlayer, items: juList<obeItem>);
      /**Gets the BlockState of the block involved in this event before it was  broken.*/
      getBlockState (): obbBlockState;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets list of the Item drops caused by the block break.*/
      getItems (): juList<obeItem>;
      /**Gets the Player that is breaking the block involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a block related event.*/
   export class obebBlockEvent extends obeEvent {
      constructor (theBlock: obbBlock);
      /**Gets the block involved in this event.*/
      getBlock (): obbBlock;
   }
   /**An event that's called when a block yields experience.*/
   export class obebBlockExpEvent extends obebBlockEvent {
      constructor (block: obbBlock, exp: number);
      /**Get the experience dropped by the block after the event has processed*/
      getExpToDrop (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Set the amount of experience dropped by the block after the event has  processed*/
      setExpToDrop (exp: number): void;
   }
   /**Called when a block explodes*/
   export class obebBlockExplodeEvent extends obebBlockEvent implements obeCancellable {
      constructor (what: obbBlock, blocks: juList<obbBlock>, yield: number);
      /**Returns the list of blocks that would have been removed or were removed  from the explosion event.*/
      blockList (): juList<obbBlock>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the percentage of blocks to drop from this explosion*/
      getYield (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the percentage of blocks to drop from this explosion*/
      setYield (yield: number): void;
   }
   /**Represents the face of a block*/
   export class obbBlockFace extends jlEnum<obbBlockFace> {
      static DOWN: obbBlockFace;
      static EAST: obbBlockFace;
      static EAST_NORTH_EAST: obbBlockFace;
      static EAST_SOUTH_EAST: obbBlockFace;
      static NORTH: obbBlockFace;
      static NORTH_EAST: obbBlockFace;
      static NORTH_NORTH_EAST: obbBlockFace;
      static NORTH_NORTH_WEST: obbBlockFace;
      static NORTH_WEST: obbBlockFace;
      static SELF: obbBlockFace;
      static SOUTH: obbBlockFace;
      static SOUTH_EAST: obbBlockFace;
      static SOUTH_SOUTH_EAST: obbBlockFace;
      static SOUTH_SOUTH_WEST: obbBlockFace;
      static SOUTH_WEST: obbBlockFace;
      static UP: obbBlockFace;
      static WEST: obbBlockFace;
      static WEST_NORTH_WEST: obbBlockFace;
      static WEST_SOUTH_WEST: obbBlockFace;
      /**Gets the normal vector corresponding to this block face.*/
      getDirection (): obuVector;
      /**Get the amount of X-coordinates to modify to get the represented block*/
      getModX (): number;
      /**Get the amount of Y-coordinates to modify to get the represented block*/
      getModY (): number;
      /**Get the amount of Z-coordinates to modify to get the represented block*/
      getModZ (): number;
      getOppositeFace (): obbBlockFace;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbBlockFace;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbBlockFace[];
   }
   /**Called when a block fades, melts or disappears based on world conditions    Examples:    Snow melting due to being near a light source.  Ice melting due to being near a light source.  Fire burning out after time, without destroying fuel block.  Coral fading to dead coral due to lack of water  Turtle Egg bursting when a turtle hatches      If a Block Fade event is cancelled, the block will not fade, melt or  disappear.*/
   export class obebBlockFadeEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, newState: obbBlockState);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the state of the block that will be fading, melting or  disappearing.*/
      getNewState (): obbBlockState;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a block tries to dispense an item, but its inventory is empty.*/
   export class ippebBlockFailedDispenseEvent extends obebBlockEvent {
      constructor (theBlock: obbBlock);
      /**Calls the event and tests if cancelled.*/
      callEvent (): boolean;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      shouldPlayEffect (): boolean;
      /**Sets if the effect for empty dispensers should be played*/
      shouldPlayEffect (playEffect: boolean): void;
   }
   /**Called with the block changes resulting from a player fertilizing a given  block with bonemeal. Will be called after the applicable  StructureGrowEvent.*/
   export class obebBlockFertilizeEvent extends obebBlockEvent implements obeCancellable {
      constructor (theBlock: obbBlock, player: obePlayer, blocks: juList<obbBlockState>);
      /**Gets a list of all blocks changed by the fertilization.*/
      getBlocks (): juList<obbBlockState>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the player that triggered the fertilization.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Called when a block is formed or spreads based on world conditions.    Use BlockSpreadEvent to catch blocks that actually spread and don't  just "randomly" form.    Examples:    Snow forming due to a snow storm.  Ice forming in a snowy Biome like Taiga or Tundra.   Obsidian \/ Cobblestone forming due to contact with water.   Concrete forming due to mixing of concrete powder and water.      If a Block Form event is cancelled, the block will not be formed.*/
   export class obebBlockFormEvent extends obebBlockGrowEvent {
      constructor (block: obbBlock, newState: obbBlockState);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents events with a source block and a destination block, currently  only applies to liquid (lava and water) and teleporting dragon eggs.    If a Block From To event is cancelled, the block will not move (the liquid  will not flow).*/
   export class obebBlockFromToEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, toBlock: obbBlock);
      constructor (block: obbBlock, face: obbBlockFace);
      /**Gets the BlockFace that the block is moving to.*/
      getFace (): obbBlockFace;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Convenience method for getting the faced Block.*/
      getToBlock (): obbBlock;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a block grows naturally in the world.    Examples:    Wheat  Sugar Cane  Cactus  Watermelon  Pumpkin  Turtle Egg      If a Block Grow event is cancelled, the block will not grow.*/
   export class obebBlockGrowEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, newState: obbBlockState);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the state of the block where it will form or spread to.*/
      getNewState (): obbBlockState;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a block is ignited. If you want to catch when a Player places  fire, you need to use BlockPlaceEvent.    If a Block Ignite event is cancelled, the block will not be ignited.*/
   export class obebBlockIgniteEvent extends obebBlockEvent implements obeCancellable {
      constructor (theBlock: obbBlock, cause: obebBIgniteCause, ignitingBlock: obbBlock);
      constructor (theBlock: obbBlock, cause: obebBIgniteCause, ignitingEntity: obeEntity);
      constructor (theBlock: obbBlock, cause: obebBIgniteCause, ignitingEntity: obeEntity, ignitingBlock: obbBlock);
      /**Gets the cause of block ignite.*/
      getCause (): obebBIgniteCause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the block which ignited this block*/
      getIgnitingBlock (): obbBlock;
      /**Gets the entity who ignited this block*/
      getIgnitingEntity (): obeEntity;
      /**Gets the player who ignited this block*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An enum to specify the cause of the ignite*/
   export class obebBIgniteCause extends jlEnum<obebBIgniteCause> {
      /**Block ignition caused by a flaming arrow.*/
      static ARROW: obebBIgniteCause;
      /**Block ignition caused by an Ender Crystal.*/
      static ENDER_CRYSTAL: obebBIgniteCause;
      /**Block ignition caused by explosion.*/
      static EXPLOSION: obebBIgniteCause;
      /**Block ignition caused by an entity using a fireball.*/
      static FIREBALL: obebBIgniteCause;
      /**Block ignition caused by a player or dispenser using flint-and-steel.*/
      static FLINT_AND_STEEL: obebBIgniteCause;
      /**Block ignition caused by lava.*/
      static LAVA: obebBIgniteCause;
      /**Block ignition caused by lightning.*/
      static LIGHTNING: obebBIgniteCause;
      /**Block ignition caused by dynamic spreading of fire.*/
      static SPREAD: obebBIgniteCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obebBIgniteCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obebBIgniteCause[];
   }
   /**Represents a block inventory holder - either a BlockState, or a regular  Block.*/
   export interface obiBlockInventoryHolder extends obiInventoryHolder {
      /**Gets the block associated with this holder.*/
      getBlock(): obbBlock;
   }
   /**This class performs ray tracing and iterates along blocks on a line*/
   export class obuBlockIterator extends jlObject implements juIterator<obbBlock> {
      constructor (entity: obeLivingEntity);
      constructor (entity: obeLivingEntity, maxDistance: number);
      constructor (loc: obLocation);
      constructor (loc: obLocation, yOffset: number);
      constructor (loc: obLocation, yOffset: number, maxDistance: number);
      constructor (world: obWorld, start: obuVector, direction: obuVector, yOffset: number, maxDistance: number);
      /**Returns true if the iteration has more elements*/
      hasNext (): boolean;
      /**Returns the next Block in the trace*/
      next (): obbBlock;
      remove (): void;
   }
   /**Fired when a single block placement action of a player triggers the  creation of multiple blocks(e.g. placing a bed block). The block returned  by BlockPlaceEvent.getBlockPlaced() and its related methods is the block where  the placed block would exist if the placement only affected a single  block.*/
   export class obebBlockMultiPlaceEvent extends obebBlockPlaceEvent {
      constructor (
         states: juList<obbBlockState>,
         clicked: obbBlock,
         itemInHand: obiItemStack,
         thePlayer: obePlayer,
         canBuild: boolean
      );
      constructor (
         states: juList<obbBlockState>,
         clicked: obbBlock,
         itemInHand: obiItemStack,
         thePlayer: obePlayer,
         canBuild: boolean,
         hand: obiEquipmentSlot
      );
      /**Gets a list of blockstates for all blocks which were replaced by the  placement of the new blocks.*/
      getReplacedBlockStates (): juList<obbBlockState>;
   }
   /**Thrown when a block physics check is called.    This event is a high frequency event, it may be called thousands of times per  a second on a busy server. Plugins are advised to listen to the event with  caution and only perform lightweight checks when using it.    In addition to this, cancelling the event is liable to leave the world in an  inconsistent state. For example if you use the event to leave a block  floating in mid air when that block has a requirement to be attached to  something, there is no guarantee that the floating block will persist across  server restarts or map upgrades.    Plugins should also note that where possible this event may only called for  the "root" block of physics updates in order to limit event spam. Physics  updates that cause other blocks to change their state may not result in an  event for each of those blocks (usually adjacent). If you are concerned about  monitoring these changes then you should check adjacent blocks yourself.*/
   export class obebBlockPhysicsEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, changed: obbdBlockData);
      constructor (block: obbBlock, changed: obbdBlockData, sourceX: number, sourceY: number, sourceZ: number);
      constructor (block: obbBlock, changed: obbdBlockData, sourceBlock: obbBlock);
      /**Gets the type of block that changed, causing this event*/
      getChangedType (): obMaterial;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the source block that triggered this event.*/
      getSourceBlock (): obbBlock;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a piston block is triggered*/
   export class obebBlockPistonEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, direction: obbBlockFace);
      /**Return the direction in which the piston will operate.*/
      getDirection (): obbBlockFace;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Returns true if the Piston in the event is sticky.*/
      isSticky (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Called when a piston extends*/
   export class obebBlockPistonExtendEvent extends obebBlockPistonEvent {
      constructor (block: obbBlock, length: number, direction: obbBlockFace);
      constructor (block: obbBlock, blocks: juList<obbBlock>, direction: obbBlockFace);
      /**Get an immutable list of the blocks which will be moved by the  extending.*/
      getBlocks (): juList<obbBlock>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a piston retracts*/
   export class obebBlockPistonRetractEvent extends obebBlockPistonEvent {
      constructor (block: obbBlock, blocks: juList<obbBlock>, direction: obbBlockFace);
      /**Get an immutable list of the blocks which will be moved by the  extending.*/
      getBlocks (): juList<obbBlock>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a block is placed by a player.    If a Block Place event is cancelled, the block will not be placed.*/
   export class obebBlockPlaceEvent extends obebBlockEvent implements obeCancellable {
      constructor (
         placedBlock: obbBlock,
         replacedBlockState: obbBlockState,
         placedAgainst: obbBlock,
         itemInHand: obiItemStack,
         thePlayer: obePlayer,
         canBuild: boolean
      );
      constructor (
         placedBlock: obbBlock,
         replacedBlockState: obbBlockState,
         placedAgainst: obbBlock,
         itemInHand: obiItemStack,
         thePlayer: obePlayer,
         canBuild: boolean,
         hand: obiEquipmentSlot
      );
      /**Gets the value whether the player would be allowed to build here.*/
      canBuild (): boolean;
      /**Gets the block that this block was placed against*/
      getBlockAgainst (): obbBlock;
      /**Clarity method for getting the placed block.*/
      getBlockPlaced (): obbBlock;
      /**Gets the BlockState for the block which was replaced.*/
      getBlockReplacedState (): obbBlockState;
      /**Gets the hand which placed the block*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item in the player's hand when they placed the block.*/
      getItemInHand (): obiItemStack;
      /**Gets the player who placed the block involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the canBuild state of this event.*/
      setBuild (canBuild: boolean): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**A block populator is responsible for generating a small area of blocks.    For example, generating glowstone inside the nether or generating dungeons  full of treasure*/
   export class obgBlockPopulator extends jlObject {
      constructor ();
      /**Populates an area of blocks at or around the given chunk.*/
      populate (world: obWorld, random: juRandom, source: obChunk): void;
   }
   export class ippebBlockPreDispenseEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, itemStack: obiItemStack, slot: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the ItemStack to be dispensed.*/
      getItemStack (): obiItemStack;
      /**Gets the inventory slot of the dispenser to dispense from.*/
      getSlot (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export interface obpBlockProjectileSource extends obpProjectileSource {
      /**Gets the block this projectile source belongs to.*/
      getBlock(): obbBlock;
   }
   /**Called when a redstone current changes*/
   export class obebBlockRedstoneEvent extends obebBlockEvent {
      constructor (block: obbBlock, oldCurrent: number, newCurrent: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new current of this block*/
      getNewCurrent (): number;
      /**Gets the old current of this block*/
      getOldCurrent (): number;
      /**Sets the new current of this block*/
      setNewCurrent (newCurrent: number): void;
   }
   /**Event fired when a dispenser shears a nearby sheep.*/
   export class obebBlockShearEntityEvent extends obebBlockEvent implements obeCancellable {
      constructor (dispenser: obbBlock, sheared: obeEntity, tool: obiItemStack);
      /**Gets the entity that was sheared.*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item used to shear this sheep.*/
      getTool (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Represents the sounds that a Block makes in certain situations    The sound group includes break, step, place, hit, and fall sounds.*/
   export interface cdpbBlockSoundGroup {
      /**Gets the sound that plays when breaking this block*/
      getBreakSound(): obSound;
      /**Gets the sound that plays when this block falls*/
      getFallSound(): obSound;
      /**Gets the sound that plays when hitting this block*/
      getHitSound(): obSound;
      /**Gets the sound that plays when placing this block*/
      getPlaceSound(): obSound;
      /**Gets the sound that plays when stepping on this block*/
      getStepSound(): obSound;
   }
   /**Called when a block spreads based on world conditions.    Use BlockFormEvent to catch blocks that "randomly" form instead of  actually spread.    Examples:    Mushrooms spreading.  Fire spreading.      If a Block Spread event is cancelled, the block will not spread.*/
   export class obebBlockSpreadEvent extends obebBlockFormEvent {
      constructor (block: obbBlock, source: obbBlock, newState: obbBlockState);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the source block involved in this event.*/
      getSource (): obbBlock;
   }
   /**Represents a captured state of a block, which will not change  automatically.    Unlike Block, which only one object can exist per coordinate, BlockState  can exist multiple times for any given Block. Note that another plugin may  change the state of the block and you will not know, or they may change the  block to another type entirely, causing your BlockState to become invalid.*/
   export interface obbBlockState extends obmMetadatable {
      /**Gets the block represented by this block state.*/
      getBlock(): obbBlock;
      /**Gets the data for this block state.*/
      getBlockData(): obbdBlockData;
      /**Gets the chunk which contains the block represented by this block state.*/
      getChunk(): obChunk;
      /**Gets the metadata for this block state.*/
      getData(): obmMaterialData;
      /**Gets the current light level of the block represented by this block state.*/
      getLightLevel(): number;
      /**Gets the location of this block state.*/
      getLocation(): obLocation;
      /**Stores the location of this block state in the provided Location object.*/
      getLocation(loc: obLocation): obLocation;
      /**Gets the type of this block state.*/
      getType(): obMaterial;
      /**Gets the world which contains the block represented by this block state.*/
      getWorld(): obWorld;
      /**Gets the x-coordinate of this block state.*/
      getX(): number;
      /**Gets the y-coordinate of this block state.*/
      getY(): number;
      /**Gets the z-coordinate of this block state.*/
      getZ(): number;
      /**Returns whether this state is placed in the world.*/
      isPlaced(): boolean;
      /**Sets the data for this block state.*/
      setBlockData(data: obbdBlockData): void;
      /**Sets the metadata for this block state.*/
      setData(data: obmMaterialData): void;
      /**Sets the type of this block state.*/
      setType(type: obMaterial): void;
      /**Attempts to update the block represented by this state, setting it to  the new values as defined by this state.*/
      update(): boolean;
      /**Attempts to update the block represented by this state, setting it to  the new values as defined by this state.*/
      update(force: boolean): boolean;
      /**Attempts to update the block represented by this state, setting it to  the new values as defined by this state.*/
      update(force: boolean, applyPhysics: boolean): boolean;
   }
   export interface obimBlockStateMeta extends obimItemMeta {
      /**Returns the currently attached block state for this  item or creates a new one if one doesn't exist.*/
      getBlockState(): obbBlockState;
      /**Returns whether the item has a block state currently  attached to it.*/
      hasBlockState(): boolean;
      /**Attaches a copy of the passed block state to the item.*/
      setBlockState(blockState: obbBlockState): void;
   }
   /**A vector with a hash function that floors the X, Y, Z components, a la  BlockVector in WorldEdit. BlockVectors can be used in hash sets and  hash maps. Be aware that BlockVectors are mutable, but it is important  that BlockVectors are never changed once put into a hash set or hash map.*/
   export class obuBlockVector extends obuVector {
      constructor ();
      constructor (x: number, y: number, z: number);
      constructor (x: number, y: number, z: number);
      constructor (x: number, y: number, z: number);
      constructor (vec: obuVector);
      /**Get a new block vector.*/
      clone (): obuBlockVector;
      static deserialize (args: juMap<string, jlObject>): obuBlockVector;
      /**Checks if another object is equivalent.*/
      equals (obj: jlObject): boolean;
      /**Returns a hash code for this vector.*/
      hashCode (): number;
   }
   /**Represents a boat entity.*/
   export interface obeBoat extends obeVehicle {
      /**Gets the Material that represents this Boat type.*/
      getBoatMaterial(): obMaterial;
      /**Gets the wood type of the boat.*/
      getWoodType(): obTreeSpecies;
      /**Sets the wood type of the boat.*/
      setWoodType(species: obTreeSpecies): void;
   }
   /**Represents a book (Material.WRITABLE_BOOK or Material.WRITTEN_BOOK) that can have a title, an author, and pages.*/
   export interface obimBookMeta extends obimItemMeta {
      /**Adds new pages to the end of the book.*/
      addPage(...pages: string[]): void;
      clone(): obimBookMeta;
      /**Gets the author of the book.*/
      getAuthor(): string;
      /**Gets the generation of the book.*/
      getGeneration(): obimBGeneration;
      /**Gets the specified page in the book.*/
      getPage(page: number): string;
      /**Gets the number of pages in the book.*/
      getPageCount(): number;
      /**Gets all the pages in the book.*/
      getPages(): juList<string>;
      /**Gets the title of the book.*/
      getTitle(): string;
      /**Checks for the existence of an author in the book.*/
      hasAuthor(): boolean;
      /**Checks for the existence of generation level in the book.*/
      hasGeneration(): boolean;
      /**Checks for the existence of pages in the book.*/
      hasPages(): boolean;
      /**Checks for the existence of a title in the book.*/
      hasTitle(): boolean;
      /**Sets the author of the book.*/
      setAuthor(author: string): void;
      /**Sets the generation of the book.*/
      setGeneration(generation: obimBGeneration): void;
      /**Sets the specified page in the book.*/
      setPage(page: number, data: string): void;
      /**Clears the existing book pages, and sets the book to use the provided  pages.*/
      setPages(...pages: string[]): void;
      /**Clears the existing book pages, and sets the book to use the provided  pages.*/
      setPages(pages: juList<string>): void;
      /**Sets the title of the book.*/
      setTitle(title: string): boolean;
      spigot(): obimBSpigot;
   }
   /**Represents the generation (or level of copying) of a written book*/
   export class obimBGeneration extends jlEnum<obimBGeneration> {
      /**Book that was copied from a copy of an original.*/
      static COPY_OF_COPY: obimBGeneration;
      /**Book that was copied from an original.*/
      static COPY_OF_ORIGINAL: obimBGeneration;
      /**Book written into a book-and-quill.*/
      static ORIGINAL: obimBGeneration;
      /**Unused; unobtainable by players.*/
      static TATTERED: obimBGeneration;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obimBGeneration;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obimBGeneration[];
   }
   export class obimBSpigot extends jlObject {
      constructor ();
      /**Adds new pages to the end of the book.*/
      addPage (...pages: nmbacBaseComponent[][]): void;
      /**Gets the specified page in the book.*/
      getPage (page: number): nmbacBaseComponent[];
      /**Gets all the pages in the book.*/
      getPages (): juList<nmbacBaseComponent[]>;
      /**Sets the specified page in the book.*/
      setPage (page: number, ...data: nmbacBaseComponent[]): void;
      /**Clears the existing book pages, and sets the book to use the provided  pages.*/
      setPages (pages: juList<nmbacBaseComponent[]>): void;
      /**Clears the existing book pages, and sets the book to use the provided  pages.*/
      setPages (...pages: nmbacBaseComponent[][]): void;
   }
   /**BooleanPrompt is the base class for any prompt that requires a boolean  response from the user.*/
   export class obcBooleanPrompt extends obcValidatingPrompt {
      constructor ();
      /**Override this method to perform some action with the user's boolean  response.*/
      acceptValidatedInput (context: obcConversationContext, input: boolean): obcPrompt;
      /**Override this method to accept and processes the validated input from  the user.*/
      acceptValidatedInput (context: obcConversationContext, input: string): obcPrompt;
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
   }
   /**Represents the Boss Entity.*/
   export interface obeBoss extends obeEntity {
      /**Returns the BossBar of the Boss*/
      getBossBar(): obbBossBar;
   }
   export interface obbBossBar {
      /**Add an optional flag to this boss bar*/
      addFlag(flag: obbBarFlag): void;
      /**Adds the player to this boss bar causing it to display on their screen.*/
      addPlayer(player: obePlayer): void;
      /**Returns the color of this boss bar*/
      getColor(): obbBarColor;
      /**Returns all players viewing this boss bar*/
      getPlayers(): juList<obePlayer>;
      /**Returns the progress of the bar between 0.0 and 1.0*/
      getProgress(): number;
      /**Returns the style of this boss bar*/
      getStyle(): obbBarStyle;
      /**Returns the title of this boss bar*/
      getTitle(): string;
      /**Returns whether this boss bar as the passed flag set*/
      hasFlag(flag: obbBarFlag): boolean;
      /**Return if the boss bar is displayed to attached players.*/
      isVisible(): boolean;
      /**Removes all players from this boss bar*/
      removeAll(): void;
      /**Remove an existing flag on this boss bar*/
      removeFlag(flag: obbBarFlag): void;
      /**Removes the player from this boss bar causing it to be removed from their  screen.*/
      removePlayer(player: obePlayer): void;
      /**Sets the color of this boss bar.*/
      setColor(color: obbBarColor): void;
      /**Sets the progress of the bar.*/
      setProgress(progress: number): void;
      /**Sets the bar style of this boss bar*/
      setStyle(style: obbBarStyle): void;
      /**Sets the title of this boss bar*/
      setTitle(title: string): void;
      /**Set if the boss bar is displayed to attached players.*/
      setVisible(visible: boolean): void;
   }
   /**A mutable axis aligned bounding box (AABB).    This basically represents a rectangular box (specified by minimum and maximum  corners) that can for example be used to describe the position and extents of  an object (such as an entity, block, or rectangular region) in 3D space. Its  edges and faces are parallel to the axes of the cartesian coordinate system.    The bounding box may be degenerate (one or more sides having the length 0).    Because bounding boxes are mutable, storing them long term may be dangerous  if they get modified later. If you want to keep around a bounding box, it may  be wise to call clone() in order to get a copy.*/
   export class obuBoundingBox extends jlObject implements jlCloneable, obcsConfigurationSerializable {
      constructor ();
      constructor (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number);
      /**Creates a copy of this bounding box.*/
      clone (): obuBoundingBox;
      /**Checks if this bounding box contains the specified position.*/
      contains (x: number, y: number, z: number): boolean;
      /**Checks if this bounding box fully contains the given bounding box.*/
      contains (other: obuBoundingBox): boolean;
      /**Checks if this bounding box contains the specified position.*/
      contains (position: obuVector): boolean;
      /**Checks if this bounding box fully contains the bounding box that is  defined by the given corners.*/
      contains (min: obuVector, max: obuVector): boolean;
      /**Copies another bounding box.*/
      copy (other: obuBoundingBox): obuBoundingBox;
      static deserialize (args: juMap<string, jlObject>): obuBoundingBox;
      equals (obj: jlObject): boolean;
      /**Expands this bounding box uniformly by the given value in all directions.*/
      expand (expansion: number): obuBoundingBox;
      /**Expands this bounding box uniformly by the given values in both positive  and negative directions.*/
      expand (x: number, y: number, z: number): obuBoundingBox;
      /**Expands this bounding box in the specified direction.*/
      expand (dirX: number, dirY: number, dirZ: number, expansion: number): obuBoundingBox;
      /**Expands this bounding box by the given values in the corresponding  directions.*/
      expand (
         negativeX: number,
         negativeY: number,
         negativeZ: number,
         positiveX: number,
         positiveY: number,
         positiveZ: number
      ): obuBoundingBox;
      /**Expands this bounding box in the direction specified by the given block  face.*/
      expand (blockFace: obbBlockFace, expansion: number): obuBoundingBox;
      /**Expands this bounding box uniformly by the given values in both positive  and negative directions.*/
      expand (expansion: obuVector): obuBoundingBox;
      /**Expands this bounding box in the specified direction.*/
      expand (direction: obuVector, expansion: number): obuBoundingBox;
      /**Expands this bounding box in the specified direction.*/
      expandDirectional (dirX: number, dirY: number, dirZ: number): obuBoundingBox;
      /**Expands this bounding box in the specified direction.*/
      expandDirectional (direction: obuVector): obuBoundingBox;
      /**Gets the center of the bounding box.*/
      getCenter (): obuVector;
      /**Gets the x coordinate of the center of the bounding box.*/
      getCenterX (): number;
      /**Gets the y coordinate of the center of the bounding box.*/
      getCenterY (): number;
      /**Gets the z coordinate of the center of the bounding box.*/
      getCenterZ (): number;
      /**Gets the height of the bounding box.*/
      getHeight (): number;
      /**Gets the maximum corner as vector.*/
      getMax (): obuVector;
      /**Gets the maximum x value.*/
      getMaxX (): number;
      /**Gets the maximum y value.*/
      getMaxY (): number;
      /**Gets the maximum z value.*/
      getMaxZ (): number;
      /**Gets the minimum corner as vector.*/
      getMin (): obuVector;
      /**Gets the minimum x value.*/
      getMinX (): number;
      /**Gets the minimum y value.*/
      getMinY (): number;
      /**Gets the minimum z value.*/
      getMinZ (): number;
      /**Gets the volume of the bounding box.*/
      getVolume (): number;
      /**Gets the width of the bounding box in the x direction.*/
      getWidthX (): number;
      /**Gets the width of the bounding box in the z direction.*/
      getWidthZ (): number;
      hashCode (): number;
      /**Resizes this bounding box to represent the intersection of this and the  given bounding box.*/
      intersection (other: obuBoundingBox): obuBoundingBox;
      /**Creates a new 1x1x1 sized bounding box containing the given block.*/
      static of (block: obbBlock): obuBoundingBox;
      /**Creates a new bounding box using the coordinates of the given blocks as  corners.*/
      static of (corner1: obbBlock, corner2: obbBlock): obuBoundingBox;
      /**Creates a new bounding box using the given center and extents.*/
      static of (center: obLocation, x: number, y: number, z: number): obuBoundingBox;
      /**Creates a new bounding box using the coordinates of the given locations  as corners.*/
      static of (corner1: obLocation, corner2: obLocation): obuBoundingBox;
      /**Creates a new bounding box using the given center and extents.*/
      static of (center: obuVector, x: number, y: number, z: number): obuBoundingBox;
      /**Creates a new bounding box using the coordinates of the given vectors as  corners.*/
      static of (corner1: obuVector, corner2: obuVector): obuBoundingBox;
      /**Checks if this bounding box overlaps with the given bounding box.*/
      overlaps (other: obuBoundingBox): boolean;
      /**Checks if this bounding box overlaps with the bounding box that is  defined by the given corners.*/
      overlaps (min: obuVector, max: obuVector): boolean;
      /**Calculates the intersection of this bounding box with the specified line  segment.*/
      rayTrace (start: obuVector, direction: obuVector, maxDistance: number): obuRayTraceResult;
      /**Resizes this bounding box.*/
      resize (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): obuBoundingBox;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      /**Shifts this bounding box by the given amounts.*/
      shift (shiftX: number, shiftY: number, shiftZ: number): obuBoundingBox;
      /**Shifts this bounding box by the given amounts.*/
      shift (shift: obLocation): obuBoundingBox;
      /**Shifts this bounding box by the given amounts.*/
      shift (shift: obuVector): obuBoundingBox;
      toString (): string;
      /**Expands this bounding box to contain (or border) the specified position.*/
      union (posX: number, posY: number, posZ: number): obuBoundingBox;
      /**Expands this bounding box to contain (or border) the specified position.*/
      union (position: obLocation): obuBoundingBox;
      /**Expands this bounding box to contain both this and the given bounding  box.*/
      union (other: obuBoundingBox): obuBoundingBox;
      /**Expands this bounding box to contain (or border) the specified position.*/
      union (position: obuVector): obuBoundingBox;
   }
   /**Represents an entity that can age and breed.*/
   export interface obeBreedable extends obeAgeable {
      /**Return the ability to breed of the animal.*/
      canBreed(): boolean;
      /**Gets the current agelock.*/
      getAgeLock(): boolean;
      /**Lock the age of the animal, setting this will prevent the animal from  maturing or getting ready for mating.*/
      setAgeLock(lock: boolean): void;
      /**Set breedability of the animal, if the animal is a baby and set to  breed it will instantly grow up.*/
      setBreed(breed: boolean): void;
   }
   /**Interface to the inventory of a Brewing Stand.*/
   export interface obiBrewerInventory extends obiInventory {
      /**Get the current fuel for brewing.*/
      getFuel(): obiItemStack;
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obbBrewingStand;
      /**Get the current ingredient for brewing.*/
      getIngredient(): obiItemStack;
      /**Set the current fuel for brewing.*/
      setFuel(fuel: obiItemStack): void;
      /**Set the current ingredient for brewing.*/
      setIngredient(ingredient: obiItemStack): void;
   }
   /**Called when the brewing of the contents inside the Brewing Stand is  complete.*/
   export class obeiBrewEvent extends obebBlockEvent implements obeCancellable {
      constructor (brewer: obbBlock, contents: obiBrewerInventory, fuelLevel: number);
      /**Gets the contents of the Brewing Stand.*/
      getContents (): obiBrewerInventory;
      /**Gets the remaining fuel level.*/
      getFuelLevel (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a captured state of a brewing stand.*/
   export interface obbBrewingStand extends obbContainer {
      /**How much time is left in the brewing cycle.*/
      getBrewingTime(): number;
      /**Get the level of current fuel for brewing.*/
      getFuelLevel(): number;
      /**Gets the inventory of the block represented by this block state.*/
      getInventory(): obiBrewerInventory;
      /**Gets the captured inventory snapshot of this container.*/
      getSnapshotInventory(): obiBrewerInventory;
      /**Set the time left before brewing completes.*/
      setBrewingTime(brewTime: number): void;
      /**Set the level of current fuel for brewing.*/
      setFuelLevel(level: number): void;
   }
   /**Interface to the 'has_bottle_0', 'has_bottle_1', 'has_bottle_2' flags on a  brewing stand which indicate which bottles are rendered on the outside.    Stand may have 0, 1... getMaximumBottles()-1 bottles.*/
   export interface obbdtBrewingStand extends obbdBlockData {
      /**Get the indexes of all the bottles present on this block.*/
      getBottles(): juSet<jlInteger>;
      /**Get the maximum amount of bottles present on this stand.*/
      getMaximumBottles(): number;
      /**Checks if the stand has the following bottle*/
      hasBottle(bottle: number): boolean;
      /**Set whether the stand has this bottle present.*/
      setBottle(bottle: number, has: boolean): void;
   }
   /**Called when an ItemStack is about to increase the fuel level of a brewing  stand.*/
   export class obeiBrewingStandFuelEvent extends obebBlockEvent implements obeCancellable {
      constructor (brewingStand: obbBlock, fuel: obiItemStack, fuelPower: number);
      /**Gets the ItemStack of the fuel before the amount was subtracted.*/
      getFuel (): obiItemStack;
      /**Gets the fuel power for this fuel.*/
      getFuelPower (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets whether the brewing stand's fuel will be reduced \/ consumed or not.*/
      isConsuming (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether the brewing stand's fuel will be reduced \/ consumed or not.*/
      setConsuming (consuming: boolean): void;
      /**Sets the fuel power for this fuel.*/
      setFuelPower (fuelPower: number): void;
   }
   /**Event triggered for server broadcast messages such as from  Server.broadcast(String, String).   This event behaves similarly to AsyncPlayerChatEvent in that it  should be async if fired from an async thread. Please see that event for  further information.*/
   export class obesBroadcastMessageEvent extends obesServerEvent implements obeCancellable {
      constructor (isAsync: boolean, message: string, recipients: juSet<obcCommandSender>);
      constructor (message: string, recipients: juSet<obcCommandSender>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the message to broadcast.*/
      getMessage (): string;
      /**Gets a set of recipients that this chat message will be displayed to.*/
      getRecipients (): juSet<obcCommandSender>;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      /**Set the message to broadcast.*/
      setMessage (message: string): void;
   }
   export class obupBroadcastPermissions extends jlObject {
      static registerPermissions (parent: obpPermission): obpPermission;
   }
   /**'drag' indicates whether a force will be applied on entities moving through  this block.*/
   export interface obbdtBubbleColumn extends obbdBlockData {
      /**Gets the value of the 'drag' property.*/
      isDrag(): boolean;
      /**Sets the value of the 'drag' property.*/
      setDrag(drag: boolean): void;
   }
   export class obcBufferedCommandSender extends jlObject implements obcMessageCommandSender {
      constructor ();
      getBuffer (): string;
      reset (): void;
      /**Sends this sender a message*/
      sendMessage (message: string): void;
   }
   /**Represents the Bukkit core, for version and Server singleton handling*/
   export class obBukkit extends jlObject {
      /**Adds a recipe to the crafting manager.*/
      static addRecipe (recipe: obiRecipe): boolean;
      /**Get an iterator through all advancements.*/
      static advancementIterator (): juIterator<obaAdvancement>;
      /**Bans the specified address from the server.*/
      static banIP (address: string): void;
      /**Broadcasts the specified message to every user with the given  permission name.*/
      static broadcast (message: string, permission: string): number;
      /**Sends the component to all online players.*/
      static broadcast (component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to all online players.*/
      static broadcast (...components: nmbacBaseComponent[]): void;
      /**Broadcast a message to all players.*/
      static broadcastMessage (message: string): number;
      /**Clears the list of crafting recipes.*/
      static clearRecipes (): void;
      /**Creates a new BlockData instance with material and properties  parsed from provided data.*/
      static createBlockData (data: string): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults.*/
      static createBlockData (material: obMaterial): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults, except for those  provided in data.*/
      static createBlockData (material: obMaterial, data: string): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults.*/
      static createBlockData (material: obMaterial, consumer: jufConsumer<obbdBlockData>): obbdBlockData;
      /**Creates a boss bar instance to display to players.*/
      static createBossBar (title: string, color: obbBarColor, style: obbBarStyle, ...flags: obbBarFlag[]): obbBossBar;
      /**Creates a boss bar instance to display to players.*/
      static createBossBar (
         key: obNamespacedKey,
         title: string,
         color: obbBarColor,
         style: obbBarStyle,
         ...flags: obbBarFlag[]
      ): obbKeyedBossBar;
      /**Create a ChunkData for use in a generator.*/
      static createChunkData (world: obWorld): obgCChunkData;
      /**Create a new explorer map targeting the closest nearby structure of a  given StructureType.*/
      static createExplorerMap (world: obWorld, location: obLocation, structureType: obStructureType): obiItemStack;
      /**Create a new explorer map targeting the closest nearby structure of a  given StructureType.*/
      static createExplorerMap (
         world: obWorld,
         location: obLocation,
         structureType: obStructureType,
         radius: number,
         findUnexplored: boolean
      ): obiItemStack;
      /**Creates an empty inventory of type InventoryType.CHEST with the  specified size.*/
      static createInventory (owner: obiInventoryHolder, size: number): obiInventory;
      /**Creates an empty inventory of type InventoryType.CHEST with the  specified size and title.*/
      static createInventory (owner: obiInventoryHolder, size: number, title: string): obiInventory;
      /**Creates an empty inventory with the specified type.*/
      static createInventory (owner: obiInventoryHolder, type: obeiInventoryType): obiInventory;
      /**Creates an empty inventory with the specified type and title.*/
      static createInventory (owner: obiInventoryHolder, type: obeiInventoryType, title: string): obiInventory;
      /**Create a new map with an automatically assigned ID.*/
      static createMap (world: obWorld): obmMapView;
      /**Creates an empty merchant.*/
      static createMerchant (title: string): obiMerchant;
      /**Creates a PlayerProfile for the specified name, with UUID as null*/
      static createProfile (name: string): cdppPlayerProfile;
      /**Creates a PlayerProfile for the specified uuid, with name as null*/
      static createProfile (uuid: juUUID): cdppPlayerProfile;
      /**Creates a PlayerProfile for the specified name\/uuid   Both UUID and Name can not be null at same time.*/
      static createProfile (uuid: juUUID, name: string): cdppPlayerProfile;
      /**Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world*/
      static createVanillaChunkData (world: obWorld, x: number, z: number): obgCChunkData;
      /**Creates or loads a world with the given name using the specified  options.*/
      static createWorld (creator: obWorldCreator): obWorld;
      /**Dispatches a command on this server, and executes it if found.*/
      static dispatchCommand (sender: obcCommandSender, commandLine: string): boolean;
      /**Get the advancement specified by this key.*/
      static getAdvancement (key: obNamespacedKey): obaAdvancement;
      /**Gets whether this server allows the End or not.*/
      static getAllowEnd (): boolean;
      /**Gets whether this server allows flying or not.*/
      static getAllowFlight (): boolean;
      /**Gets whether this server allows the Nether or not.*/
      static getAllowNether (): boolean;
      /**Gets user-specified limit for number of ambient mobs that can spawn in  a chunk.*/
      static getAmbientSpawnLimit (): number;
      /**Gets user-specified limit for number of animals that can spawn in a  chunk.*/
      static getAnimalSpawnLimit (): number;
      /**Get the average tick time (in millis)*/
      static getAverageTickTime (): number;
      /**Gets a ban list for the supplied type.*/
      static getBanList (type: obBType): obBanList;
      /**Gets a set containing all banned players.*/
      static getBannedPlayers (): juSet<obOfflinePlayer>;
      /**Gets the KeyedBossBar specified by this key.*/
      static getBossBar (key: obNamespacedKey): obbKeyedBossBar;
      /**Gets an unmodifiable iterator through all persistent bossbars.*/
      static getBossBars (): juIterator<obbKeyedBossBar>;
      /**Gets the Bukkit version that this server is running.*/
      static getBukkitVersion (): string;
      /**Gets a list of command aliases defined in the server properties.*/
      static getCommandAliases (): juMap<string, string[]>;
      /**Gets the active CommandMap*/
      static getCommandMap (): obcCommandMap;
      /**Gets the value of the connection throttle setting.*/
      static getConnectionThrottle (): number;
      /**Gets a ConsoleCommandSender that may be used as an input source  for this server.*/
      static getConsoleSender (): obcConsoleCommandSender;
      static getCurrentTick (): number;
      /**Gets the default GameMode for new players.*/
      static getDefaultGameMode (): obGameMode;
      /**Gets an entity on the server by its UUID*/
      static getEntity (uuid: juUUID): obeEntity;
      /**Get generate-structures setting.*/
      static getGenerateStructures (): boolean;
      /**Gets the HelpMap providing help topics for this server.*/
      static getHelpMap (): obhHelpMap;
      /**Gets the idle kick timeout.*/
      static getIdleTimeout (): number;
      /**Get the IP that this server is bound to, or empty string if not  specified.*/
      static getIp (): string;
      /**Gets a set containing all current IPs that are banned.*/
      static getIPBans (): juSet<string>;
      /**Gets the instance of the item factory (for ItemMeta).*/
      static getItemFactory (): obiItemFactory;
      /**Returns the primary logger associated with this server instance.*/
      static getLogger (): julLogger;
      /**Gets the specified LootTable.*/
      static getLootTable (key: obNamespacedKey): oblLootTable;
      /**Get the maximum amount of players which can login to this server.*/
      static getMaxPlayers (): number;
      /**Get max world size.*/
      static getMaxWorldSize (): number;
      /**Gets the Messenger responsible for this server.*/
      static getMessenger (): obpmMessenger;
      /**Gets the version of game this server implements*/
      static getMinecraftVersion (): string;
      /**Returns the MobGoals manager*/
      static getMobGoals (): cdpeaMobGoals;
      /**Gets user-specified limit for number of monsters that can spawn in a  chunk.*/
      static getMonsterSpawnLimit (): number;
      /**Gets the message that is displayed on the server list.*/
      static getMotd (): string;
      /**Gets the name of this server implementation.*/
      static getName (): string;
      /**Gets the player by the given UUID, regardless if they are offline or  online.*/
      static getOfflinePlayer (id: juUUID): obOfflinePlayer;
      /**Gets the player by the given name, regardless if they are offline or  online.*/
      static getOfflinePlayerIfCached (name: string): obOfflinePlayer;
      /**Gets every player that has ever played on this server.*/
      static getOfflinePlayers (): obOfflinePlayer[];
      /**Gets whether the Server is in online mode or not.*/
      static getOnlineMode (): boolean;
      /**Gets a view of all currently logged in players.*/
      static getOnlinePlayers (): juCollection<obePlayer>;
      /**Gets a set containing all player operators.*/
      static getOperators (): juSet<obOfflinePlayer>;
      static getPermissionMessage (): string;
      /**Gets a player object by the given username.*/
      static getPlayer (name: string): obePlayer;
      /**Gets the player with the given UUID.*/
      static getPlayer (id: juUUID): obePlayer;
      /**Gets the player with the exact given name, case insensitive.*/
      static getPlayerExact (name: string): obePlayer;
      /**Gets the unique ID of the player currently known as the specified player name  In Offline Mode, will return an Offline UUID*/
      static getPlayerUniqueId (playerName: string): juUUID;
      /**Gets a PluginCommand with the given name or alias.*/
      static getPluginCommand (name: string): obcPluginCommand;
      /**Gets the plugin manager for interfacing with plugins.*/
      static getPluginManager (): obpPluginManager;
      /**Get the game port that the server runs on.*/
      static getPort (): number;
      /**Get the Recipe for the given key.*/
      static getRecipe (recipeKey: obNamespacedKey): obiRecipe;
      /**Get a list of all recipes for a given item.*/
      static getRecipesFor (result: obiItemStack): juList<obiRecipe>;
      /**Gets the scheduler for managing scheduled events.*/
      static getScheduler (): obsBukkitScheduler;
      /**Gets the instance of the scoreboard manager.*/
      static getScoreboardManager (): obsScoreboardManager;
      /**Gets the current Server singleton*/
      static getServer (): obServer;
      /**Gets an instance of the server's default server-icon.*/
      static getServerIcon (): obuCachedServerIcon;
      /**Gets a services manager.*/
      static getServicesManager (): obpServicesManager;
      /**Gets the default message that is displayed when the server is stopped.*/
      static getShutdownMessage (): string;
      /**Gets the radius, in blocks, around each worlds spawn point to protect.*/
      static getSpawnRadius (): number;
      /**Gets a tag which has already been defined within the server.*/
      static getTag<T extends obKeyed> (registry: string, tag: obNamespacedKey, clazz: jlClass<T>): obTag<T>;
      /**Gets a all tags which have been defined within the server.*/
      static getTags<T extends obKeyed> (registry: string, clazz: jlClass<T>): jlIterable<obTag<T>>;
      /**Gets the default ticks per ambient mob spawns value.*/
      static getTicksPerAmbientSpawns (): number;
      /**Gets default ticks per animal spawns value.*/
      static getTicksPerAnimalSpawns (): number;
      /**Gets the default ticks per monster spawns value.*/
      static getTicksPerMonsterSpawns (): number;
      /**Gets the default ticks per water ambient mob spawns value.*/
      static getTicksPerWaterAmbientSpawns (): number;
      /**Gets the default ticks per water mob spawns value.*/
      static getTicksPerWaterSpawns (): number;
      /**Get a sample of the servers last tick times (in nanos)*/
      static getTickTimes (): number[];
      /**Gets the current server TPS*/
      static getTPS (): number[];
      /**Gets the name of the update folder.*/
      static getUpdateFolder (): string;
      /**Gets the update folder.*/
      static getUpdateFolderFile (): jiFile;
      /**Gets the version string of this server implementation.*/
      static getVersion (): string;
      /**Get the view distance from this server.*/
      static getViewDistance (): number;
      /**Gets the current warning state for the server.*/
      static getWarningState (): obWWarningState;
      /**Gets user-specified limit for number of water ambient mobs that can spawn  in a chunk.*/
      static getWaterAmbientSpawnLimit (): number;
      /**Gets user-specified limit for number of water animals that can spawn in  a chunk.*/
      static getWaterAnimalSpawnLimit (): number;
      /**Gets a list of whitelisted players.*/
      static getWhitelistedPlayers (): juSet<obOfflinePlayer>;
      /**Gets the world with the given name.*/
      static getWorld (name: string): obWorld;
      /**Gets the world from the given Unique ID.*/
      static getWorld (uid: juUUID): obWorld;
      /**Gets the folder that contains all of the various Worlds.*/
      static getWorldContainer (): jiFile;
      /**Gets a list of all worlds on this server.*/
      static getWorlds (): juList<obWorld>;
      /**Get world type (level-type setting) for default world.*/
      static getWorldType (): string;
      /**Gets whether this server has a whitelist or not.*/
      static hasWhitelist (): boolean;
      /**Gets whether the server is in hardcore mode or not.*/
      static isHardcore (): boolean;
      /**Checks the current thread against the expected primary thread for the  server.*/
      static isPrimaryThread (): boolean;
      /**Checks if the server is in the process of being shutdown.*/
      static isStopping (): boolean;
      /**Creates a cached server-icon for the specific image.*/
      static loadServerIcon (image: jaiBufferedImage): obuCachedServerIcon;
      /**Loads an image from a file, and returns a cached image for the specific  server-icon.*/
      static loadServerIcon (file: jiFile): obuCachedServerIcon;
      /**Attempts to match any players with the given name, and returns a list  of all possibly matches.*/
      static matchPlayer (name: string): juList<obePlayer>;
      /**Get an iterator through the list of crafting recipes.*/
      static recipeIterator (): juIterator<obiRecipe>;
      /**Reloads the server, refreshing settings and plugin information.*/
      static reload (): void;
      /**Reload the Command Aliases in commands.yml*/
      static reloadCommandAliases (): boolean;
      /**Reload only the Minecraft data for the server.*/
      static reloadData (): void;
      /**Reload the Permissions in permissions.yml*/
      static reloadPermissions (): void;
      /**Reloads the whitelist from disk.*/
      static reloadWhitelist (): void;
      /**Removes a KeyedBossBar specified by this key.*/
      static removeBossBar (key: obNamespacedKey): boolean;
      /**Remove a recipe from the server.*/
      static removeRecipe (key: obNamespacedKey): boolean;
      /**Resets the list of crafting recipes to the default.*/
      static resetRecipes (): void;
      /**Writes loaded players to disk.*/
      static savePlayers (): void;
      /**Selects entities using the given Vanilla selector.*/
      static selectEntities (sender: obcCommandSender, selector: string): juList<obeEntity>;
      /**Sets the default GameMode for new players.*/
      static setDefaultGameMode (mode: obGameMode): void;
      /**Set the idle kick timeout.*/
      static setIdleTimeout (threshold: number): void;
      /**Set the maximum amount of players which can login to this server.*/
      static setMaxPlayers (maxPlayers: number): void;
      /**Attempts to set the Server singleton.*/
      static setServer (server: obServer): void;
      /**Sets the radius, in blocks, around each worlds spawn point to protect.*/
      static setSpawnRadius (value: number): void;
      /**Sets if the server is whitelisted.*/
      static setWhitelist (value: boolean): void;
      /**Shutdowns the server, stopping everything.*/
      static shutdown (): void;
      static spigot (): obSSpigot;
      /**Checks if player names should be suggested when a command returns null as  their tab completion result.*/
      static suggestPlayerNamesWhenNullTabCompletions (): boolean;
      /**Unbans the specified address from the server.*/
      static unbanIP (address: string): void;
      /**Unloads a world with the given name.*/
      static unloadWorld (name: string, save: boolean): boolean;
      /**Unloads the given world.*/
      static unloadWorld (world: obWorld, save: boolean): boolean;
   }
   export class obcdBukkitCommand extends obcCommand {
      constructor (name: string);
      constructor (name: string, description: string, usageMessage: string, aliases: juList<string>);
   }
   /**This class is designed to be used in conjunction with the ConfigurationSerializable API. It translates objects back to their  original implementation after being serialized by BukkitObjectInputStream.    Behavior of implementations extending this class is not guaranteed across  future versions.*/
   export class obuiBukkitObjectInputStream extends jiObjectInputStream {
      constructor ();
      constructor (_in: jiInputStream);
      resolveObject (obj: jlObject): jlObject;
   }
   /**This class is designed to be used in conjunction with the ConfigurationSerializable API. It translates objects to an internal  implementation for later deserialization using BukkitObjectInputStream.    Behavior of implementations extending this class is not guaranteed across  future versions.*/
   export class obuiBukkitObjectOutputStream extends jiObjectOutputStream {
      constructor ();
      constructor (out: jiOutputStream);
      replaceObject (obj: jlObject): jlObject;
   }
   /**This class is provided as an easy way to handle scheduling tasks.*/
   export class obsBukkitRunnable extends jlObject implements jlRunnable {
      constructor ();
      /**Attempts to cancel this task.*/
      cancel (): void;
      /**Gets the task id for this runnable.*/
      getTaskId (): number;
      /**Returns true if this task has been cancelled.*/
      isCancelled (): boolean;
      /**Schedules this in the Bukkit scheduler to run on next tick.*/
      runTask (plugin: obpPlugin): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskAsynchronously (plugin: obpPlugin): obsBukkitTask;
      /**Schedules this to run after the specified number of server ticks.*/
      runTaskLater (plugin: obpPlugin, delay: number): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskLaterAsynchronously (plugin: obpPlugin, delay: number): obsBukkitTask;
      /**Schedules this to repeatedly run until cancelled, starting after the  specified number of server ticks.*/
      runTaskTimer (plugin: obpPlugin, delay: number, period: number): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskTimerAsynchronously (plugin: obpPlugin, delay: number, period: number): obsBukkitTask;
   }
   export interface obsBukkitScheduler {
      /**Calls a method on the main thread and returns a Future object.*/
      callSyncMethod<T>(plugin: obpPlugin, task: jucCallable<T>): jucFuture<T>;
      /**Removes task from scheduler.*/
      cancelTask(taskId: number): void;
      /**Removes all tasks associated with a particular plugin from the  scheduler.*/
      cancelTasks(plugin: obpPlugin): void;
      /**Returns a list of all active workers.*/
      getActiveWorkers(): juList<obsBukkitWorker>;
      /**Returns a list of all pending tasks.*/
      getPendingTasks(): juList<obsBukkitTask>;
      /**Check if the task currently running.*/
      isCurrentlyRunning(taskId: number): boolean;
      /**Check if the task queued to be run later.*/
      isQueued(taskId: number): boolean;
      /**Returns a task that will run on the next server tick.*/
      runTask(plugin: obpPlugin, task: jlRunnable): obsBukkitTask;
      /**Returns a task that will run on the next server tick.*/
      runTask(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>): void;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskAsynchronously(plugin: obpPlugin, task: jlRunnable): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskAsynchronously(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>): void;
      /**Returns a task that will run after the specified number of server  ticks.*/
      runTaskLater(plugin: obpPlugin, task: jlRunnable, delay: number): obsBukkitTask;
      /**Returns a task that will run after the specified number of server  ticks.*/
      runTaskLater(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>, delay: number): void;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskLaterAsynchronously(plugin: obpPlugin, task: jlRunnable, delay: number): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskLaterAsynchronously(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>, delay: number): void;
      /**Returns a task that will repeatedly run until cancelled, starting after  the specified number of server ticks.*/
      runTaskTimer(plugin: obpPlugin, task: jlRunnable, delay: number, period: number): obsBukkitTask;
      /**Returns a task that will repeatedly run until cancelled, starting after  the specified number of server ticks.*/
      runTaskTimer(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>, delay: number, period: number): void;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskTimerAsynchronously(plugin: obpPlugin, task: jlRunnable, delay: number, period: number): obsBukkitTask;
      /**Asynchronous tasks should never access any API in Bukkit.*/
      runTaskTimerAsynchronously(plugin: obpPlugin, task: jufConsumer<obsBukkitTask>, delay: number, period: number): void;
      /**Schedules a once off task to occur as soon as possible.*/
      scheduleSyncDelayedTask(plugin: obpPlugin, task: jlRunnable): number;
      /**Schedules a once off task to occur after a delay.*/
      scheduleSyncDelayedTask(plugin: obpPlugin, task: jlRunnable, delay: number): number;
      /**Schedules a repeating task.*/
      scheduleSyncRepeatingTask(plugin: obpPlugin, task: jlRunnable, delay: number, period: number): number;
   }
   /**Represents a task being executed by the scheduler*/
   export interface obsBukkitTask {
      /**Will attempt to cancel this task.*/
      cancel(): void;
      /**Returns the Plugin that owns this task.*/
      getOwner(): obpPlugin;
      /**Returns the taskId for the task.*/
      getTaskId(): number;
      /**Returns true if this task has been cancelled.*/
      isCancelled(): boolean;
      /**Returns true if the Task is a sync task.*/
      isSync(): boolean;
   }
   /**Represents a worker thread for the scheduler. This gives information about  the Thread object for the task, owner of the task and the taskId.    Workers are used to execute async tasks.*/
   export interface obsBukkitWorker {
      /**Returns the Plugin that owns this task.*/
      getOwner(): obpPlugin;
      /**Returns the taskId for the task being executed by this worker.*/
      getTaskId(): number;
      /**Returns the thread for the worker.*/
      getThread(): jlThread;
   }
   /**This is a cached version of a server-icon. It's internal representation  and implementation is undefined.*/
   export interface obuCachedServerIcon {
      getData(): string;
      isEmpty(): boolean;
   }
   export class cdpuCachedSizeConcurrentLinkedQueue<E> extends jucConcurrentLinkedQueue<E> {
      constructor ();
      add (e: E): boolean;
      poll (): E;
      size (): number;
   }
   /**'bites' represents the amount of bites which have been taken from this slice  of cake.    A value of 0 indicates that the cake has not been eaten, whilst a value of  getMaximumBites() indicates that it is all gone :(*/
   export interface obbdtCake extends obbdBlockData {
      /**Gets the value of the 'bites' property.*/
      getBites(): number;
      /**Gets the maximum allowed value of the 'bites' property.*/
      getMaximumBites(): number;
      /**Sets the value of the 'bites' property.*/
      setBites(bites: number): void;
   }
   /**Represents a captured state of a campfire.*/
   export interface obbCampfire extends obbTileState {
      /**Get cook time.*/
      getCookTime(index: number): number;
      /**Get cook time total.*/
      getCookTimeTotal(index: number): number;
      getItem(index: number): obiItemStack;
      getSize(): number;
      /**Set cook time.*/
      setCookTime(index: number, cookTime: number): void;
      /**Set cook time.*/
      setCookTimeTotal(index: number, cookTimeTotal: number): void;
      setItem(index: number, item: obiItemStack): void;
   }
   /**'signal_fire' denotes whether the fire is extra smokey due to having a hay  bale placed beneath it.*/
   export interface obbdtCampfire extends obbdDirectional, obbdLightable, obbdWaterlogged {
      /**Gets the value of the 'signal_fire' property.*/
      isSignalFire(): boolean;
      /**Sets the value of the 'signal_fire' property.*/
      setSignalFire(signalFire: boolean): void;
   }
   /**Represents a campfire recipe.*/
   export class obiCampfireRecipe extends obiCookingRecipe<obiCampfireRecipe> {
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         input: obiRecipeChoice,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         experience: number,
         cookingTime: number
      );
   }
   export interface obeCancellable {
      /**Gets the cancellation state of this event.*/
      isCancelled(): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled(cancel: boolean): void;
   }
   /**Interface to the inventory of a Cartography table.*/
   export interface obiCartographyInventory extends obiInventory {}
   /**Meow.*/
   export interface obeCat extends obeTameable, obeSittable {
      /**Gets the current type of this cat.*/
      getCatType(): obeCType;
      /**Get the collar color of this cat*/
      getCollarColor(): obDyeColor;
      /**Sets the current type of this cat.*/
      setCatType(type: obeCType): void;
      /**Set the collar color of this cat*/
      setCollarColor(color: obDyeColor): void;
   }
   /**Represents the various different cat types there are.*/
   export class obeCType extends jlEnum<obeCType> {
      static ALL_BLACK: obeCType;
      static BLACK: obeCType;
      static BRITISH_SHORTHAIR: obeCType;
      static CALICO: obeCType;
      static JELLIE: obeCType;
      static PERSIAN: obeCType;
      static RAGDOLL: obeCType;
      static RED: obeCType;
      static SIAMESE: obeCType;
      static TABBY: obeCType;
      static WHITE: obeCType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeCType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeCType[];
   }
   export class obebCauldronLevelChangeEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, entity: obeEntity, reason: obebCChangeReason, oldLevel: number, newLevel: number);
      /**Get entity which did this.*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getNewLevel (): number;
      getOldLevel (): number;
      getReason (): obebCChangeReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      setNewLevel (newLevel: number): void;
   }
   export class obebCChangeReason extends jlEnum<obebCChangeReason> {
      /**Player cleaning their armor.*/
      static ARMOR_WASH: obebCChangeReason;
      /**Player cleaning their banner.*/
      static BANNER_WASH: obebCChangeReason;
      /**Player filling the cauldron by emptying their bottle.*/
      static BOTTLE_EMPTY: obebCChangeReason;
      /**Player emptying the cauldron by filling their bottle.*/
      static BOTTLE_FILL: obebCChangeReason;
      /**Player filling the cauldron by emptying their bucket.*/
      static BUCKET_EMPTY: obebCChangeReason;
      /**Player emptying the cauldron by filling their bucket.*/
      static BUCKET_FILL: obebCChangeReason;
      /**Evaporating due to biome dryness.*/
      static EVAPORATE: obebCChangeReason;
      /**Entity being extinguished.*/
      static EXTINGUISH: obebCChangeReason;
      /**Unknown.*/
      static UNKNOWN: obebCChangeReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obebCChangeReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obebCChangeReason[];
   }
   /**Represents a Spider.*/
   export interface obeCaveSpider extends obeSpider {}
   export interface obbdtChain extends obbdOrientable, obbdWaterlogged {}
   /**Thrown if a Plugin Channel is too long.*/
   export class obpmChannelNameTooLongException extends jlRuntimeException {
      constructor ();
      constructor (channel: string);
   }
   /**Thrown if a Plugin attempts to send a message on an unregistered channel.*/
   export class obpmChannelNotRegisteredException extends jlRuntimeException {
      constructor ();
      constructor (channel: string);
   }
   /**All supported color values for chat*/
   export class obChatColor extends jlEnum<obChatColor> {
      /**Represents aqua*/
      static AQUA: obChatColor;
      /**Represents black*/
      static BLACK: obChatColor;
      /**Represents blue*/
      static BLUE: obChatColor;
      /**Makes the text bold.*/
      static BOLD: obChatColor;
      /**Represents dark blue (aqua)*/
      static DARK_AQUA: obChatColor;
      /**Represents dark blue*/
      static DARK_BLUE: obChatColor;
      /**Represents dark gray*/
      static DARK_GRAY: obChatColor;
      /**Represents dark green*/
      static DARK_GREEN: obChatColor;
      /**Represents dark purple*/
      static DARK_PURPLE: obChatColor;
      /**Represents dark red*/
      static DARK_RED: obChatColor;
      /**Represents gold*/
      static GOLD: obChatColor;
      /**Represents gray*/
      static GRAY: obChatColor;
      /**Represents green*/
      static GREEN: obChatColor;
      /**Makes the text italic.*/
      static ITALIC: obChatColor;
      /**Represents light purple*/
      static LIGHT_PURPLE: obChatColor;
      /**Represents magical characters that change around randomly*/
      static MAGIC: obChatColor;
      /**Represents red*/
      static RED: obChatColor;
      /**Resets all previous chat colors or formats.*/
      static RESET: obChatColor;
      /**Makes a line appear through the text.*/
      static STRIKETHROUGH: obChatColor;
      /**Makes the text appear underlined.*/
      static UNDERLINE: obChatColor;
      /**Represents white*/
      static WHITE: obChatColor;
      /**Represents yellow*/
      static YELLOW: obChatColor;
      asBungee (): nmbaChatColor;
      /**Gets the color represented by the specified color code*/
      static getByChar (code: string): obChatColor;
      /**Gets the color represented by the specified color code*/
      static getByChar (code: string): obChatColor;
      /**Gets the char value associated with this color*/
      getChar (): string;
      /**Gets the ChatColors used at the end of the given input string.*/
      static getLastColors (input: string): string;
      /**Checks if this code is a color code as opposed to a format code.*/
      isColor (): boolean;
      /**Checks if this code is a format code as opposed to a color code.*/
      isFormat (): boolean;
      /**Strips the given message of all color codes*/
      static stripColor (input: string): string;
      toString (): string;
      /**Translates a string using an alternate color code character into a  string that uses the internal ChatColor.COLOR_CODE color code  character.*/
      static translateAlternateColorCodes (altColorChar: string, textToTranslate: string): string;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obChatColor;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obChatColor[];
   }
   /**The ChatPaginator takes a raw string of arbitrary length and breaks it down  into an array of strings appropriate for displaying on the Minecraft player  console.*/
   export class obuChatPaginator extends jlObject {
      constructor ();
      /**Breaks a raw string up into pages using the default width and height.*/
      static paginate (unpaginatedString: string, pageNumber: number): obuCChatPage;
      /**Breaks a raw string up into pages using a provided width and height.*/
      static paginate (
         unpaginatedString: string,
         pageNumber: number,
         lineLength: number,
         pageHeight: number
      ): obuCChatPage;
      /**Breaks a raw string up into a series of lines.*/
      static wordWrap (rawString: string, lineLength: number): string[];
   }
   export class obuCChatPage extends jlObject {
      constructor (lines: string[], pageNumber: number, totalPages: number);
      getLines (): string[];
      getPageNumber (): number;
      getTotalPages (): number;
   }
   /**Represents a captured state of a chest.*/
   export interface obbChest extends obbContainer, cdplLootableBlockInventory, obbLidded {
      /**Gets the inventory of the chest block represented by this block state.*/
      getBlockInventory(): obiInventory;
   }
   /**'type' represents which part of a double chest this block is, or if it is a  single chest.*/
   export interface obbdtChest extends obbdDirectional, obbdWaterlogged {
      /**Gets the value of the 'type' property.*/
      getType(): obbdtCType;
      /**Sets the value of the 'type' property.*/
      setType(type: obbdtCType): void;
   }
   /**Type of this chest block.    NB: Left and right are relative to the chest itself, i.e opposite to what  a player placing the appropriate block would see.*/
   export class obbdtCType extends jlEnum<obbdtCType> {
      /**The chest is the left hand side of a double chest and shares a 54  block inventory with the chest to its right.*/
      static LEFT: obbdtCType;
      /**The chest is the right hand side of a double chest and shares a 54  block inventory with the chest to its left.*/
      static RIGHT: obbdtCType;
      /**The chest is not linked to any others and contains only one 27 slot  inventory.*/
      static SINGLE: obbdtCType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtCType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtCType[];
   }
   /**Represents Horse-like creatures which can carry an inventory.*/
   export interface obeChestedHorse extends obeAbstractHorse {
      /**Gets whether the horse has a chest equipped.*/
      isCarryingChest(): boolean;
      /**Sets whether the horse has a chest equipped.*/
      setCarryingChest(chest: boolean): void;
   }
   /**Represents a Chicken.*/
   export interface obeChicken extends obeAnimals {}
   /**Represents a chunk of blocks*/
   export interface obChunk extends obpPersistentDataHolder {
      /**Adds a plugin ticket for this chunk, loading this chunk if it is not  already loaded.*/
      addPluginChunkTicket(plugin: obpPlugin): boolean;
      /**Tests if this chunk contains the specified block.*/
      contains(block: obbdBlockData): boolean;
      /**Gets a block from this chunk*/
      getBlock(x: number, y: number, z: number): obbBlock;
      getChunkKey(): number;
      static getChunkKey(x: number, z: number): number;
      static getChunkKey(loc: obLocation): number;
      /**Capture thread-safe read-only snapshot of chunk data*/
      getChunkSnapshot(): obChunkSnapshot;
      /**Capture thread-safe read-only snapshot of chunk data*/
      getChunkSnapshot(includeMaxblocky: boolean, includeBiome: boolean, includeBiomeTempRain: boolean): obChunkSnapshot;
      /**Get a list of all entities in the chunk.*/
      getEntities(): obeEntity[];
      /**Gets the amount of time in ticks that this chunk has been inhabited.*/
      getInhabitedTime(): number;
      /**Retrieves a collection specifying which plugins have tickets for this  chunk.*/
      getPluginChunkTickets(): juCollection<obpPlugin>;
      /**Get a list of all tile entities in the chunk.*/
      getTileEntities(): obbBlockState[];
      /**Get a list of all tile entities in the chunk.*/
      getTileEntities(useSnapshot: boolean): obbBlockState[];
      /**Get a list of all tile entities that match a given predicate in the chunk.*/
      getTileEntities(blockPredicate: jufPredicate<obbBlock>, useSnapshot: boolean): juCollection<obbBlockState>;
      /**Gets the world containing this chunk*/
      getWorld(): obWorld;
      /**Gets the X-coordinate of this chunk*/
      getX(): number;
      /**Gets the Z-coordinate of this chunk*/
      getZ(): number;
      /**Gets whether the chunk at the specified chunk coordinates is force  loaded.*/
      isForceLoaded(): boolean;
      /**Checks if the chunk is loaded.*/
      isLoaded(): boolean;
      /**Checks if this chunk can spawn slimes without being a swamp biome.*/
      isSlimeChunk(): boolean;
      /**Loads the chunk.*/
      load(): boolean;
      /**Loads the chunk.*/
      load(generate: boolean): boolean;
      /**Removes the specified plugin's ticket for this chunk*/
      removePluginChunkTicket(plugin: obpPlugin): boolean;
      /**Sets whether the chunk at the specified chunk coordinates is force  loaded.*/
      setForceLoaded(forced: boolean): void;
      /**Sets the amount of time in ticks that this chunk has been inhabited.*/
      setInhabitedTime(ticks: number): void;
      /**Unloads and optionally saves the Chunk*/
      unload(): boolean;
      /**Unloads and optionally saves the Chunk*/
      unload(save: boolean): boolean;
   }
   /**Represents a Chunk related event*/
   export class obewChunkEvent extends obewWorldEvent {
      constructor (chunk: obChunk);
      /**Gets the chunk being loaded\/unloaded*/
      getChunk (): obChunk;
   }
   /**A chunk generator is responsible for the initial shaping of an entire  chunk. For example, the nether chunk generator should shape netherrack and  soulsand.   By default only one thread will call  generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)  at a time, although this may not necessarily be the main server thread.   If your generator is capable of fully asynchronous generation, then  isParallelCapable() should be overridden accordingly to allow  multiple concurrent callers.   Some aspects of world generation can be delegated to the Vanilla generator.  The methods shouldGenerateCaves(), shouldGenerateDecorations(),  shouldGenerateMobs() and shouldGenerateStructures() can be  overridden to enable this.*/
   export class obgChunkGenerator extends jlObject {
      constructor ();
      /**Tests if the specified location is valid for a natural spawn position*/
      canSpawn (world: obWorld, x: number, z: number): boolean;
      /**Create a ChunkData for a world.*/
      createChunkData (world: obWorld): obgCChunkData;
      /**Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world*/
      createVanillaChunkData (world: obWorld, x: number, z: number): obgCChunkData;
      /**Shapes the chunk for the given coordinates.*/
      generateChunkData (world: obWorld, random: juRandom, x: number, z: number, biome: obgCBiomeGrid): obgCChunkData;
      /**Gets a list of default BlockPopulators to apply to a given  world*/
      getDefaultPopulators (world: obWorld): juList<obgBlockPopulator>;
      /**Gets a fixed spawn location to use for a given world.*/
      getFixedSpawnLocation (world: obWorld, random: juRandom): obLocation;
      /**Gets if this ChunkGenerator is parallel capable.*/
      isParallelCapable (): boolean;
      /**Gets if the server should generate Vanilla caves after this  ChunkGenerator.*/
      shouldGenerateCaves (): boolean;
      /**Gets if the server should generate Vanilla decorations after this  ChunkGenerator.*/
      shouldGenerateDecorations (): boolean;
      /**Gets if the server should generate Vanilla mobs after this  ChunkGenerator.*/
      shouldGenerateMobs (): boolean;
      /**Gets if the server should generate Vanilla structures after this  ChunkGenerator.*/
      shouldGenerateStructures (): boolean;
   }
   /**Interface to biome section for chunk to be generated: initialized with  default values for world type and seed.    Custom generator is free to access and tailor values during  generateBlockSections() or generateExtBlockSections().*/
   export interface obgCBiomeGrid {
      /**Get biome at x, z within chunk being generated*/
      getBiome(x: number, y: number, z: number): obbBiome;
      /**Set biome at x, z within chunk being generated*/
      setBiome(x: number, y: number, z: number, bio: obbBiome): void;
   }
   /**Data for a Chunk.*/
   export interface obgCChunkData {
      /**Get the type and data of the block at x, y, z.*/
      getBlockData(x: number, y: number, z: number): obbdBlockData;
      /**Get the maximum height for the chunk.*/
      getMaxHeight(): number;
      /**Get the type of the block at x, y, z.*/
      getType(x: number, y: number, z: number): obMaterial;
      /**Get the type and data of the block at x, y, z.*/
      getTypeAndData(x: number, y: number, z: number): obmMaterialData;
      /**Set the block at x,y,z in the chunk data to material.*/
      setBlock(x: number, y: number, z: number, blockData: obbdBlockData): void;
      /**Set the block at x,y,z in the chunk data to material.*/
      setBlock(x: number, y: number, z: number, material: obMaterial): void;
      /**Set the block at x,y,z in the chunk data to material.*/
      setBlock(x: number, y: number, z: number, material: obmMaterialData): void;
      /**Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax,  yMax, zMax (exclusive) to material.*/
      setRegion(
         xMin: number,
         yMin: number,
         zMin: number,
         xMax: number,
         yMax: number,
         zMax: number,
         blockData: obbdBlockData
      ): void;
      /**Set a region of this chunk from xMin, yMin, zMin (inclusive)  to xMax, yMax, zMax (exclusive) to material.*/
      setRegion(
         xMin: number,
         yMin: number,
         zMin: number,
         xMax: number,
         yMax: number,
         zMax: number,
         material: obMaterial
      ): void;
      /**Set a region of this chunk from xMin, yMin, zMin (inclusive)  to xMax, yMax, zMax (exclusive) to material.*/
      setRegion(
         xMin: number,
         yMin: number,
         zMin: number,
         xMax: number,
         yMax: number,
         zMax: number,
         material: obmMaterialData
      ): void;
   }
   /**Called when a chunk is loaded*/
   export class obewChunkLoadEvent extends obewChunkEvent {
      constructor (chunk: obChunk, newChunk: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets if this chunk was newly created or not.*/
      isNewChunk (): boolean;
   }
   /**Thrown when a new chunk has finished being populated.    If your intent is to populate the chunk using this event, please see BlockPopulator*/
   export class obewChunkPopulateEvent extends obewChunkEvent {
      constructor (chunk: obChunk);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents a static, thread-safe snapshot of chunk of blocks.    Purpose is to allow clean, efficient copy of a chunk data to be made, and  then handed off for processing in another thread (e.g. map rendering)*/
   export interface obChunkSnapshot {
      /**Tests if this snapshot contains the specified block.*/
      contains(block: obbdBlockData): boolean;
      /**Get biome at given coordinates*/
      getBiome(x: number, y: number, z: number): obbBiome;
      /**Get block data for block at corresponding coordinate in the chunk*/
      getBlockData(x: number, y: number, z: number): obbdBlockData;
      /**Get light level emitted by block at corresponding coordinate in the  chunk*/
      getBlockEmittedLight(x: number, y: number, z: number): number;
      /**Get sky light level for block at corresponding coordinate in the chunk*/
      getBlockSkyLight(x: number, y: number, z: number): number;
      /**Get block type for block at corresponding coordinate in the chunk*/
      getBlockType(x: number, y: number, z: number): obMaterial;
      /**Get world full time when chunk snapshot was captured*/
      getCaptureFullTime(): number;
      /**Gets the highest non-air coordinate at the given coordinates*/
      getHighestBlockYAt(x: number, z: number): number;
      /**Get raw biome temperature at given coordinates*/
      getRawBiomeTemperature(x: number, y: number, z: number): number;
      /**Gets name of the world containing this chunk*/
      getWorldName(): string;
      /**Gets the X-coordinate of this chunk*/
      getX(): number;
      /**Gets the Z-coordinate of this chunk*/
      getZ(): number;
      /**Test if section is empty*/
      isSectionEmpty(sy: number): boolean;
   }
   /**Called when a chunk is unloaded*/
   export class obewChunkUnloadEvent extends obewChunkEvent {
      constructor (chunk: obChunk);
      constructor (chunk: obChunk, save: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Return whether this chunk will be saved to disk.*/
      isSaveChunk (): boolean;
      /**Set whether this chunk will be saved to disk.*/
      setSaveChunk (saveChunk: boolean): void;
   }
   export interface cdpeeaClassDefiner {
      /**Define a class*/
      defineClass(parentLoader: jlClassLoader, name: string, data: number[]): jlClass<any>;
      static getInstance(): cdpeeaClassDefiner;
      /**Returns if the defined classes can bypass access checks*/
      isBypassAccessChecks(): boolean;
   }
   /**What the client did to trigger this action (not the result).*/
   export class obeiClickType extends jlEnum<obeiClickType> {
      /**Holding Ctrl while pressing the "Drop" key (defaults to Q).*/
      static CONTROL_DROP: obeiClickType;
      /**Any action done with the Creative inventory open.*/
      static CREATIVE: obeiClickType;
      /**Pressing the left mouse button twice in quick succession.*/
      static DOUBLE_CLICK: obeiClickType;
      /**The "Drop" key (defaults to Q).*/
      static DROP: obeiClickType;
      /**The left (or primary) mouse button.*/
      static LEFT: obeiClickType;
      /**The middle mouse button, or a "scrollwheel click".*/
      static MIDDLE: obeiClickType;
      /**One of the number keys 1-9, correspond to slots on the hotbar.*/
      static NUMBER_KEY: obeiClickType;
      /**The right mouse button.*/
      static RIGHT: obeiClickType;
      /**Holding shift while pressing the left mouse button.*/
      static SHIFT_LEFT: obeiClickType;
      /**Holding shift while pressing the right mouse button.*/
      static SHIFT_RIGHT: obeiClickType;
      /**The "swap item with offhand" key (defaults to F).*/
      static SWAP_OFFHAND: obeiClickType;
      /**A type of inventory manipulation not yet recognized by Bukkit.*/
      static UNKNOWN: obeiClickType;
      /**Clicking the left mouse button on the grey area around the inventory.*/
      static WINDOW_BORDER_LEFT: obeiClickType;
      /**Clicking the right mouse button on the grey area around the inventory.*/
      static WINDOW_BORDER_RIGHT: obeiClickType;
      /**Gets whether this ClickType represents an action that can only be  performed by a Player in creative mode.*/
      isCreativeAction (): boolean;
      /**Gets whether this ClickType represents the pressing of a key on a  keyboard.*/
      isKeyboardClick (): boolean;
      /**Gets whether this ClickType represents a left click.*/
      isLeftClick (): boolean;
      /**Gets whether this ClickType represents a right click.*/
      isRightClick (): boolean;
      /**Gets whether this ClickType indicates that the shift key was pressed  down when the click was made.*/
      isShiftClick (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiClickType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiClickType[];
   }
   export class cdpClientOption<T> extends jlObject {
      getType (): jlClass<T>;
   }
   export class cdpCChatVisibility extends jlEnum<cdpCChatVisibility> {
      static FULL: cdpCChatVisibility;
      static HIDDEN: cdpCChatVisibility;
      static SYSTEM: cdpCChatVisibility;
      static UNKNOWN: cdpCChatVisibility;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpCChatVisibility;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpCChatVisibility[];
   }
   /**Represents the two types of coal*/
   export class obCoalType extends jlEnum<obCoalType> {
      static CHARCOAL: obCoalType;
      static COAL: obCoalType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obCoalType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obCoalType[];
   }
   export interface obbdtCocoa extends obbdAgeable, obbdDirectional {}
   export class obmCCocoaPlantSize extends jlEnum<obmCCocoaPlantSize> {
      static LARGE: obmCCocoaPlantSize;
      static MEDIUM: obmCCocoaPlantSize;
      static SMALL: obmCCocoaPlantSize;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obmCCocoaPlantSize;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obmCCocoaPlantSize[];
   }
   /**Represents a cod fish.*/
   export interface obeCod extends obeFish {}
   /**A container for a color palette. This class is immutable; the set methods  return a new color. The color names listed as fields are HTML4 standards,  but subject to change.*/
   export class obColor extends jlObject implements obcsConfigurationSerializable {
      /**Gets the color as an BGR integer.*/
      asBGR (): number;
      /**Gets the color as an RGB integer.*/
      asRGB (): number;
      static deserialize (map: juMap<string, jlObject>): obColor;
      equals (o: jlObject): boolean;
      /**Creates a new color object from an integer that contains the blue,  green, and red bytes in the lowest order 24 bits.*/
      static fromBGR (bgr: number): obColor;
      /**Creates a new Color object from a blue, green, and red*/
      static fromBGR (blue: number, green: number, red: number): obColor;
      /**Creates a new color object from an integer that contains the red,  green, and blue bytes in the lowest order 24 bits.*/
      static fromRGB (rgb: number): obColor;
      /**Creates a new Color object from a red, green, and blue*/
      static fromRGB (red: number, green: number, blue: number): obColor;
      /**Gets the blue component*/
      getBlue (): number;
      /**Gets the green component*/
      getGreen (): number;
      /**Gets the red component*/
      getRed (): number;
      hashCode (): number;
      /**Creates a new color with its RGB components changed as if it was dyed  with the colors passed in, replicating vanilla workbench dyeing*/
      mixColors (...colors: obColor[]): obColor;
      /**Creates a new color with its RGB components changed as if it was dyed  with the colors passed in, replicating vanilla workbench dyeing*/
      mixDyes (...colors: obDyeColor[]): obColor;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      /**Creates a new Color object with specified component*/
      setBlue (blue: number): obColor;
      /**Creates a new Color object with specified component*/
      setGreen (green: number): obColor;
      /**Creates a new Color object with specified component*/
      setRed (red: number): obColor;
      toString (): string;
   }
   /**An object that can be colored.*/
   export interface obmColorable {
      /**Gets the color of this object.*/
      getColor(): obDyeColor;
      /**Sets the color of this object to the specified DyeColor.*/
      setColor(color: obDyeColor): void;
   }
   /**Represents a Command, which executes various tasks upon user input*/
   export class obcCommand extends jlObject {
      constructor (name: string);
      constructor (name: string, description: string, usageMessage: string, aliases: juList<string>);
      static broadcastCommandMessage (source: obcCommandSender, message: string): void;
      static broadcastCommandMessage (source: obcCommandSender, message: string, sendToSource: boolean): void;
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, commandLabel: string, args: string[]): boolean;
      /**Returns a list of active aliases of this command*/
      getAliases (): juList<string>;
      /**Gets a brief description of this command*/
      getDescription (): string;
      /**Returns the label for this command*/
      getLabel (): string;
      /**Returns the name of this command*/
      getName (): string;
      /**Gets the permission required by users to be able to perform this  command*/
      getPermission (): string;
      /**Returns a message to be displayed on a failed permission check for this  command*/
      getPermissionMessage (): string;
      getTimingName (): string;
      /**Gets an example usage of this command*/
      getUsage (): string;
      /**Returns the current registered state of this command*/
      isRegistered (): boolean;
      /**Registers this command to a CommandMap.*/
      register (commandMap: obcCommandMap): boolean;
      /**Sets the list of aliases to request on registration for this command.*/
      setAliases (aliases: juList<string>): obcCommand;
      /**Sets a brief description of this command.*/
      setDescription (description: string): obcCommand;
      /**Sets the label of this command.*/
      setLabel (name: string): boolean;
      /**Sets the name of this command.*/
      setName (name: string): boolean;
      /**Sets the permission required by users to be able to perform this  command*/
      setPermission (permission: string): void;
      /**Sets the message sent when a permission check fails*/
      setPermissionMessage (permissionMessage: string): obcCommand;
      /**Sets the example usage of this command*/
      setUsage (usage: string): obcCommand;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[], location: obLocation): juList<string>;
      /**Tests the given CommandSender to see if they can perform this  command.*/
      testPermission (target: obcCommandSender): boolean;
      /**Tests the given CommandSender to see if they can perform this  command.*/
      testPermissionSilent (target: obcCommandSender): boolean;
      toString (): string;
      /**Unregisters this command from the passed CommandMap applying any  outstanding changes*/
      unregister (commandMap: obcCommandMap): boolean;
   }
   /**Represents a captured state of a command block.*/
   export interface obbCommandBlock extends obbTileState {
      /**Gets the command that this CommandBlock will run when powered.*/
      getCommand(): string;
      /**Gets the name of this CommandBlock.*/
      getName(): string;
      /**Sets the command that this CommandBlock will run when powered.*/
      setCommand(command: string): void;
      /**Sets the name of this CommandBlock.*/
      setName(name: string): void;
   }
   /**'conditional' denotes whether this command block is conditional or not, i.e.  will only execute if the preceeding command block also executed successfully.*/
   export interface obbdtCommandBlock extends obbdDirectional {
      /**Gets the value of the 'conditional' property.*/
      isConditional(): boolean;
      /**Sets the value of the 'conditional' property.*/
      setConditional(conditional: boolean): void;
   }
   /**Thrown when an unhandled exception occurs during the execution of a Command*/
   export class obcCommandException extends jlRuntimeException {
      constructor ();
      constructor (msg: string);
      constructor (msg: string, cause: jlThrowable);
   }
   /**Represents a class which contains a single method for executing commands*/
   export interface obcCommandExecutor {
      /**Executes the given command, returning its success.*/
      onCommand(sender: obcCommandSender, command: obcCommand, label: string, args: string[]): boolean;
   }
   export interface obcCommandMap {
      /**Clears all registered commands.*/
      clearCommands(): void;
      /**Looks for the requested command and executes it if found.*/
      dispatch(sender: obcCommandSender, cmdLine: string): boolean;
      /**Gets the command registered to the specified name*/
      getCommand(name: string): obcCommand;
      /**Return a Map of known commands*/
      getKnownCommands(): juMap<string, obcCommand>;
      /**Registers a command.*/
      register(label: string, fallbackPrefix: string, command: obcCommand): boolean;
      /**Registers a command.*/
      register(fallbackPrefix: string, command: obcCommand): boolean;
      /**Registers all the commands belonging to a certain plugin.*/
      registerAll(fallbackPrefix: string, commands: juList<obcCommand>): void;
      /**Looks for the requested command and executes an appropriate  tab-completer if found.*/
      tabComplete(sender: obcCommandSender, cmdLine: string): juList<string>;
      /**Looks for the requested command and executes an appropriate  tab-completer if found.*/
      tabComplete(sender: obcCommandSender, cmdLine: string, location: obLocation): juList<string>;
   }
   export interface obemCommandMinecart extends obeMinecart {
      /**Gets the command that this CommandMinecart will run when activated.*/
      getCommand(): string;
      /**Sets the command that this CommandMinecart will run when activated.*/
      setCommand(command: string): void;
      /**Sets the name of this CommandMinecart.*/
      setName(name: string): void;
   }
   export class obupCommandPermissions extends jlObject {
      static registerPermissions (parent: obpPermission): obpPermission;
   }
   export interface obcCommandSender extends obpPermissible {
      /**Gets the name of this command sender*/
      getName(): string;
      /**Returns the server instance that this command is running on*/
      getServer(): obServer;
      /**Sends this sender a message*/
      sendMessage(message: string): void;
      /**Sends this sender multiple messages*/
      sendMessage(messages: string[]): void;
      /**Sends this sender a message*/
      sendMessage(sender: juUUID, message: string): void;
      /**Sends this sender multiple messages*/
      sendMessage(sender: juUUID, messages: string[]): void;
      /**Sends the component to the sender*/
      sendMessage(component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the sender*/
      sendMessage(...components: nmbacBaseComponent[]): void;
      spigot(): obcCSpigot;
   }
   export class obcCSpigot extends jlObject {
      constructor ();
      /**Sends this sender a chat component.*/
      sendMessage (sender: juUUID, component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the sender.*/
      sendMessage (sender: juUUID, ...components: nmbacBaseComponent[]): void;
      /**Sends this sender a chat component.*/
      sendMessage (component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the sender.*/
      sendMessage (...components: nmbacBaseComponent[]): void;
   }
   /**Represents a captured state of an on \/ off comparator.*/
   export interface obbComparator extends obbTileState {}
   /**'mode' indicates what mode this comparator will operate in.*/
   export interface obbdtComparator extends obbdDirectional, obbdPowerable {
      /**Gets the value of the 'mode' property.*/
      getMode(): obbdtCMode;
      /**Sets the value of the 'mode' property.*/
      setMode(mode: obbdtCMode): void;
   }
   /**The mode in which a comparator will operate in.*/
   export class obbdtCMode extends jlEnum<obbdtCMode> {
      /**The default mode, similar to a transistor.*/
      static COMPARE: obbdtCMode;
      /**Alternate subtraction mode.*/
      static SUBTRACT: obbdtCMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtCMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtCMode[];
   }
   /**Represents a compass that can track a specific location.*/
   export interface obimCompassMeta extends obimItemMeta {
      clone(): obimCompassMeta;
      /**Gets the location that this compass will point to.*/
      getLodestone(): obLocation;
      /**Checks if this compass has been paired to a lodestone.*/
      hasLodestone(): boolean;
      /**Gets if this compass is tracking a specific lodestone.*/
      isLodestoneTracked(): boolean;
      /**Sets the location this lodestone compass will point to.*/
      setLodestone(lodestone: obLocation): void;
      /**Sets if this compass is tracking a specific lodestone.*/
      setLodestoneTracked(tracked: boolean): void;
   }
   /**Represents a single part of a ComplexLivingEntity*/
   export interface obeComplexEntityPart extends obeEntity {
      /**Gets the parent ComplexLivingEntity of this part.*/
      getParent(): obeComplexLivingEntity;
   }
   /**Represents a complex living entity - one that is made up of various smaller  parts*/
   export interface obeComplexLivingEntity extends obeLivingEntity {
      /**Gets a list of parts that belong to this complex entity*/
      getParts(): juSet<obeComplexEntityPart>;
   }
   /**Represents a complex recipe which has imperative server-defined behavior, eg  armor dyeing.   Note: Since a complex recipe has dynamic outputs, Recipe.getResult() will  sometimes return an AIR ItemStack.*/
   export interface obiComplexRecipe extends obiRecipe, obKeyed {}
   /**Represents a captured state of a conduit.*/
   export interface obbConduit extends obbTileState {}
   /**Represents a source of configurable options and settings*/
   export interface obcConfiguration extends obcConfigurationSection {
      /**Sets the default value of the given path as provided.*/
      addDefault(path: string, value: jlObject): void;
      /**Sets the default values of the given paths as provided.*/
      addDefaults(defaults: juMap<string, jlObject>): void;
      /**Sets the default values of the given paths as provided.*/
      addDefaults(defaults: obcConfiguration): void;
      /**Gets the source Configuration for this configuration.*/
      getDefaults(): obcConfiguration;
      /**Gets the ConfigurationOptions for this Configuration.*/
      options(): obcConfigurationOptions;
      /**Sets the source of all default values for this Configuration.*/
      setDefaults(defaults: obcConfiguration): void;
   }
   /**Various settings for controlling the input and output of a Configuration*/
   export class obcConfigurationOptions extends jlObject {
      constructor (configuration: obcConfiguration);
      /**Returns the Configuration that this object is responsible for.*/
      configuration (): obcConfiguration;
      /**Checks if the Configuration should copy values from its default  Configuration directly.*/
      copyDefaults (): boolean;
      /**Sets if the Configuration should copy values from its default  Configuration directly.*/
      copyDefaults (value: boolean): obcConfigurationOptions;
      /**Gets the char that will be used to separate ConfigurationSections*/
      pathSeparator (): string;
      /**Sets the char that will be used to separate ConfigurationSections*/
      pathSeparator (value: string): obcConfigurationOptions;
   }
   /**Represents a section of a Configuration*/
   export interface obcConfigurationSection {
      /**Sets the default value in the root at the given path as provided.*/
      addDefault(path: string, value: jlObject): void;
      /**Checks if this ConfigurationSection contains the given path.*/
      contains(path: string): boolean;
      /**Checks if this ConfigurationSection contains the given path.*/
      contains(path: string, ignoreDefault: boolean): boolean;
      /**Creates an empty ConfigurationSection at the specified path.*/
      createSection(path: string): obcConfigurationSection;
      /**Creates a ConfigurationSection at the specified path, with  specified values.*/
      createSection(path: string, map: juMap<any, any>): obcConfigurationSection;
      /**Gets the requested Object by path.*/
      get(path: string): jlObject;
      /**Gets the requested Object by path, returning a default value if not  found.*/
      get(path: string, def: jlObject): jlObject;
      /**Gets the requested boolean by path.*/
      getBoolean(path: string): boolean;
      /**Gets the requested boolean by path, returning a default value if not  found.*/
      getBoolean(path: string, def: boolean): boolean;
      /**Gets the requested List of Boolean by path.*/
      getBooleanList(path: string): juList<boolean>;
      /**Gets the requested List of Byte by path.*/
      getByteList(path: string): juList<jlByte>;
      /**Gets the requested List of Character by path.*/
      getCharacterList(path: string): juList<jlCharacter>;
      /**Gets the requested Color by path.*/
      getColor(path: string): obColor;
      /**Gets the requested Color by path, returning a default value if  not found.*/
      getColor(path: string, def: obColor): obColor;
      /**Gets the requested ConfigurationSection by path.*/
      getConfigurationSection(path: string): obcConfigurationSection;
      /**Gets the path of this ConfigurationSection from its root Configuration*/
      getCurrentPath(): string;
      /**Gets the equivalent ConfigurationSection from the default  Configuration defined in getRoot().*/
      getDefaultSection(): obcConfigurationSection;
      /**Gets the requested double by path.*/
      getDouble(path: string): number;
      /**Gets the requested double by path, returning a default value if not  found.*/
      getDouble(path: string, def: number): number;
      /**Gets the requested List of Double by path.*/
      getDoubleList(path: string): juList<number>;
      /**Gets the requested List of Float by path.*/
      getFloatList(path: string): juList<jlFloat>;
      /**Gets the requested int by path.*/
      getInt(path: string): number;
      /**Gets the requested int by path, returning a default value if not found.*/
      getInt(path: string, def: number): number;
      /**Gets the requested List of Integer by path.*/
      getIntegerList(path: string): juList<jlInteger>;
      /**Gets the requested ItemStack by path.*/
      getItemStack(path: string): obiItemStack;
      /**Gets the requested ItemStack by path, returning a default value  if not found.*/
      getItemStack(path: string, def: obiItemStack): obiItemStack;
      /**Gets a set containing all keys in this section.*/
      getKeys(deep: boolean): juSet<string>;
      /**Gets the requested List by path.*/
      getList(path: string): juList<any>;
      /**Gets the requested List by path, returning a default value if not  found.*/
      getList(path: string, def: juList<any>): juList<any>;
      /**Gets the requested Location by path.*/
      getLocation(path: string): obLocation;
      /**Gets the requested Location by path, returning a default value if  not found.*/
      getLocation(path: string, def: obLocation): obLocation;
      /**Gets the requested long by path.*/
      getLong(path: string): number;
      /**Gets the requested long by path, returning a default value if not  found.*/
      getLong(path: string, def: number): number;
      /**Gets the requested List of Long by path.*/
      getLongList(path: string): juList<jlLong>;
      /**Gets the requested List of Maps by path.*/
      getMapList(path: string): juList<juMap<any, any>>;
      /**Gets the name of this individual ConfigurationSection, in the  path.*/
      getName(): string;
      /**Gets the requested object at the given path.*/
      getObject<T>(path: string, clazz: jlClass<T>): T;
      /**Gets the requested object at the given path, returning a default value if  not found   If the Object does not exist then the specified default value will  returned regardless of if a default has been identified in the root  Configuration.*/
      getObject<T>(path: string, clazz: jlClass<T>, def: T): T;
      /**Gets the requested OfflinePlayer by path.*/
      getOfflinePlayer(path: string): obOfflinePlayer;
      /**Gets the requested OfflinePlayer by path, returning a default  value if not found.*/
      getOfflinePlayer(path: string, def: obOfflinePlayer): obOfflinePlayer;
      /**Gets the parent ConfigurationSection that directly contains  this ConfigurationSection.*/
      getParent(): obcConfigurationSection;
      /**Gets the root Configuration that contains this ConfigurationSection*/
      getRoot(): obcConfiguration;
      /**Gets the requested ConfigurationSerializable object at the given  path.*/
      getSerializable<T extends obcsConfigurationSerializable>(path: string, clazz: jlClass<T>): T;
      /**Gets the requested ConfigurationSerializable object at the given  path, returning a default value if not found   If the Object does not exist then the specified default value will  returned regardless of if a default has been identified in the root  Configuration.*/
      getSerializable<T extends obcsConfigurationSerializable>(path: string, clazz: jlClass<T>, def: T): T;
      /**Gets the requested List of Short by path.*/
      getShortList(path: string): juList<jlShort>;
      /**Gets the requested String by path.*/
      getString(path: string): string;
      /**Gets the requested String by path, returning a default value if not  found.*/
      getString(path: string, def: string): string;
      /**Gets the requested List of String by path.*/
      getStringList(path: string): juList<string>;
      /**Gets a Map containing all keys and their values for this section.*/
      getValues(deep: boolean): juMap<string, jlObject>;
      /**Gets the requested Vector by path.*/
      getVector(path: string): obuVector;
      /**Gets the requested Vector by path, returning a default value if  not found.*/
      getVector(path: string, def: obuVector): obuVector;
      /**Checks if the specified path is a boolean.*/
      isBoolean(path: string): boolean;
      /**Checks if the specified path is a Color.*/
      isColor(path: string): boolean;
      /**Checks if the specified path is a ConfigurationSection.*/
      isConfigurationSection(path: string): boolean;
      /**Checks if the specified path is a double.*/
      isDouble(path: string): boolean;
      /**Checks if the specified path is an int.*/
      isInt(path: string): boolean;
      /**Checks if the specified path is an ItemStack.*/
      isItemStack(path: string): boolean;
      /**Checks if the specified path is a List.*/
      isList(path: string): boolean;
      /**Checks if the specified path is a Location.*/
      isLocation(path: string): boolean;
      /**Checks if the specified path is a long.*/
      isLong(path: string): boolean;
      /**Checks if the specified path is an OfflinePlayer.*/
      isOfflinePlayer(path: string): boolean;
      /**Checks if this ConfigurationSection has a value set for the  given path.*/
      isSet(path: string): boolean;
      /**Checks if the specified path is a String.*/
      isString(path: string): boolean;
      /**Checks if the specified path is a Vector.*/
      isVector(path: string): boolean;
      /**Sets the specified path to the given value.*/
      set(path: string, value: jlObject): void;
   }
   /**Represents an object that may be serialized.    These objects MUST implement one of the following, in addition to the  methods as defined by this interface:    A static method "deserialize" that accepts a single Map<  String, Object> and returns the class.  A static method "valueOf" that accepts a single Map<String, Object> and returns the class.  A constructor that accepts a single Map<String,  Object>.    In addition to implementing this interface, you must register the class  with ConfigurationSerialization.registerClass(Class).*/
   export interface obcsConfigurationSerializable {
      /**Creates a Map representation of this class.*/
      serialize(): juMap<string, jlObject>;
   }
   /**Utility class for storing and retrieving classes for Configuration.*/
   export class obcsConfigurationSerialization extends jlObject {
      constructor (clazz: jlClass<obcsConfigurationSerializable>);
      deserialize (args: juMap<string, any>): obcsConfigurationSerializable;
      /**Attempts to deserialize the given arguments into a new instance of the  given class.*/
      static deserializeObject (args: juMap<string, any>): obcsConfigurationSerializable;
      /**Attempts to deserialize the given arguments into a new instance of the  given class.*/
      static deserializeObject (
         args: juMap<string, any>,
         clazz: jlClass<obcsConfigurationSerializable>
      ): obcsConfigurationSerializable;
      deserializeViaCtor (
         ctor: jlrConstructor<obcsConfigurationSerializable>,
         args: juMap<string, any>
      ): obcsConfigurationSerializable;
      deserializeViaMethod (method: jlrMethod, args: juMap<string, any>): obcsConfigurationSerializable;
      /**Gets the correct alias for the given ConfigurationSerializable  class*/
      static getAlias (clazz: jlClass<obcsConfigurationSerializable>): string;
      /**Attempts to get a registered ConfigurationSerializable class by  its alias*/
      static getClassByAlias (alias: string): jlClass<obcsConfigurationSerializable>;
      getConstructor (): jlrConstructor<obcsConfigurationSerializable>;
      getMethod (name: string, isStatic: boolean): jlrMethod;
      /**Registers the given ConfigurationSerializable class by its  alias*/
      static registerClass (clazz: jlClass<obcsConfigurationSerializable>): void;
      /**Registers the given alias to the specified ConfigurationSerializable class*/
      static registerClass (clazz: jlClass<obcsConfigurationSerializable>, alias: string): void;
      /**Unregisters any aliases for the specified ConfigurationSerializable class*/
      static unregisterClass (clazz: jlClass<obcsConfigurationSerializable>): void;
      /**Unregisters the specified alias to a ConfigurationSerializable*/
      static unregisterClass (alias: string): void;
   }
   export interface obcConsoleCommandSender extends obcCommandSender, obcConversable {}
   /**Represents an operation that accepts a single input argument and returns no  result.*/
   export interface obuConsumer<T> {
      /**Performs this operation on the given argument.*/
      accept(t: T): void;
   }
   /**Represents a captured state of a container block.*/
   export interface obbContainer extends obbTileState, obiBlockInventoryHolder, obbLockable, obNameable {
      /**Gets the inventory of the block represented by this block state.*/
      getInventory(): obiInventory;
      /**Gets the captured inventory snapshot of this container.*/
      getSnapshotInventory(): obiInventory;
   }
   /**The Conversable interface is used to indicate objects that can have  conversations.*/
   export interface obcConversable {
      /**Abandons an active conversation.*/
      abandonConversation(conversation: obcConversation): void;
      /**Abandons an active conversation.*/
      abandonConversation(conversation: obcConversation, details: obcConversationAbandonedEvent): void;
      /**Accepts input into the active conversation.*/
      acceptConversationInput(input: string): void;
      /**Enters into a dialog with a Conversation object.*/
      beginConversation(conversation: obcConversation): boolean;
      /**Tests to see of a Conversable object is actively engaged in a  conversation.*/
      isConversing(): boolean;
      /**Sends this sender a message raw*/
      sendRawMessage(message: string): void;
      /**Sends this sender a message raw*/
      sendRawMessage(sender: juUUID, message: string): void;
   }
   /**The Conversation class is responsible for tracking the current state of a  conversation, displaying prompts to the user, and dispatching the user's  response to the appropriate place. Conversation objects are not typically  instantiated directly. Instead a ConversationFactory is used to  construct identical conversations on demand.    Conversation flow consists of a directed graph of Prompt objects.  Each time a prompt gets input from the user, it must return the next prompt  in the graph. Since each Prompt chooses the next Prompt, complex  conversation trees can be implemented where the nature of the player's  response directs the flow of the conversation.    Each conversation has a ConversationPrefix that prepends all output  from the conversation to the player. The ConversationPrefix can be used to  display the plugin name or conversation status as the conversation evolves.    Each conversation has a timeout measured in the number of inactive seconds  to wait before abandoning the conversation. If the inactivity timeout is  reached, the conversation is abandoned and the user's incoming and outgoing  chat is returned to normal.    You should not construct a conversation manually. Instead, use the ConversationFactory for access to all available options.*/
   export class obcConversation extends jlObject {
      constructor (plugin: obpPlugin, forWhom: obcConversable, firstPrompt: obcPrompt);
      constructor (
         plugin: obpPlugin,
         forWhom: obcConversable,
         firstPrompt: obcPrompt,
         initialSessionData: juMap<jlObject, jlObject>
      );
      /**Abandons and resets the current conversation.*/
      abandon (): void;
      /**Abandons and resets the current conversation.*/
      abandon (details: obcConversationAbandonedEvent): void;
      /**Passes player input into the current prompt.*/
      acceptInput (input: string): void;
      /**Adds a ConversationAbandonedListener.*/
      addConversationAbandonedListener (listener: obcConversationAbandonedListener): void;
      /**Displays the first prompt of this conversation and begins redirecting  the user's chat responses.*/
      begin (): void;
      /**Gets the list of ConversationCancellers*/
      getCancellers (): juList<obcConversationCanceller>;
      /**Returns the Conversation's ConversationContext.*/
      getContext (): obcConversationContext;
      /**Gets the entity for whom this conversation is mediating.*/
      getForWhom (): obcConversable;
      /**Gets the ConversationPrefix that prepends all output from this  conversation.*/
      getPrefix (): obcConversationPrefix;
      /**Returns Returns the current state of the conversation.*/
      getState (): obcCConversationState;
      /**Gets the status of local echo for this conversation.*/
      isLocalEchoEnabled (): boolean;
      /**Gets the modality of this conversation.*/
      isModal (): boolean;
      /**Displays the next user prompt and abandons the conversation if the next  prompt is null.*/
      outputNextPrompt (): void;
      /**Removes a ConversationAbandonedListener.*/
      removeConversationAbandonedListener (listener: obcConversationAbandonedListener): void;
      /**Sets the status of local echo for this conversation.*/
      setLocalEchoEnabled (localEchoEnabled: boolean): void;
   }
   export class obcCConversationState extends jlEnum<obcCConversationState> {
      static ABANDONED: obcCConversationState;
      static STARTED: obcCConversationState;
      static UNSTARTED: obcCConversationState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obcCConversationState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obcCConversationState[];
   }
   /**ConversationAbandonedEvent contains information about an abandoned  conversation.*/
   export class obcConversationAbandonedEvent extends juEventObject {
      constructor (conversation: obcConversation);
      constructor (conversation: obcConversation, canceller: obcConversationCanceller);
      /**Gets the object that caused the conversation to be abandoned.*/
      getCanceller (): obcConversationCanceller;
      /**Gets the abandoned conversation's conversation context.*/
      getContext (): obcConversationContext;
      /**Indicates how the conversation was abandoned - naturally as part of the  prompt chain or prematurely via a ConversationCanceller.*/
      gracefulExit (): boolean;
   }
   export interface obcConversationAbandonedListener extends juEventListener {
      /**Called whenever a Conversation is abandoned.*/
      conversationAbandoned(abandonedEvent: obcConversationAbandonedEvent): void;
   }
   /**A ConversationCanceller is a class that cancels an active Conversation. A Conversation can have more than one ConversationCanceller.*/
   export interface obcConversationCanceller extends jlCloneable {
      /**Cancels a conversation based on user input.*/
      cancelBasedOnInput(context: obcConversationContext, input: string): boolean;
      /**Allows the ConversationFactory to duplicate this  ConversationCanceller when creating a new Conversation.*/
      clone(): obcConversationCanceller;
      /**Sets the conversation this ConversationCanceller can optionally cancel.*/
      setConversation(conversation: obcConversation): void;
   }
   /**A ConversationContext provides continuity between nodes in the prompt graph  by giving the developer access to the subject of the conversation and a  generic map for storing values that are shared between all Prompt  invocations.*/
   export class obcConversationContext extends jlObject {
      constructor (plugin: obpPlugin, forWhom: obcConversable, initialSessionData: juMap<jlObject, jlObject>);
      /**Gets the underlying sessionData map.*/
      getAllSessionData (): juMap<jlObject, jlObject>;
      /**Gets the subject of the conversation.*/
      getForWhom (): obcConversable;
      /**Gets the plugin that owns this conversation.*/
      getPlugin (): obpPlugin;
      /**Gets session data shared between all Prompt invocations.*/
      getSessionData (key: jlObject): jlObject;
      /**Sets session data shared between all Prompt invocations.*/
      setSessionData (key: jlObject, value: jlObject): void;
   }
   /**A ConversationFactory is responsible for creating a Conversation  from a predefined template. A ConversationFactory is typically created when  a plugin is instantiated and builds a Conversation each time a user  initiates a conversation with the plugin. Each Conversation maintains its  own state and calls back as needed into the plugin.    The ConversationFactory implements a fluid API, allowing parameters to be  set as an extension to the constructor.*/
   export class obcConversationFactory extends jlObject {
      constructor (plugin: obpPlugin);
      /**Adds a ConversationAbandonedListener to all conversations  constructed by this factory.*/
      addConversationAbandonedListener (listener: obcConversationAbandonedListener): obcConversationFactory;
      /**Constructs a Conversation in accordance with the defaults set  for this factory.*/
      buildConversation (forWhom: obcConversable): obcConversation;
      /**Prevents this factory from creating a conversation for non-player  Conversable objects.*/
      thatExcludesNonPlayersWithMessage (playerOnlyMessage: string): obcConversationFactory;
      /**Adds a ConversationCanceller to constructed conversations.*/
      withConversationCanceller (canceller: obcConversationCanceller): obcConversationFactory;
      /**Sets the player input that, when received, will immediately terminate  the conversation.*/
      withEscapeSequence (escapeSequence: string): obcConversationFactory;
      /**Sets the first prompt to use in all generated conversations.*/
      withFirstPrompt (firstPrompt: obcPrompt): obcConversationFactory;
      /**Sets any initial data with which to populate the conversation context  sessionData map.*/
      withInitialSessionData (initialSessionData: juMap<jlObject, jlObject>): obcConversationFactory;
      /**Sets the local echo status for all Conversations created by  this factory.*/
      withLocalEcho (localEchoEnabled: boolean): obcConversationFactory;
      /**Sets the modality of all Conversations created by this factory.*/
      withModality (modal: boolean): obcConversationFactory;
      /**Sets the ConversationPrefix that prepends all output from all  generated conversations.*/
      withPrefix (prefix: obcConversationPrefix): obcConversationFactory;
      /**Sets the number of inactive seconds to wait before automatically  abandoning all generated conversations.*/
      withTimeout (timeoutSeconds: number): obcConversationFactory;
   }
   /**A ConversationPrefix implementation prepends all output from the  conversation to the player. The ConversationPrefix can be used to display  the plugin name or conversation status as the conversation evolves.*/
   export interface obcConversationPrefix {
      /**Gets the prefix to use before each message to the player.*/
      getPrefix(context: obcConversationContext): string;
   }
   /**Represents a cooking recipe.*/
   export class obiCookingRecipe<T extends CookingRecipe> extends jlObject implements obiRecipe, obKeyed {
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         input: obiRecipeChoice,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         experience: number,
         cookingTime: number
      );
      /**Get the cooking time for this recipe in ticks.*/
      getCookingTime (): number;
      /**Get the experience given by this recipe.*/
      getExperience (): number;
      /**Get the group of this recipe.*/
      getGroup (): string;
      /**Get the input material.*/
      getInput (): obiItemStack;
      /**Get the input choice.*/
      getInputChoice (): obiRecipeChoice;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the result of this recipe.*/
      getResult (): obiItemStack;
      /**Set the cooking time for this recipe in ticks.*/
      setCookingTime (cookingTime: number): void;
      /**Sets the experience given by this recipe.*/
      setExperience (experience: number): void;
      /**Set the group of this recipe.*/
      setGroup (group: string): void;
      /**Sets the input of this cooking recipe.*/
      setInput (input: obMaterial): obiCookingRecipe;
      /**Sets the input of this cooking recipe.*/
      setInputChoice (input: obiRecipeChoice): T;
   }
   export interface obbdtCoralWallFan extends obbdDirectional, obbdWaterlogged {}
   export class cauCounter<T> extends cgccForwardingMap<T, jlLong> {
      constructor ();
      decrement (key: T): number;
      decrement (key: T, amount: number): number;
      delegate (): juMap<T, jlLong>;
      getCount (key: T): number;
      increment (key: T): number;
      increment (key: T, amount: number): number;
   }
   /**Represents a Cow.*/
   export interface obeCow extends obeAnimals {}
   /**Interface to the crafting inventories*/
   export interface obiCraftingInventory extends obiInventory {
      /**Get the contents of the crafting matrix.*/
      getMatrix(): obiItemStack[];
      /**Get the current recipe formed on the crafting inventory, if any.*/
      getRecipe(): obiRecipe;
      /**Check what item is in the result slot of this crafting inventory.*/
      getResult(): obiItemStack;
      /**Replace the contents of the crafting matrix*/
      setMatrix(contents: obiItemStack[]): void;
      /**Set the item in the result slot of the crafting inventory.*/
      setResult(newResult: obiItemStack): void;
   }
   /**Called when the recipe of an Item is completed inside a crafting matrix.*/
   export class obeiCraftItemEvent extends obeiInventoryClickEvent {
      constructor (
         recipe: obiRecipe,
         what: obiInventoryView,
         type: obeiISlotType,
         slot: number,
         click: obeiClickType,
         action: obeiInventoryAction
      );
      constructor (
         recipe: obiRecipe,
         what: obiInventoryView,
         type: obeiISlotType,
         slot: number,
         click: obeiClickType,
         action: obeiInventoryAction,
         key: number
      );
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiCraftingInventory;
      getRecipe (): obiRecipe;
   }
   /**Represents a Creature. Creatures are non-intelligent monsters or animals  which have very simple abilities.*/
   export interface obeCreature extends obeMob {}
   /**Represents a captured state of a creature spawner.*/
   export interface obbCreatureSpawner extends obbTileState {
      /**Get the spawner's delay.*/
      getDelay(): number;
      /**Set the new maximum amount of similar entities that are allowed to be  within spawning range of this spawner.*/
      getMaxNearbyEntities(): number;
      /**The maximum spawn delay amount (in ticks).*/
      getMaxSpawnDelay(): number;
      /**The minimum spawn delay amount (in ticks).*/
      getMinSpawnDelay(): number;
      /**Get the maximum distance(squared) a player can be in order for this  spawner to be active.*/
      getRequiredPlayerRange(): number;
      /**Get how many mobs attempt to spawn.*/
      getSpawnCount(): number;
      /**Get the spawner's creature type.*/
      getSpawnedType(): obeEntityType;
      /**Get the radius around which the spawner will attempt to spawn mobs in.*/
      getSpawnRange(): number;
      /**Check if spawner is activated (a player is close enough)*/
      isActivated(): boolean;
      /**Resets the spawn delay timer within the min\/max range*/
      resetTimer(): void;
      /**Set the spawner's delay.*/
      setDelay(delay: number): void;
      /**Set the maximum number of similar entities that are allowed to be within  spawning range of this spawner.*/
      setMaxNearbyEntities(maxNearbyEntities: number): void;
      /**Set the maximum spawn delay amount (in ticks).*/
      setMaxSpawnDelay(delay: number): void;
      /**Set the minimum spawn delay amount (in ticks).*/
      setMinSpawnDelay(delay: number): void;
      /**Set the maximum distance (squared) a player can be in order for this  spawner to be active.*/
      setRequiredPlayerRange(requiredPlayerRange: number): void;
      /**Set how many mobs attempt to spawn.*/
      setSpawnCount(spawnCount: number): void;
      /**Sets the EntityType to EntityType.DROPPED_ITEM and sets the data to the given  ItemStack.*/
      setSpawnedItem(itemStack: obiItemStack): void;
      /**Set the spawner's creature type.*/
      setSpawnedType(creatureType: obeEntityType): void;
      /**Set the new spawn range.*/
      setSpawnRange(spawnRange: number): void;
   }
   /**Called when a creature is spawned into a world.    If a Creature Spawn event is cancelled, the creature will not spawn.*/
   export class obeeCreatureSpawnEvent extends obeeEntitySpawnEvent {
      constructor (spawnee: obeLivingEntity, spawnReason: obeeCSpawnReason);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      /**Gets the reason for why the creature is being spawned.*/
      getSpawnReason (): obeeCSpawnReason;
   }
   /**An enum to specify the type of spawning*/
   export class obeeCSpawnReason extends jlEnum<obeeCSpawnReason> {
      /**When a bee is released from a beehive\/bee nest*/
      static BEEHIVE: obeeCSpawnReason;
      /**When an animal breeds to create a child*/
      static BREEDING: obeeCSpawnReason;
      /**When an iron golem is spawned by being built*/
      static BUILD_IRONGOLEM: obeeCSpawnReason;
      /**When a snowman is spawned by being built*/
      static BUILD_SNOWMAN: obeeCSpawnReason;
      /**When a wither boss is spawned by being built*/
      static BUILD_WITHER: obeeCSpawnReason;
      /**When a villager is cured from infection*/
      static CURED: obeeCSpawnReason;
      /**When a creature is spawned by plugins*/
      static CUSTOM: obeeCSpawnReason;
      /**When an entity is missing a SpawnReason*/
      static DEFAULT: obeeCSpawnReason;
      /**When a creature is spawned by a dispenser dispensing an egg*/
      static DISPENSE_EGG: obeeCSpawnReason;
      /**When a creature is spawned by another entity drowning*/
      static DROWNED: obeeCSpawnReason;
      /**When a creature spawns from an egg*/
      static EGG: obeeCSpawnReason;
      /**When an entity is spawned as a result of ender pearl usage*/
      static ENDER_PEARL: obeeCSpawnReason;
      /**When eg an effect cloud is spawned as a result of a creeper exploding*/
      static EXPLOSION: obeeCSpawnReason;
      /**When a zombie infects a villager*/
      static INFECTION: obeeCSpawnReason;
      /**When an entity spawns as a jockey of another entity (mostly spider  jockeys)*/
      static JOCKEY: obeeCSpawnReason;
      /**When a creature spawns because of a lightning strike*/
      static LIGHTNING: obeeCSpawnReason;
      /**When an entity spawns as a mount of another entity (mostly chicken  jockeys)*/
      static MOUNT: obeeCSpawnReason;
      /**When something spawns from natural means*/
      static NATURAL: obeeCSpawnReason;
      /**When a creature is spawned by nether portal*/
      static NETHER_PORTAL: obeeCSpawnReason;
      /**When an ocelot has a baby spawned along with them*/
      static OCELOT_BABY: obeeCSpawnReason;
      /**When an entity is spawned as part of a patrol*/
      static PATROL: obeeCSpawnReason;
      /**When an entity is spawned as part of a raid*/
      static RAID: obeeCSpawnReason;
      /**When an entity calls for reinforcements*/
      static REINFORCEMENTS: obeeCSpawnReason;
      /**When an cow is spawned by shearing a mushroom cow*/
      static SHEARED: obeeCSpawnReason;
      /**When an entity is spawned as a result of the entity it is being  perched on jumping or being damaged*/
      static SHOULDER_ENTITY: obeeCSpawnReason;
      /**When a silverfish spawns from a block*/
      static SILVERFISH_BLOCK: obeeCSpawnReason;
      /**When a slime splits*/
      static SLIME_SPLIT: obeeCSpawnReason;
      /**When a creature spawns from a spawner*/
      static SPAWNER: obeeCSpawnReason;
      /**When a creature spawns from a Spawner Egg*/
      static SPAWNER_EGG: obeeCSpawnReason;
      /**When an entity spawns as a trap for players approaching*/
      static TRAP: obeeCSpawnReason;
      /**When an iron golem is spawned to defend a village*/
      static VILLAGE_DEFENSE: obeeCSpawnReason;
      /**When a zombie is spawned to invade a village*/
      static VILLAGE_INVASION: obeeCSpawnReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeCSpawnReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeCSpawnReason[];
   }
   /**Represents a Creeper*/
   export interface obeCreeper extends obeMonster {
      /**Makes this Creeper explode instantly.*/
      explode(): void;
      /**Get the explosion radius in which this Creeper's explosion will affect.*/
      getExplosionRadius(): number;
      /**Get the number of ticks this creeper has been ignited (armed to explode)*/
      getFuseTicks(): number;
      /**Get the maximum fuse ticks for this Creeper, where the maximum ticks  is the amount of time in which a creeper is allowed to be in the  primed state before exploding.*/
      getMaxFuseTicks(): number;
      /**Ignites this Creeper, beginning its fuse.*/
      ignite(): void;
      /**Check if creeper is ignited or not (armed to explode)*/
      isIgnited(): boolean;
      /**Checks if this Creeper is powered (Electrocuted)*/
      isPowered(): boolean;
      /**Set the explosion radius in which this Creeper's explosion will affect.*/
      setExplosionRadius(radius: number): void;
      /**Set whether creeper is ignited or not (armed to explode)*/
      setIgnited(ignited: boolean): void;
      /**Set the maximum fuse ticks for this Creeper, where the maximum ticks  is the amount of time in which a creeper is allowed to be in the  primed state before exploding.*/
      setMaxFuseTicks(ticks: number): void;
      /**Sets the Powered status of this Creeper*/
      setPowered(value: boolean): void;
   }
   /**Called when a Creeper is ignite flag is changed (armed\/disarmed to explode).*/
   export class cdpeeCreeperIgniteEvent extends obeeEntityEvent implements obeCancellable {
      constructor (creeper: obeCreeper, ignited: boolean);
      /**Returns the Entity involved in this event*/
      getEntity (): obeCreeper;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isIgnited (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      setIgnited (ignited: boolean): void;
   }
   /**Called when a Creeper is struck by lightning.    If a Creeper Power event is cancelled, the Creeper will not be powered.*/
   export class obeeCreeperPowerEvent extends obeeEntityEvent implements obeCancellable {
      constructor (creeper: obeCreeper, bolt: obeLightningStrike, cause: obeeCPowerCause);
      constructor (creeper: obeCreeper, cause: obeeCPowerCause);
      /**Gets the cause of the creeper being (un)powered.*/
      getCause (): obeeCPowerCause;
      /**Returns the Entity involved in this event*/
      getEntity (): obeCreeper;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the lightning bolt which is striking the Creeper.*/
      getLightning (): obeLightningStrike;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An enum to specify the cause of the change in power*/
   export class obeeCPowerCause extends jlEnum<obeeCPowerCause> {
      /**Power change caused by a lightning bolt*/
      static LIGHTNING: obeeCPowerCause;
      /**Power change caused by something else (probably a plugin)*/
      static SET_OFF: obeeCPowerCause;
      /**Power change caused by something else (probably a plugin)*/
      static SET_ON: obeeCPowerCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeCPowerCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeCPowerCause[];
   }
   /**Criteria names which trigger an objective to be modified by actions in-game*/
   export class obsCriterias extends jlObject {}
   /**Represents the different growth states of crops*/
   export class obCropState extends jlEnum<obCropState> {
      /**First growth stage*/
      static GERMINATED: obCropState;
      /**Fourth growth stage*/
      static MEDIUM: obCropState;
      /**Ripe stage*/
      static RIPE: obCropState;
      /**State when first seeded*/
      static SEEDED: obCropState;
      /**Third growth stage*/
      static SMALL: obCropState;
      /**Fifth growth stage*/
      static TALL: obCropState;
      /**Second growth stage*/
      static VERY_SMALL: obCropState;
      /**Almost ripe stage*/
      static VERY_TALL: obCropState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obCropState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obCropState[];
   }
   export interface obimCrossbowMeta extends obimItemMeta {
      /**Adds a charged projectile to this item.*/
      addChargedProjectile(item: obiItemStack): void;
      /**Returns an immutable list of the projectiles charged on this item.*/
      getChargedProjectiles(): juList<obiItemStack>;
      /**Returns whether the item has any charged projectiles.*/
      hasChargedProjectiles(): boolean;
      /**Sets the projectiles charged on this item.*/
      setChargedProjectiles(projectiles: juList<obiItemStack>): void;
   }
   /**Represents an Entity that has health and can take damage.*/
   export interface obeDamageable extends obeEntity {
      /**Deals the given amount of damage to this entity.*/
      damage(amount: number): void;
      /**Deals the given amount of damage to this entity, from a specified  entity.*/
      damage(amount: number, source: obeEntity): void;
      /**Gets the entity's absorption amount.*/
      getAbsorptionAmount(): number;
      /**Gets the entity's health from 0 to getMaxHealth(), where 0 is dead.*/
      getHealth(): number;
      /**Sets the entity's absorption amount.*/
      setAbsorptionAmount(amount: number): void;
      /**Sets the entity's health from 0 to getMaxHealth(), where 0 is  dead.*/
      setHealth(health: number): void;
   }
   /**Represents an item that has durability and can take damage.*/
   export interface obimDamageable {
      clone(): obimDamageable;
      /**Gets the damage*/
      getDamage(): number;
      /**Checks to see if this item has damage*/
      hasDamage(): boolean;
      /**Sets the damage*/
      setDamage(damage: number): void;
   }
   /**'inverted' denotes whether this daylight detector is in the inverted mode,  i.e. activates in the absence of light rather than presence."*/
   export interface obbdtDaylightDetector extends obbdAnaloguePowerable {
      /**Gets the value of the 'inverted' property.*/
      isInverted(): boolean;
      /**Sets the value of the 'inverted' property.*/
      setInverted(inverted: boolean): void;
   }
   /**Represents a captured state of a (possibly inverted) daylight detector.*/
   export interface obbDaylightDetector extends obbTileState {}
   export class obupDefaultPermissions extends jlObject {
      static registerCorePermissions (): void;
      static registerPermission (name: string, desc: string): obpPermission;
      static registerPermission (name: string, desc: string, parent: obpPermission): obpPermission;
      static registerPermission (name: string, desc: string, def: obpPermissionDefault): obpPermission;
      static registerPermission (
         name: string,
         desc: string,
         def: obpPermissionDefault,
         children: juMap<string, boolean>
      ): obpPermission;
      static registerPermission (
         name: string,
         desc: string,
         def: obpPermissionDefault,
         children: juMap<string, boolean>,
         parent: obpPermission
      ): obpPermission;
      static registerPermission (
         name: string,
         desc: string,
         def: obpPermissionDefault,
         parent: obpPermission
      ): obpPermission;
      static registerPermission (perm: obpPermission): obpPermission;
      static registerPermission (perm: obpPermission, withLegacy: boolean): obpPermission;
      static registerPermission (perm: obpPermission, parent: obpPermission): obpPermission;
   }
   /**Represents the various difficulty levels that are available.*/
   export class obDifficulty extends jlEnum<obDifficulty> {
      /**Hostile mobs spawn, enemies deal less damage than on normal difficulty,  the hunger bar does deplete and starving deals up to 5 hearts of  damage.*/
      static EASY: obDifficulty;
      /**Hostile mobs spawn, enemies deal greater damage than on normal  difficulty, the hunger bar does deplete and starving can kill players.*/
      static HARD: obDifficulty;
      /**Hostile mobs spawn, enemies deal normal amounts of damage, the hunger  bar does deplete and starving deals up to 9.5 hearts of damage.*/
      static NORMAL: obDifficulty;
      /**Players regain health over time, hostile mobs don't spawn, the hunger  bar does not deplete.*/
      static PEACEFUL: obDifficulty;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obDifficulty;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obDifficulty[];
   }
   /**'facing' represents the face towards which the block is pointing.    Some blocks may not be able to face in all directions, use  getFaces() to get all possible directions for this block.*/
   export interface obbdDirectional extends obbdBlockData {
      /**Gets the faces which are applicable to this block.*/
      getFaces(): juSet<obbBlockFace>;
      /**Gets the value of the 'facing' property.*/
      getFacing(): obbBlockFace;
      /**Sets the value of the 'facing' property.*/
      setFacing(facing: obbBlockFace): void;
   }
   export interface obmDirectional {
      /**Gets the direction this block is facing*/
      getFacing(): obbBlockFace;
      /**Sets the direction that this block is facing in*/
      setFacingDirection(face: obbBlockFace): void;
   }
   /**Similar to Powerable, 'triggered' indicates whether or not the  dispenser is currently activated.*/
   export interface obbdtDispenser extends obbdDirectional {
      /**Gets the value of the 'triggered' property.*/
      isTriggered(): boolean;
      /**Sets the value of the 'triggered' property.*/
      setTriggered(triggered: boolean): void;
   }
   /**Represents a captured state of a dispenser.*/
   export interface obbDispenser extends obbContainer, obNameable, cdplLootableBlockInventory {
      /**Attempts to dispense the contents of the dispenser.*/
      dispense(): boolean;
      /**Gets the BlockProjectileSource object for the dispenser.*/
      getBlockProjectileSource(): obpBlockProjectileSource;
   }
   /**Locations for displaying objectives to the player*/
   export class obsDisplaySlot extends jlEnum<obsDisplaySlot> {
      static BELOW_NAME: obsDisplaySlot;
      static PLAYER_LIST: obsDisplaySlot;
      static SIDEBAR: obsDisplaySlot;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obsDisplaySlot;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obsDisplaySlot[];
   }
   export interface obeDolphin extends obeWaterMob {}
   /**Represents a Donkey - variant of ChestedHorse.*/
   export interface obeDonkey extends obeChestedHorse {}
   /**'hinge' indicates which hinge this door is attached to and will rotate around  when opened.*/
   export interface obbdtDoor extends obbdBisected, obbdDirectional, obbdOpenable, obbdPowerable {
      /**Gets the value of the 'hinge' property.*/
      getHinge(): obbdtDHinge;
      /**Sets the value of the 'hinge' property.*/
      setHinge(hinge: obbdtDHinge): void;
   }
   /**The hinge of a door.*/
   export class obbdtDHinge extends jlEnum<obbdtDHinge> {
      /**Door is attached to the left side.*/
      static LEFT: obbdtDHinge;
      /**Door is attached to the right side.*/
      static RIGHT: obbdtDHinge;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtDHinge;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtDHinge[];
   }
   /**Represents a double chest.*/
   export class obbDoubleChest extends jlObject implements obiInventoryHolder {
      constructor (chest: obiDoubleChestInventory);
      /**Get the object's inventory.*/
      getInventory (): obiInventory;
      getLeftSide (): obiInventoryHolder;
      getLeftSide (useSnapshot: boolean): obiInventoryHolder;
      getLocation (): obLocation;
      getRightSide (): obiInventoryHolder;
      getRightSide (useSnapshot: boolean): obiInventoryHolder;
      getWorld (): obWorld;
      getX (): number;
      getY (): number;
      getZ (): number;
   }
   /**Interface to the inventory of a Double Chest.*/
   export interface obiDoubleChestInventory extends obiInventory {
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obbDoubleChest;
      /**Get the left half of this double chest.*/
      getLeftSide(): obiInventory;
      /**Get the right side of this double chest.*/
      getRightSide(): obiInventory;
   }
   /**Represents a dragon battle state for a world with an end environment.*/
   export interface obbDragonBattle {
      /**Generate the end portal.*/
      generateEndPortal(withPortals: boolean): boolean;
      /**Get the boss bar to be displayed for this dragon battle.*/
      getBossBar(): obbBossBar;
      /**Get the EnderDragon active in this battle.*/
      getEnderDragon(): obeEnderDragon;
      /**Get the location of the end portal.*/
      getEndPortalLocation(): obLocation;
      /**Get this battle's current respawn phase.*/
      getRespawnPhase(): obbDRespawnPhase;
      /**Check whether or not the first dragon has been killed already.*/
      hasBeenPreviouslyKilled(): boolean;
      /**Initiate a respawn sequence to summon the dragon as though a player has  placed 4 end crystals on the portal.*/
      initiateRespawn(): void;
      /**Reset the crystals located on the obsidian pillars (remove their beam  targets and invulnerability).*/
      resetCrystals(): void;
      /**Set the dragon's respawn phase.*/
      setRespawnPhase(phase: obbDRespawnPhase): boolean;
   }
   /**Represents a phase in the dragon respawn process.*/
   export class obbDRespawnPhase extends jlEnum<obbDRespawnPhase> {
      /**The end of the respawn sequence.*/
      static END: obbDRespawnPhase;
      /**No respawn is in progress.*/
      static NONE: obbDRespawnPhase;
      /**The crystal beams remain directed upwards.*/
      static PREPARING_TO_SUMMON_PILLARS: obbDRespawnPhase;
      /**The crystal beams are directed upwards into the sky.*/
      static START: obbDRespawnPhase;
      /**All crystals (including those from the pillars) are aimed towards the  sky.*/
      static SUMMONING_DRAGON: obbDRespawnPhase;
      /**The crystal beams are directed from pillar to pillar, regenerating  their crystals if necessary.*/
      static SUMMONING_PILLARS: obbDRespawnPhase;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbDRespawnPhase;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbDRespawnPhase[];
   }
   export interface obeDragonFireball extends obeFireball {}
   /**Represents the effect of a drag that will be applied to an Inventory in an  InventoryDragEvent.*/
   export class obeiDragType extends jlEnum<obeiDragType> {
      /**The cursor is split evenly across all selected slots, not to exceed the  Material's max stack size, with the remainder going to the cursor.*/
      static EVEN: obeiDragType;
      /**One item from the cursor is placed in each selected slot.*/
      static SINGLE: obeiDragType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiDragType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiDragType[];
   }
   /**Represents a captured state of a dropper.*/
   export interface obbDropper extends obbContainer, cdplLootableBlockInventory {
      /**Tries to drop a randomly selected item from the dropper's inventory,  following the normal behavior of a dropper.*/
      drop(): void;
   }
   /**Drowned zombie.*/
   export interface obeDrowned extends obeZombie, cdpeRangedEntity {}
   /**All supported color values for dyes and cloth*/
   export class obDyeColor extends jlEnum<obDyeColor> {
      /**Represents black dye.*/
      static BLACK: obDyeColor;
      /**Represents blue dye.*/
      static BLUE: obDyeColor;
      /**Represents brown dye.*/
      static BROWN: obDyeColor;
      /**Represents cyan dye.*/
      static CYAN: obDyeColor;
      /**Represents gray dye.*/
      static GRAY: obDyeColor;
      /**Represents green dye.*/
      static GREEN: obDyeColor;
      /**Represents light blue dye.*/
      static LIGHT_BLUE: obDyeColor;
      /**Represents light gray dye.*/
      static LIGHT_GRAY: obDyeColor;
      /**Represents lime dye.*/
      static LIME: obDyeColor;
      /**Represents magenta dye.*/
      static MAGENTA: obDyeColor;
      /**Represents orange dye.*/
      static ORANGE: obDyeColor;
      /**Represents pink dye.*/
      static PINK: obDyeColor;
      /**Represents purple dye.*/
      static PURPLE: obDyeColor;
      /**Represents red dye.*/
      static RED: obDyeColor;
      /**Represents white dye.*/
      static WHITE: obDyeColor;
      /**Represents yellow dye.*/
      static YELLOW: obDyeColor;
      /**Gets the DyeColor with the given color value.*/
      static getByColor (color: obColor): obDyeColor;
      /**Gets the DyeColor with the given firework color value.*/
      static getByFireworkColor (color: obColor): obDyeColor;
      /**Gets the color that this dye represents.*/
      getColor (): obColor;
      /**Gets the firework color that this dye represents.*/
      getFireworkColor (): obColor;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obDyeColor;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obDyeColor[];
   }
   /**A list of effects that the server is able to send to players.*/
   export class obEffect extends jlEnum<obEffect> {
      /**The sound played when an anvil breaks*/
      static ANVIL_BREAK: obEffect;
      /**The sound played when an anvil lands after  falling*/
      static ANVIL_LAND: obEffect;
      /**The sound played when an anvil is used*/
      static ANVIL_USE: obEffect;
      /**Sound played by a bat taking off*/
      static BAT_TAKEOFF: obEffect;
      /**Sound of blaze firing.*/
      static BLAZE_SHOOT: obEffect;
      /**Sound of a bow firing.*/
      static BOW_FIRE: obEffect;
      /**The sound played by brewing stands when brewing*/
      static BREWING_STAND_BREW: obEffect;
      /**The sound played when a chorus flower dies*/
      static CHORUS_FLOWER_DEATH: obEffect;
      /**The sound played when a chorus flower grows*/
      static CHORUS_FLOWER_GROW: obEffect;
      /**A click sound.*/
      static CLICK1: obEffect;
      /**An alternate click sound.*/
      static CLICK2: obEffect;
      /**Sound of a door closing.*/
      static DOOR_CLOSE: obEffect;
      /**Sound of a door opening.*/
      static DOOR_TOGGLE: obEffect;
      /**The sound\/particles used by the enderdragon's breath  attack.*/
      static DRAGON_BREATH: obEffect;
      /**The sound\/particles caused by a end gateway spawning*/
      static END_GATEWAY_SPAWN: obEffect;
      /**An ender eye signal; a visual effect.*/
      static ENDER_SIGNAL: obEffect;
      /**The sound of an enderdragon growling*/
      static ENDERDRAGON_GROWL: obEffect;
      /**Sound of an enderdragon firing*/
      static ENDERDRAGON_SHOOT: obEffect;
      /**The sound played when launching an endereye*/
      static ENDEREYE_LAUNCH: obEffect;
      /**Sound of fire being extinguished.*/
      static EXTINGUISH: obEffect;
      /**Sound of a door closing.*/
      static FENCE_GATE_CLOSE: obEffect;
      /**Sound of a door opening.*/
      static FENCE_GATE_TOGGLE: obEffect;
      /**The sound played when launching a firework*/
      static FIREWORK_SHOOT: obEffect;
      /**Sound of ghast firing.*/
      static GHAST_SHOOT: obEffect;
      /**Sound of ghast shrieking.*/
      static GHAST_SHRIEK: obEffect;
      /**Visual effect of an instant splash potion breaking.*/
      static INSTANT_POTION_BREAK: obEffect;
      /**Sound of a door closing.*/
      static IRON_DOOR_CLOSE: obEffect;
      /**Sound of a door opening.*/
      static IRON_DOOR_TOGGLE: obEffect;
      /**Sound of a door closing.*/
      static IRON_TRAPDOOR_CLOSE: obEffect;
      /**Sound of a door opening.*/
      static IRON_TRAPDOOR_TOGGLE: obEffect;
      /**The flames seen on a mobspawner; a visual effect.*/
      static MOBSPAWNER_FLAMES: obEffect;
      /**The sound played when traveling through a portal*/
      static PORTAL_TRAVEL: obEffect;
      /**Visual effect of a splash potion breaking.*/
      static POTION_BREAK: obEffect;
      /**A song from a record.*/
      static RECORD_PLAY: obEffect;
      /**A visual smoke effect.*/
      static SMOKE: obEffect;
      /**Sound of a block breaking.*/
      static STEP_SOUND: obEffect;
      /**Sound of a trapdoor closing.*/
      static TRAPDOOR_CLOSE: obEffect;
      /**Sound of a trapdoor opening.*/
      static TRAPDOOR_TOGGLE: obEffect;
      /**Particles displayed when a villager grows a plant, data  is the number of particles*/
      static VILLAGER_PLANT_GROW: obEffect;
      /**The sound played when a wither breaks a block*/
      static WITHER_BREAK_BLOCK: obEffect;
      /**Sound of a wither shooting*/
      static WITHER_SHOOT: obEffect;
      /**Sound of zombies chewing on iron doors.*/
      static ZOMBIE_CHEW_IRON_DOOR: obEffect;
      /**Sound of zombies chewing on wooden doors.*/
      static ZOMBIE_CHEW_WOODEN_DOOR: obEffect;
      /**The sound played when a villager is converted by  a zombie*/
      static ZOMBIE_CONVERTED_VILLAGER: obEffect;
      /**Sound of zombies destroying a door.*/
      static ZOMBIE_DESTROY_DOOR: obEffect;
      /**The sound played when a zombie infects a target*/
      static ZOMBIE_INFECT: obEffect;
      getData (): jlClass<any>;
      getType (): obEType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obEffect;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obEffect[];
   }
   /**Represents the type of an effect.*/
   export class obEType extends jlEnum<obEType> {
      static SOUND: obEType;
      static VISUAL: obEType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obEType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obEType[];
   }
   /**Represents a thrown egg.*/
   export interface obeEgg extends obeThrowableProjectile {}
   /**Represents an ElderGuardian - variant of Guardian.*/
   export interface obeElderGuardian extends obeGuardian {}
   /**Interface to the inventory of an Enchantment Table.*/
   export interface obiEnchantingInventory extends obiInventory {
      /**Get the item being enchanted.*/
      getItem(): obiItemStack;
      /**Get the secondary item being used for the enchant.*/
      getSecondary(): obiItemStack;
      /**Set the item being enchanted.*/
      setItem(item: obiItemStack): void;
      /**Set the secondary item being used for the enchant.*/
      setSecondary(item: obiItemStack): void;
   }
   /**Represents a captured state of an enchanting table.*/
   export interface obbEnchantingTable extends obbTileState, obNameable {}
   /**Called when an ItemStack is successfully enchanted (currently at  enchantment table)*/
   export class obeeEnchantItemEvent extends obeiInventoryEvent implements obeCancellable {
      constructor (
         enchanter: obePlayer,
         view: obiInventoryView,
         table: obbBlock,
         item: obiItemStack,
         level: number,
         enchants: juMap<obeEnchantment, jlInteger>,
         i: number
      );
      /**Gets the block being used to enchant the item*/
      getEnchantBlock (): obbBlock;
      /**Gets the player enchanting the item*/
      getEnchanter (): obePlayer;
      /**Get map of enchantment (levels, keyed by type) to be added to item  (modify map returned to change values).*/
      getEnchantsToAdd (): juMap<obeEnchantment, jlInteger>;
      /**Gets the cost (minimum level) which is displayed as a number on the right  hand side of the enchantment offer.*/
      getExpLevelCost (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item to be enchanted (can be modified)*/
      getItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the cost (minimum level) which is displayed as a number on the right  hand side of the enchantment offer.*/
      setExpLevelCost (level: number): void;
      /**Which button was pressed to initiate the enchanting.*/
      whichButton (): number;
   }
   /**The various type of enchantments that may be added to armour or weapons*/
   export class obeEnchantment extends jlObject implements obKeyed {
      constructor (key: obNamespacedKey);
      /**Checks if this Enchantment may be applied to the given ItemStack.*/
      canEnchantItem (item: obiItemStack): boolean;
      /**Check if this enchantment conflicts with another enchantment.*/
      conflictsWith (other: obeEnchantment): boolean;
      equals (obj: jlObject): boolean;
      /**Gets the Enchantment at the specified key*/
      static getByKey (key: obNamespacedKey): obeEnchantment;
      /**Gets the type of ItemStack that may fit this Enchantment.*/
      getItemTarget (): obeEnchantmentTarget;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Gets the maximum level that this Enchantment may become.*/
      getMaxLevel (): number;
      /**Gets the level that this Enchantment should start at*/
      getStartLevel (): number;
      hashCode (): number;
      /**Checks if this is accepting Enchantment registrations.*/
      static isAcceptingRegistrations (): boolean;
      /**Checks if this enchantment is a treasure enchantment.*/
      isTreasure (): boolean;
      /**Registers an enchantment with the given ID and object.*/
      static registerEnchantment (enchantment: obeEnchantment): void;
      /**Stops accepting any enchantment registrations*/
      static stopAcceptingRegistrations (): void;
      toString (): string;
      /**Gets an array of all the registered Enchantments*/
      static values (): obeEnchantment[];
   }
   /**A class for the available enchantment offers in the enchantment table.*/
   export class obeEnchantmentOffer extends jlObject {
      constructor (enchantment: obeEnchantment, enchantmentLevel: number, cost: number);
      /**Gets the cost (minimum level) which is displayed as a number on the right  hand side of the enchantment offer.*/
      getCost (): number;
      /**Get the type of the enchantment.*/
      getEnchantment (): obeEnchantment;
      /**Gets the level of the enchantment.*/
      getEnchantmentLevel (): number;
      /**Sets the cost (minimum level) which is displayed as a number on the right  hand side of the enchantment offer.*/
      setCost (cost: number): void;
      /**Sets the type of the enchantment.*/
      setEnchantment (enchantment: obeEnchantment): void;
      /**Sets the level of the enchantment.*/
      setEnchantmentLevel (enchantmentLevel: number): void;
   }
   /**EnchantmentMeta is specific to items that can store enchantments, as  opposed to being enchanted. Material.ENCHANTED_BOOK is an example  of an item with enchantment storage.*/
   export interface obimEnchantmentStorageMeta extends obimItemMeta {
      /**Stores the specified enchantment in this item meta.*/
      addStoredEnchant(ench: obeEnchantment, level: number, ignoreLevelRestriction: boolean): boolean;
      clone(): obimEnchantmentStorageMeta;
      /**Checks for the level of the stored enchantment.*/
      getStoredEnchantLevel(ench: obeEnchantment): number;
      /**Gets a copy the stored enchantments in this ItemMeta.*/
      getStoredEnchants(): juMap<obeEnchantment, jlInteger>;
      /**Checks if the specified enchantment conflicts with any enchantments in  this ItemMeta.*/
      hasConflictingStoredEnchant(ench: obeEnchantment): boolean;
      /**Checks for storage of the specified enchantment.*/
      hasStoredEnchant(ench: obeEnchantment): boolean;
      /**Checks for the existence of any stored enchantments.*/
      hasStoredEnchants(): boolean;
      /**Remove the specified stored enchantment from this item meta.*/
      removeStoredEnchant(ench: obeEnchantment): boolean;
   }
   /**Represents the applicable target for a Enchantment*/
   export class obeEnchantmentTarget extends jlEnum<obeEnchantmentTarget> {
      /**Allows the Enchantment to be placed on armor*/
      static ARMOR: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on feet slot armor*/
      static ARMOR_FEET: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on head slot armor*/
      static ARMOR_HEAD: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on leg slot armor*/
      static ARMOR_LEGS: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on torso slot armor*/
      static ARMOR_TORSO: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on bows.*/
      static BOW: obeEnchantmentTarget;
      /**Allows the enchantment to be placed on items with durability.*/
      static BREAKABLE: obeEnchantmentTarget;
      /**Allow the Enchantment to be placed on crossbows.*/
      static CROSSBOW: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on fishing rods.*/
      static FISHING_ROD: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on tools (spades, pickaxe, axes)*/
      static TOOL: obeEnchantmentTarget;
      /**Allow the Enchantment to be placed on tridents.*/
      static TRIDENT: obeEnchantmentTarget;
      /**Allow the Enchantment to be placed on vanishing items.*/
      static VANISHABLE: obeEnchantmentTarget;
      /**Allows the Enchantment to be placed on weapons (swords)*/
      static WEAPON: obeEnchantmentTarget;
      /**Allows the enchantment to be placed on wearable items.*/
      static WEARABLE: obeEnchantmentTarget;
      /**Check whether this target includes the specified item.*/
      includes (item: obiItemStack): boolean;
      /**Check whether this target includes the specified item.*/
      includes (item: obMaterial): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEnchantmentTarget;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEnchantmentTarget[];
   }
   /**A simple wrapper for ease of selecting Enchantments*/
   export class obeEnchantmentWrapper extends obeEnchantment {
      constructor (name: string);
      /**Checks if this Enchantment may be applied to the given ItemStack.*/
      canEnchantItem (item: obiItemStack): boolean;
      /**Check if this enchantment conflicts with another enchantment.*/
      conflictsWith (other: obeEnchantment): boolean;
      /**Gets the enchantment bound to this wrapper*/
      getEnchantment (): obeEnchantment;
      /**Gets the type of ItemStack that may fit this Enchantment.*/
      getItemTarget (): obeEnchantmentTarget;
      /**Gets the maximum level that this Enchantment may become.*/
      getMaxLevel (): number;
      /**Gets the unique name of this enchantment*/
      getName (): string;
      /**Gets the level that this Enchantment should start at*/
      getStartLevel (): number;
      /**Checks if this enchantment is a cursed enchantment    Cursed enchantments are found the same way treasure enchantments are*/
      isCursed (): boolean;
      /**Checks if this enchantment is a treasure enchantment.*/
      isTreasure (): boolean;
   }
   export interface obbdtEnderChest extends obbdDirectional, obbdWaterlogged {}
   /**Represents a captured state of an ender chest.*/
   export interface obbEnderChest extends obbTileState {}
   /**A crystal that heals nearby EnderDragons*/
   export interface obeEnderCrystal extends obeEntity {
      /**Gets the location that this end crystal is pointing its beam to.*/
      getBeamTarget(): obLocation;
      /**Return whether or not this end crystal is showing the  bedrock slate underneath it.*/
      isShowingBottom(): boolean;
      /**Sets the location that this end crystal is pointing to.*/
      setBeamTarget(location: obLocation): void;
      /**Sets whether or not this end crystal is showing the  bedrock slate underneath it.*/
      setShowingBottom(showing: boolean): void;
   }
   /**Represents an Ender Dragon*/
   export interface obeEnderDragon extends obeComplexLivingEntity, obeBoss, obeMob {
      /**Get the current time in ticks relative to the start of this dragon's  death animation.*/
      getDeathAnimationTicks(): number;
      /**Get the DragonBattle associated with this EnderDragon.*/
      getDragonBattle(): obbDragonBattle;
      /**Gets the current phase that the dragon is performing.*/
      getPhase(): obeEPhase;
      /**Sets the next phase for the dragon to perform.*/
      setPhase(phase: obeEPhase): void;
   }
   /**Represents a phase or action that an Ender Dragon can perform.*/
   export class obeEPhase extends jlEnum<obeEPhase> {
      /**The dragon will attack with dragon breath at its current location.*/
      static BREATH_ATTACK: obeEPhase;
      /**The dragon will charge a player.*/
      static CHARGE_PLAYER: obeEPhase;
      /**The dragon will circle outside the ring of pillars if ender  crystals remain or inside the ring if not.*/
      static CIRCLING: obeEPhase;
      /**The dragon will fly to the vicinity of the portal and die.*/
      static DYING: obeEPhase;
      /**The dragon will fly towards the empty portal (approaching  from the other side, if applicable).*/
      static FLY_TO_PORTAL: obeEPhase;
      /**The dragon will hover at its current location, not performing any actions.*/
      static HOVER: obeEPhase;
      /**The dragon will land on on the portal.*/
      static LAND_ON_PORTAL: obeEPhase;
      /**The dragon will leave the portal.*/
      static LEAVE_PORTAL: obeEPhase;
      /**The dragon will roar before performing a breath attack.*/
      static ROAR_BEFORE_ATTACK: obeEPhase;
      /**The dragon will search for a player to attack with dragon breath.*/
      static SEARCH_FOR_BREATH_ATTACK_TARGET: obeEPhase;
      /**The dragon will fly towards a targeted player and shoot a  fireball when within 64 blocks.*/
      static STRAFING: obeEPhase;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEPhase;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEPhase[];
   }
   /**Called when an EnderDragon switches controller phase.*/
   export class obeeEnderDragonChangePhaseEvent extends obeeEntityEvent implements obeCancellable {
      constructor (enderDragon: obeEnderDragon, currentPhase: obeEPhase, newPhase: obeEPhase);
      /**Gets the current phase that the dragon is in.*/
      getCurrentPhase (): obeEPhase;
      /**Returns the Entity involved in this event*/
      getEntity (): obeEnderDragon;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new phase that the dragon will switch to.*/
      getNewPhase (): obeEPhase;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the new phase for the ender dragon.*/
      setNewPhase (newPhase: obeEPhase): void;
   }
   /**Fired when a DragonFireball collides with a block\/entity and spawns an AreaEffectCloud*/
   export class cdpeeEnderDragonFireballHitEvent extends obeeEntityEvent implements obeCancellable {
      constructor (
         fireball: obeDragonFireball,
         targets: juCollection<obeLivingEntity>,
         areaEffectCloud: obeAreaEffectCloud
      );
      getAreaEffectCloud (): obeAreaEffectCloud;
      /**The fireball involved in this event*/
      getEntity (): obeDragonFireball;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**The living entities hit by fireball   May be null if no entities were hit*/
      getTargets (): juCollection<obeLivingEntity>;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Fired when an EnderDragon spawns an AreaEffectCloud by shooting flames*/
   export class cdpeeEnderDragonFlameEvent extends obeeEntityEvent implements obeCancellable {
      constructor (enderDragon: obeEnderDragon, areaEffectCloud: obeAreaEffectCloud);
      getAreaEffectCloud (): obeAreaEffectCloud;
      /**The enderdragon involved in this event*/
      getEntity (): obeEnderDragon;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents an ender dragon part*/
   export interface obeEnderDragonPart extends obeComplexEntityPart, obeDamageable {
      /**Gets the parent ComplexLivingEntity of this part.*/
      getParent(): obeEnderDragon;
   }
   /**Fired when an EnderDragon shoots a fireball*/
   export class cdpeeEnderDragonShootFireballEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEnderDragon, fireball: obeDragonFireball);
      /**The enderdragon shooting the fireball*/
      getEntity (): obeEnderDragon;
      getFireball (): obeDragonFireball;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents an Enderman.*/
   export interface obeEnderman extends obeMonster {
      /**Gets the data of the block that the Enderman is carrying.*/
      getCarriedBlock(): obbdBlockData;
      /**Gets the id and data of the block that the Enderman is carrying.*/
      getCarriedMaterial(): obmMaterialData;
      /**Sets the data of the block that the Enderman is carrying.*/
      setCarriedBlock(blockData: obbdBlockData): void;
      /**Sets the id and data of the block that the Enderman is carrying.*/
      setCarriedMaterial(material: obmMaterialData): void;
      /**Try to teleport the enderman to a random nearby location.*/
      teleportRandomly(): boolean;
   }
   /**Fired when an Enderman determines if it should attack a player or not.  Starts off cancelled if the player is wearing a pumpkin head or is not looking  at the Enderman, according to Vanilla rules.*/
   export class cdpeeEndermanAttackPlayerEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEnderman, player: obePlayer);
      /**The enderman considering attacking*/
      getEntity (): obeEnderman;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**The player the Enderman is considering attacking*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Cancels if the Enderman will attack this player*/
      setCancelled (cancel: boolean): void;
   }
   export class cdpeeEndermanEscapeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEnderman, reason: cdpeeEReason);
      /**Returns the Entity involved in this event*/
      getEntity (): obeEnderman;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getReason (): cdpeeEReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Cancels the escape.*/
      setCancelled (cancel: boolean): void;
   }
   export class cdpeeEReason extends jlEnum<cdpeeEReason> {
      /**The enderman has teleported away due to a critical hit*/
      static CRITICAL_HIT: cdpeeEReason;
      /**Specific case for CRITICAL_HIT where the enderman is taking rain damage*/
      static DROWN: cdpeeEReason;
      /**The enderman has teleported away due to indirect damage (ranged)*/
      static INDIRECT: cdpeeEReason;
      /**The enderman has stopped attacking and ran away*/
      static RUNAWAY: cdpeeEReason;
      /**The enderman has teleported away due to the player staring at it during combat*/
      static STARE: cdpeeEReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpeeEReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpeeEReason[];
   }
   export interface obeEndermite extends obeMonster {
      /**Gets whether this Endermite was spawned by a player.*/
      isPlayerSpawned(): boolean;
      /**Sets whether this Endermite was spawned by a player.*/
      setPlayerSpawned(playerSpawned: boolean): void;
   }
   /**Represents a thrown Ender Pearl entity*/
   export interface obeEnderPearl extends obeThrowableProjectile {}
   /**Represents an EnderSignal, which is created upon throwing an ender eye.*/
   export interface obeEnderSignal extends obeEntity {
      /**Gets the amount of time this entity has been alive (in ticks).*/
      getDespawnTimer(): number;
      /**Gets if the EnderSignal should drop an item on death.  If true, it will drop an item.*/
      getDropItem(): boolean;
      /**Get the ItemStack to be displayed while in the air and to be  dropped on death.*/
      getItem(): obiItemStack;
      /**Get the location this EnderSignal is moving towards.*/
      getTargetLocation(): obLocation;
      /**Set how long this entity has been alive (in ticks).*/
      setDespawnTimer(timer: number): void;
      /**Sets if the EnderSignal should drop an item on death; or if it should  shatter.*/
      setDropItem(drop: boolean): void;
      /**Set the ItemStack to be displayed while in the air and to be  dropped on death.*/
      setItem(item: obiItemStack): void;
      /**Set the Location this EnderSignal is moving towards.*/
      setTargetLocation(location: obLocation): void;
   }
   /**Represents a captured state of an end gateway.*/
   export interface obbEndGateway extends obbTileState {
      /**Gets the age in ticks of the gateway.*/
      getAge(): number;
      /**Gets the location that entities are teleported to when  entering the gateway portal.*/
      getExitLocation(): obLocation;
      /**Gets whether this gateway will teleport entities directly to  the exit location instead of finding a nearby location.*/
      isExactTeleport(): boolean;
      /**Sets the age in ticks of the gateway.*/
      setAge(age: number): void;
      /**Sets whether this gateway will teleport entities directly to  the exit location instead of finding a nearby location.*/
      setExactTeleport(exact: boolean): void;
      /**Sets the exit location that entities are teleported to when  they enter the gateway portal.*/
      setExitLocation(location: obLocation): void;
   }
   /**'eye' denotes whether this end portal frame has been activated by having an  eye of ender placed in it.*/
   export interface obbdtEndPortalFrame extends obbdDirectional {
      /**Gets the value of the 'eye' property.*/
      hasEye(): boolean;
      /**Sets the value of the 'eye' property.*/
      setEye(eye: boolean): void;
   }
   /**Represents a base entity in the world*/
   export interface obeEntity extends obmMetadatable, obcCommandSender, obNameable, obpPersistentDataHolder {
      /**Add a passenger to the vehicle.*/
      addPassenger(passenger: obeEntity): boolean;
      /**Add a tag to this entity.*/
      addScoreboardTag(tag: string): boolean;
      /**Eject any passenger.*/
      eject(): boolean;
      /**Returns whether this entity was spawned from a mob spawner.*/
      fromMobSpawner(): boolean;
      /**Gets the entity's current bounding box.*/
      getBoundingBox(): obuBoundingBox;
      /**Gets the latest chunk an entity is currently or was in.*/
      getChunk(): obChunk;
      /**Returns a unique id for this entity*/
      getEntityId(): number;
      getEntitySpawnReason(): obeeCSpawnReason;
      /**Get the closest cardinal BlockFace direction an entity is  currently facing.*/
      getFacing(): obbBlockFace;
      /**Returns the distance this entity has fallen*/
      getFallDistance(): number;
      /**Returns the entity's current fire ticks (ticks before the entity stops  being on fire).*/
      getFireTicks(): number;
      /**Gets the entity's height*/
      getHeight(): number;
      /**Retrieve the last EntityDamageEvent inflicted on this entity.*/
      getLastDamageCause(): obeeEntityDamageEvent;
      getLocation(): obLocation;
      /**Stores the entity's current position in the provided Location object.*/
      getLocation(loc: obLocation): obLocation;
      /**Returns the entity's maximum fire ticks.*/
      getMaxFireTicks(): number;
      /**Returns a list of entities within a bounding box centered around this  entity*/
      getNearbyEntities(x: number, y: number, z: number): juList<obeEntity>;
      /**Gets the location where this entity originates from.*/
      getOrigin(): obLocation;
      /**Gets a list of passengers of this vehicle.*/
      getPassengers(): juList<obeEntity>;
      /**Returns the reaction of the entity when moved by a piston.*/
      getPistonMoveReaction(): obbPistonMoveReaction;
      /**Gets the period of time (in ticks) before this entity can use a portal.*/
      getPortalCooldown(): number;
      /**Gets the entity's current pose.*/
      getPose(): obePose;
      /**Returns a set of tags for this entity.*/
      getScoreboardTags(): juSet<string>;
      /**Gets the Server that contains this Entity*/
      getServer(): obServer;
      /**Gets the amount of ticks this entity has lived for.*/
      getTicksLived(): number;
      /**Get the type of the entity.*/
      getType(): obeEntityType;
      /**Returns a unique and persistent id for this entity*/
      getUniqueId(): juUUID;
      /**Get the vehicle that this player is inside.*/
      getVehicle(): obeEntity;
      /**Gets this entity's current velocity*/
      getVelocity(): obuVector;
      /**Gets the entity's width*/
      getWidth(): number;
      /**Gets the current world this entity resides in*/
      getWorld(): obWorld;
      /**Returns whether gravity applies to this entity.*/
      hasGravity(): boolean;
      /**Gets whether or not the mob's custom name is displayed client side.*/
      isCustomNameVisible(): boolean;
      /**Returns true if this entity has been marked for removal.*/
      isDead(): boolean;
      /**Check if a vehicle has passengers.*/
      isEmpty(): boolean;
      /**Gets whether the entity is glowing or not.*/
      isGlowing(): boolean;
      /**Check if entity is in bubble column*/
      isInBubbleColumn(): boolean;
      /**Check if entity is in lava*/
      isInLava(): boolean;
      /**Check if entity is in rain*/
      isInRain(): boolean;
      /**Returns whether this entity is inside a vehicle.*/
      isInsideVehicle(): boolean;
      /**Gets whether the entity is invulnerable or not.*/
      isInvulnerable(): boolean;
      /**Returns true if the entity is in water.*/
      isInWater(): boolean;
      /**Check if entity is in water or bubble column*/
      isInWaterOrBubbleColumn(): boolean;
      /**Check if entity is in water or rain*/
      isInWaterOrRain(): boolean;
      /**Check if entity is in water or rain or bubble column*/
      isInWaterOrRainOrBubbleColumn(): boolean;
      /**Returns true if the entity is supported by a block.*/
      isOnGround(): boolean;
      /**Returns true if the entity gets persisted.*/
      isPersistent(): boolean;
      /**Gets whether the entity is silent or not.*/
      isSilent(): boolean;
      /**Check if entity is inside a ticking chunk*/
      isTicking(): boolean;
      /**Returns false if the entity has died or been despawned for some other  reason.*/
      isValid(): boolean;
      /**Leave the current vehicle.*/
      leaveVehicle(): boolean;
      /**Performs the specified EntityEffect for this entity.*/
      playEffect(type: obEntityEffect): void;
      /**Mark the entity's removal.*/
      remove(): void;
      /**Remove a passenger from the vehicle.*/
      removePassenger(passenger: obeEntity): boolean;
      /**Removes a given tag from this entity.*/
      removeScoreboardTag(tag: string): boolean;
      /**Sets whether or not to display the mob's custom name client side.*/
      setCustomNameVisible(flag: boolean): void;
      /**Sets the fall distance for this entity*/
      setFallDistance(distance: number): void;
      /**Sets the entity's current fire ticks (ticks before the entity stops  being on fire).*/
      setFireTicks(ticks: number): void;
      /**Sets whether the entity has a team colored (default: white) glow.*/
      setGlowing(flag: boolean): void;
      /**Sets whether gravity applies to this entity.*/
      setGravity(gravity: boolean): void;
      /**Sets whether the entity is invulnerable or not.*/
      setInvulnerable(flag: boolean): void;
      /**Record the last EntityDamageEvent inflicted on this entity*/
      setLastDamageCause(event: obeeEntityDamageEvent): void;
      /**Sets whether or not the entity gets persisted.*/
      setPersistent(persistent: boolean): void;
      /**Sets the period of time (in ticks) before this entity can use a portal.*/
      setPortalCooldown(cooldown: number): void;
      /**Sets the entity's rotation.*/
      setRotation(yaw: number, pitch: number): void;
      /**Sets whether the entity is silent or not.*/
      setSilent(flag: boolean): void;
      /**Sets the amount of ticks this entity has lived for.*/
      setTicksLived(value: number): void;
      /**Sets this entity's velocity*/
      setVelocity(velocity: obuVector): void;
      spigot(): obeESpigot;
      /**Teleports this entity to the target Entity.*/
      teleport(destination: obeEntity): boolean;
      /**Teleports this entity to the target Entity.*/
      teleport(destination: obeEntity, cause: obepPTeleportCause): boolean;
      /**Teleports this entity to the given location.*/
      teleport(location: obLocation): boolean;
      /**Teleports this entity to the given location.*/
      teleport(location: obLocation, cause: obepPTeleportCause): boolean;
      /**Loads\/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.*/
      teleportAsync(loc: obLocation): jucCompletableFuture<boolean>;
      /**Loads\/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.*/
      teleportAsync(loc: obLocation, cause: obepPTeleportCause): jucCompletableFuture<boolean>;
   }
   export class obeESpigot extends obcCSpigot {
      constructor ();
   }
   /**Fired any time an entity is being added to the world for any reason.   Not to be confused with CreatureSpawnEvent  This will fire anytime a chunk is reloaded too.*/
   export class cdpeeEntityAddToWorldEvent extends obeeEntityEvent {
      constructor (entity: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when the amount of air an entity has remaining changes.*/
   export class obeeEntityAirChangeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, amount: number);
      /**Gets the amount of air the entity has left (measured in ticks).*/
      getAmount (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the amount of air remaining for the entity (measured in ticks.*/
      setAmount (amount: number): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Called when a block is formed by entities.    Examples:    Snow formed by a Snowman.  Frosted Ice formed by the Frost Walker enchantment.*/
   export class obebEntityBlockFormEvent extends obebBlockFormEvent {
      constructor (entity: obeEntity, block: obbBlock, blockstate: obbBlockState);
      /**Get the entity that formed the block.*/
      getEntity (): obeEntity;
   }
   /**Represents a captured state of a block which stores entities.*/
   export interface obbEntityBlockStorage<T extends Entity> extends obbTileState {
      /**Add an entity to the block.*/
      addEntity(entity: T): void;
      /**Get the amount of entities currently in this block.*/
      getEntityCount(): number;
      /**Get the maximum amount of entities this block can hold.*/
      getMaxEntities(): number;
      /**Check if the block is completely full of entities.*/
      isFull(): boolean;
      /**Release all the entities currently stored in the block.*/
      releaseEntities(): juList<T>;
      /**Set the maximum amount of entities this block can hold.*/
      setMaxEntities(max: number): void;
   }
   /**Called when an Entity breaks a door    Cancelling the event will cause the event to be delayed*/
   export class obeeEntityBreakDoorEvent extends obeeEntityChangeBlockEvent {
      constructor (entity: obeLivingEntity, targetBlock: obbBlock);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
   }
   /**Called when one Entity breeds with another Entity.*/
   export class obeeEntityBreedEvent extends obeeEntityEvent implements obeCancellable {
      constructor (
         child: obeLivingEntity,
         mother: obeLivingEntity,
         father: obeLivingEntity,
         breeder: obeLivingEntity,
         bredWith: obiItemStack,
         experience: number
      );
      /**The ItemStack that was used to initiate breeding, if present.*/
      getBredWith (): obiItemStack;
      /**Gets the Entity responsible for breeding.*/
      getBreeder (): obeLivingEntity;
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      /**Get the amount of experience granted by breeding.*/
      getExperience (): number;
      /**Gets the other parent of the newly born entity.*/
      getFather (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the parent creating this entity.*/
      getMother (): obeLivingEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the amount of experience granted by breeding.*/
      setExperience (experience: number): void;
   }
   /**A classification of entities which may behave differently than others or be  affected uniquely by enchantments and potion effects among other things.*/
   export class obeEntityCategory extends jlEnum<obeEntityCategory> {
      /**Entities of the arthropod family.*/
      static ARTHROPOD: obeEntityCategory;
      /**Entities that participate in raids.*/
      static ILLAGER: obeEntityCategory;
      /**Any uncategorized entity.*/
      static NONE: obeEntityCategory;
      /**Undead creatures.*/
      static UNDEAD: obeEntityCategory;
      /**Entities that reside primarily underwater (excluding Drowned).*/
      static WATER: obeEntityCategory;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEntityCategory;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEntityCategory[];
   }
   /**Called when any Entity changes a block and a more specific event is not available.*/
   export class obeeEntityChangeBlockEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, block: obbBlock, to: obbdBlockData);
      /**Gets the block the entity is changing*/
      getBlock (): obbBlock;
      /**Gets the data for the block that would be changed into*/
      getBlockData (): obbdBlockData;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Material that the block is changing into*/
      getTo (): obMaterial;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a block causes an entity to combust.*/
   export class obeeEntityCombustByBlockEvent extends obeeEntityCombustEvent {
      constructor (combuster: obbBlock, combustee: obeEntity, duration: number);
      /**The combuster can be lava or a block that is on fire.*/
      getCombuster (): obbBlock;
   }
   /**Called when an entity causes another entity to combust.*/
   export class obeeEntityCombustByEntityEvent extends obeeEntityCombustEvent {
      constructor (combuster: obeEntity, combustee: obeEntity, duration: number);
      /**Get the entity that caused the combustion event.*/
      getCombuster (): obeEntity;
   }
   /**Called when an entity combusts.    If an Entity Combust event is cancelled, the entity will not combust.*/
   export class obeeEntityCombustEvent extends obeeEntityEvent implements obeCancellable {
      constructor (combustee: obeEntity, duration: number);
      getDuration (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**The number of seconds the combustee should be alight for.*/
      setDuration (duration: number): void;
   }
   /**Called when an entity is damaged by a block*/
   export class obeeEntityDamageByBlockEvent extends obeeEntityDamageEvent {
      constructor (damager: obbBlock, damagee: obeEntity, cause: obeeEDamageCause, damage: number);
      constructor (
         damager: obbBlock,
         damagee: obeEntity,
         cause: obeeEDamageCause,
         modifiers: juMap<obeeEDamageModifier, number>,
         modifierFunctions: juMap<obeeEDamageModifier, cgcbFunction<number, number>>
      );
      /**Returns the block that damaged the player.*/
      getDamager (): obbBlock;
   }
   /**Called when an entity is damaged by an entity*/
   export class obeeEntityDamageByEntityEvent extends obeeEntityDamageEvent {
      constructor (damager: obeEntity, damagee: obeEntity, cause: obeeEDamageCause, damage: number);
      constructor (
         damager: obeEntity,
         damagee: obeEntity,
         cause: obeeEDamageCause,
         modifiers: juMap<obeeEDamageModifier, number>,
         modifierFunctions: juMap<obeeEDamageModifier, cgcbFunction<number, number>>
      );
      /**Returns the entity that damaged the defender.*/
      getDamager (): obeEntity;
   }
   /**Stores data for damage events*/
   export class obeeEntityDamageEvent extends obeeEntityEvent implements obeCancellable {
      constructor (damagee: obeEntity, cause: obeeEDamageCause, damage: number);
      constructor (
         damagee: obeEntity,
         cause: obeeEDamageCause,
         modifiers: juMap<obeeEDamageModifier, number>,
         modifierFunctions: juMap<obeeEDamageModifier, cgcbFunction<number, number>>
      );
      /**Gets the cause of the damage.*/
      getCause (): obeeEDamageCause;
      /**Gets the raw amount of damage caused by the event*/
      getDamage (): number;
      /**Gets the damage change for some modifier*/
      getDamage (type: obeeEDamageModifier): number;
      /**Gets the amount of damage caused by the event after all damage  reduction is applied.*/
      getFinalDamage (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the original damage for the specified modifier, as defined at this  event's construction.*/
      getOriginalDamage (type: obeeEDamageModifier): number;
      /**This checks to see if a particular modifier is valid for this event's  caller, such that, setDamage(DamageModifier, double) will not  throw an UnsupportedOperationException.*/
      isApplicable (type: obeeEDamageModifier): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the raw amount of damage caused by the event.*/
      setDamage (damage: number): void;
      /**Sets the damage for the specified modifier.*/
      setDamage (type: obeeEDamageModifier, damage: number): void;
   }
   /**An enum to specify the cause of the damage*/
   export class obeeEDamageCause extends jlEnum<obeeEDamageCause> {
      /**Damage caused by being in the area when a block explodes.*/
      static BLOCK_EXPLOSION: obeeEDamageCause;
      /**Damage caused when an entity contacts a block such as a Cactus.*/
      static CONTACT: obeeEDamageCause;
      /**Damage caused when an entity is colliding with too many entities due  to the maxEntityCramming game rule.*/
      static CRAMMING: obeeEDamageCause;
      /**Custom damage.*/
      static CUSTOM: obeeEDamageCause;
      /**Damage caused by a dragon breathing fire.*/
      static DRAGON_BREATH: obeeEDamageCause;
      /**Damage caused by running out of air while in water*/
      static DROWNING: obeeEDamageCause;
      /**Damage caused when an entity that should be in water is not.*/
      static DRYOUT: obeeEDamageCause;
      /**Damage caused when an entity attacks another entity.*/
      static ENTITY_ATTACK: obeeEDamageCause;
      /**Damage caused by being in the area when an entity, such as a  Creeper, explodes.*/
      static ENTITY_EXPLOSION: obeeEDamageCause;
      /**Damage caused when an entity attacks another entity in a sweep attack.*/
      static ENTITY_SWEEP_ATTACK: obeeEDamageCause;
      /**Damage caused when an entity falls a distance greater than 3 blocks*/
      static FALL: obeeEDamageCause;
      /**Damage caused by being hit by a falling block which deals damage*/
      static FALLING_BLOCK: obeeEDamageCause;
      /**Damage caused by direct exposure to fire*/
      static FIRE: obeeEDamageCause;
      /**Damage caused due to burns caused by fire*/
      static FIRE_TICK: obeeEDamageCause;
      /**Damage caused when an entity runs into a wall.*/
      static FLY_INTO_WALL: obeeEDamageCause;
      /**Damage caused when an entity steps on Material.MAGMA_BLOCK.*/
      static HOT_FLOOR: obeeEDamageCause;
      /**Damage caused by direct exposure to lava*/
      static LAVA: obeeEDamageCause;
      /**Damage caused by being struck by lightning*/
      static LIGHTNING: obeeEDamageCause;
      /**Damage caused by being hit by a damage potion or spell*/
      static MAGIC: obeeEDamageCause;
      /**Damage caused due to a snowman melting*/
      static MELTING: obeeEDamageCause;
      /**Damage caused due to an ongoing poison effect*/
      static POISON: obeeEDamageCause;
      /**Damage caused when attacked by a projectile.*/
      static PROJECTILE: obeeEDamageCause;
      /**Damage caused by starving due to having an empty hunger bar*/
      static STARVATION: obeeEDamageCause;
      /**Damage caused by being put in a block*/
      static SUFFOCATION: obeeEDamageCause;
      /**Damage caused by committing suicide using the command "\/kill"*/
      static SUICIDE: obeeEDamageCause;
      /**Damage caused in retaliation to another attack by the Thorns  enchantment.*/
      static THORNS: obeeEDamageCause;
      /**Damage caused by falling into the void*/
      static VOID: obeeEDamageCause;
      /**Damage caused by Wither potion effect*/
      static WITHER: obeeEDamageCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeEDamageCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeEDamageCause[];
   }
   /**Thrown whenever a LivingEntity dies*/
   export class obeeEntityDeathEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, drops: juList<obiItemStack>);
      constructor (what: obeLivingEntity, drops: juList<obiItemStack>, droppedExp: number);
      /**Get the sound that the entity makes when dying*/
      getDeathSound (): obSound;
      /**Get the sound category that the death sound should play in*/
      getDeathSoundCategory (): obSoundCategory;
      /**Get the pitch that the death sound will play with.*/
      getDeathSoundPitch (): number;
      /**Get the volume that the death sound will play at.*/
      getDeathSoundVolume (): number;
      /**Gets how much EXP should be dropped from this death.*/
      getDroppedExp (): number;
      /**Gets all the items which will drop when the entity dies*/
      getDrops (): juList<obiItemStack>;
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the amount of health that the entity should revive with after cancelling the event.*/
      getReviveHealth (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the sound that the entity makes when dying*/
      setDeathSound (sound: obSound): void;
      /**Set the sound category that the death sound should play in.*/
      setDeathSoundCategory (soundCategory: obSoundCategory): void;
      /**GSetet the pitch that the death sound should play with.*/
      setDeathSoundPitch (pitch: number): void;
      /**Set the volume the death sound should play at.*/
      setDeathSoundVolume (volume: number): void;
      /**Sets how much EXP should be dropped from this death.*/
      setDroppedExp (exp: number): void;
      /**Set the amount of health that the entity should revive with after cancelling the event.*/
      setReviveHealth (reviveHealth: number): void;
      /**Set whether or not the death sound should play when the entity dies.*/
      setShouldPlayDeathSound (playDeathSound: boolean): void;
      /**Whether or not the death sound should play when the entity dies.*/
      shouldPlayDeathSound (): boolean;
   }
   /**Called when an entity stops riding another entity.*/
   export class oseeEntityDismountEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, dismounted: obeEntity);
      constructor (what: obeEntity, dismounted: obeEntity, isCancellable: boolean);
      getDismounted (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      isCancellable (): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Thrown when an entity creates an item drop.*/
   export class obeeEntityDropItemEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, drop: obeItem);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Item created by the entity*/
      getItemDrop (): obeItem;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**A list of all Effects that can happen to entities.*/
   export class obEntityEffect extends jlEnum<obEntityEffect> {
      /**Armor stand is hit.*/
      static ARMOR_STAND_HIT: obEntityEffect;
      /**Colored particles from a tipped arrow.*/
      static ARROW_PARTICLES: obEntityEffect;
      /**Entity breaks item in boot slot*/
      static BREAK_EQUIPMENT_BOOTS: obEntityEffect;
      /**Entity breaks item in chestplate slot*/
      static BREAK_EQUIPMENT_CHESTPLATE: obEntityEffect;
      /**Entity breaks item in helmet slot*/
      static BREAK_EQUIPMENT_HELMET: obEntityEffect;
      /**Entity breaks item in legging slot*/
      static BREAK_EQUIPMENT_LEGGINGS: obEntityEffect;
      /**Entity breaks item in main hand*/
      static BREAK_EQUIPMENT_MAIN_HAND: obEntityEffect;
      /**Entity breaks item in off hand*/
      static BREAK_EQUIPMENT_OFF_HAND: obEntityEffect;
      /**Cat taming failed.*/
      static CAT_TAME_FAIL: obEntityEffect;
      /**Cat taming succeeded.*/
      static CAT_TAME_SUCCESS: obEntityEffect;
      /**Dolphin has been fed and is locating a structure.*/
      static DOLPHIN_FED: obEntityEffect;
      /**Silverfish entering block, spawner spawning.*/
      static ENTITY_POOF: obEntityEffect;
      /**When a firework explodes.*/
      static FIREWORK_EXPLODE: obEntityEffect;
      /**Fox chews the food in its mouth*/
      static FOX_CHEW: obEntityEffect;
      /**Guardian sets laser target.*/
      static GUARDIAN_TARGET: obEntityEffect;
      /**When mobs get hurt.*/
      static HURT: obEntityEffect;
      /**Entity hurt due to berry bush.*/
      static HURT_BERRY_BUSH: obEntityEffect;
      /**Entity hurt due to drowning damage.*/
      static HURT_DROWN: obEntityEffect;
      /**Entity hurt due to explosion damage.*/
      static HURT_EXPLOSION: obEntityEffect;
      /**When an Iron Golem gives a rose.*/
      static IRON_GOLEM_ROSE: obEntityEffect;
      /**Iron golem puts away rose.*/
      static IRON_GOLEM_SHEATH: obEntityEffect;
      /**Hearts from a breeding entity.*/
      static LOVE_HEARTS: obEntityEffect;
      /**Player's bad omen effect removed to start or increase raid difficult.*/
      static PLAYER_BAD_OMEN_RAID: obEntityEffect;
      /**Rabbit jumping.*/
      static RABBIT_JUMP: obEntityEffect;
      /**Ravager has been stunned for 40 ticks.*/
      static RAVAGER_STUNNED: obEntityEffect;
      /**Shield blocks attack.*/
      static SHIELD_BLOCK: obEntityEffect;
      /**Shield breaks.*/
      static SHIELD_BREAK: obEntityEffect;
      /**Resets squid rotation.*/
      static SQUID_ROTATE: obEntityEffect;
      /**Entity teleported as a result of chorus fruit or as an enderman*/
      static TELEPORT_ENDER: obEntityEffect;
      /**Entity hurt by thorns attack.*/
      static THORNS_HURT: obEntityEffect;
      /**Totem prevents entity death.*/
      static TOTEM_RESURRECT: obEntityEffect;
      /**When a villager is angry.*/
      static VILLAGER_ANGRY: obEntityEffect;
      /**Happy particles from a villager.*/
      static VILLAGER_HAPPY: obEntityEffect;
      /**Hearts from a villager.*/
      static VILLAGER_HEART: obEntityEffect;
      /**Villager splashes particles during a raid.*/
      static VILLAGER_SPLASH: obEntityEffect;
      /**Magic particles from a witch.*/
      static WITCH_MAGIC: obEntityEffect;
      /**The hearts when taming a wolf succeeds.*/
      static WOLF_HEARTS: obEntityEffect;
      /**When a wolf shakes (after being wet).*/
      static WOLF_SHAKE: obEntityEffect;
      /**The smoke when taming a wolf fails.*/
      static WOLF_SMOKE: obEntityEffect;
      /**When a zombie transforms into a villager by shaking violently.*/
      static ZOMBIE_TRANSFORM: obEntityEffect;
      /**Gets entity superclass which this affect is applicable to.*/
      getApplicable (): jlClass<obeEntity>;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obEntityEffect;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obEntityEffect[];
   }
   /**Called when an Entity enters a block and is stored in that block.    This event is called for bees entering a bee hive.    It is not called when a silverfish "enters" a stone block. For that listen to  the EntityChangeBlockEvent.*/
   export class obeeEntityEnterBlockEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, block: obbBlock);
      /**Get the block the entity will enter.*/
      getBlock (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when an entity enters love mode.    This can be cancelled but the item will still be consumed that was used to  make the entity enter into love mode.*/
   export class obeeEntityEnterLoveModeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (animalInLove: obeAnimals, humanEntity: obeHumanEntity, ticksInLove: number);
      /**Gets the animal that is entering love mode.*/
      getEntity (): obeAnimals;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Human Entity that caused the animal to enter love mode.*/
      getHumanEntity (): obeHumanEntity;
      /**Gets the amount of ticks that the animal will fall in love for.*/
      getTicksInLove (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the amount of ticks that the animal will fall in love for.*/
      setTicksInLove (ticksInLove: number): void;
   }
   /**An interface to a creatures inventory*/
   export interface obiEntityEquipment {
      /**Clears the entity of all armor and held items*/
      clear(): void;
      /**Gets a copy of all worn armor*/
      getArmorContents(): obiItemStack[];
      /**Gets a copy of the boots currently being worn by the entity*/
      getBoots(): obiItemStack;
      /**Gets the chance of the boots being dropped upon this creature's death.*/
      getBootsDropChance(): number;
      /**Gets a copy of the chest plate currently being worn by the entity*/
      getChestplate(): obiItemStack;
      /**Gets the chance of the chest plate being dropped upon this creature's  death.*/
      getChestplateDropChance(): number;
      /**Gets a copy of the helmet currently being worn by the entity*/
      getHelmet(): obiItemStack;
      /**Gets the chance of the helmet being dropped upon this creature's death.*/
      getHelmetDropChance(): number;
      /**Get the entity this EntityEquipment belongs to*/
      getHolder(): obeEntity;
      /**Gets the ItemStack at the given equipment slot in the inventory.*/
      getItem(slot: obiEquipmentSlot): obiItemStack;
      /**Gets a copy of the item the entity is currently holding  in their main hand.*/
      getItemInMainHand(): obiItemStack;
      /**Gets the chance of the main hand item being dropped upon this creature's  death.*/
      getItemInMainHandDropChance(): number;
      /**Gets a copy of the item the entity is currently holding  in their off hand.*/
      getItemInOffHand(): obiItemStack;
      /**Gets the chance of the off hand item being dropped upon this creature's  death.*/
      getItemInOffHandDropChance(): number;
      /**Gets a copy of the leggings currently being worn by the entity*/
      getLeggings(): obiItemStack;
      /**Gets the chance of the leggings being dropped upon this creature's  death.*/
      getLeggingsDropChance(): number;
      /**Sets the entities armor to the provided array of ItemStacks*/
      setArmorContents(items: obiItemStack[]): void;
      /**Sets the boots worn by the entity*/
      setBoots(boots: obiItemStack): void;
      /**Sets the boots worn by the entity*/
      setBoots(boots: obiItemStack, silent: boolean): void;
      /**Sets the chance of the boots being dropped upon this creature's death.*/
      setBootsDropChance(chance: number): void;
      /**Sets the chest plate worn by the entity*/
      setChestplate(chestplate: obiItemStack): void;
      /**Sets the chest plate worn by the entity*/
      setChestplate(chestplate: obiItemStack, silent: boolean): void;
      /**Sets the chance of the chest plate being dropped upon this creature's  death.*/
      setChestplateDropChance(chance: number): void;
      /**Sets the helmet worn by the entity*/
      setHelmet(helmet: obiItemStack): void;
      /**Sets the helmet worn by the entity*/
      setHelmet(helmet: obiItemStack, silent: boolean): void;
      /**Sets the chance of the helmet being dropped upon this creature's death.*/
      setHelmetDropChance(chance: number): void;
      /**Stores the ItemStack at the given equipment slot in the inventory.*/
      setItem(slot: obiEquipmentSlot, item: obiItemStack): void;
      /**Stores the ItemStack at the given equipment slot in the inventory.*/
      setItem(slot: obiEquipmentSlot, item: obiItemStack, silent: boolean): void;
      /**Sets the item the entity is holding in their main hand.*/
      setItemInMainHand(item: obiItemStack): void;
      /**Sets the item the entity is holding in their main hand.*/
      setItemInMainHand(item: obiItemStack, silent: boolean): void;
      /**Sets the chance of the item this creature is currently holding in their  main hand being dropped upon this creature's death.*/
      setItemInMainHandDropChance(chance: number): void;
      /**Sets the item the entity is holding in their off hand.*/
      setItemInOffHand(item: obiItemStack): void;
      /**Sets the item the entity is holding in their off hand.*/
      setItemInOffHand(item: obiItemStack, silent: boolean): void;
      /**Sets the chance of the off hand item being dropped upon this creature's  death.*/
      setItemInOffHandDropChance(chance: number): void;
      /**Sets the leggings worn by the entity*/
      setLeggings(leggings: obiItemStack): void;
      /**Sets the leggings worn by the entity*/
      setLeggings(leggings: obiItemStack, silent: boolean): void;
      /**Sets the chance of the leggings being dropped upon this creature's  death.*/
      setLeggingsDropChance(chance: number): void;
   }
   /**Represents an Entity-related event*/
   export class obeeEntityEvent extends obeEvent {
      constructor (what: obeEntity);
      /**Returns the Entity involved in this event*/
      getEntity (): obeEntity;
      /**Gets the EntityType of the Entity involved in this event.*/
      getEntityType (): obeEntityType;
   }
   /**Called when an entity explodes*/
   export class obeeEntityExplodeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, location: obLocation, blocks: juList<obbBlock>, yield: number);
      /**Returns the list of blocks that would have been removed or were removed  from the explosion event.*/
      blockList (): juList<obbBlock>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the location where the explosion happened.*/
      getLocation (): obLocation;
      /**Returns the percentage of blocks to drop from this explosion*/
      getYield (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the percentage of blocks to drop from this explosion*/
      setYield (yield: number): void;
   }
   /**Called when an entity interacts with an object*/
   export class obeeEntityInteractEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, block: obbBlock);
      /**Returns the involved block*/
      getBlock (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when an entity jumps    Cancelling the event will stop the entity from jumping*/
   export class cdpeeEntityJumpEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Fired when an Entity is knocked back by the hit of another Entity. The acceleration  vector can be modified. If this event is cancelled, the entity is not knocked back.*/
   export class cdpeeEntityKnockbackByEntityEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, hitBy: obeEntity, knockbackStrength: number, acceleration: obuVector);
      getAcceleration (): obuVector;
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getHitBy (): obeEntity;
      getKnockbackStrength (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a LivingEntity loads a crossbow with a projectile.*/
   export class ippeeEntityLoadCrossbowEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, crossbow: obiItemStack, hand: obiEquipmentSlot);
      /**Gets the crossbow ItemStack being loaded.*/
      getCrossbow (): obiItemStack;
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      /**Gets the hand from which the crossbow was loaded.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Set whether or not to cancel the crossbow being loaded.*/
      setCancelled (cancel: boolean): void;
      setConsumeItem (consume: boolean): void;
      shouldConsumeItem (): boolean;
   }
   /**Called when an entity attempts to ride another entity.*/
   export class oseeEntityMountEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, mount: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getMount (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Fired when an Entity decides to start moving towards a location.   This event does not fire for the entities actual movement. Only when it  is choosing to start moving to a location.*/
   export class cdpeeEntityPathfindEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, loc: obLocation, targetEntity: obeEntity);
      /**The Entity that is pathfinding.*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**The Location of where the entity is about to move to.*/
      getLoc (): obLocation;
      /**If the Entity is trying to pathfind to an entity, this is the entity in relation.*/
      getTargetEntity (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Thrown when a entity picks an item up from the ground*/
   export class obeeEntityPickupItemEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, item: obeItem, remaining: number);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Item picked up by the entity.*/
      getItem (): obeItem;
      /**Gets the amount remaining on the ground, if any*/
      getRemaining (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when an entity comes into contact with a portal*/
   export class obeeEntityPortalEnterEvent extends obeeEntityEvent {
      constructor (entity: obeEntity, location: obLocation);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the portal block the entity is touching*/
      getLocation (): obLocation;
   }
   /**Called when a non-player entity is about to teleport because it is in  contact with a portal.    For players see PlayerPortalEvent*/
   export class obeeEntityPortalEvent extends obeeEntityTeleportEvent {
      constructor (entity: obeEntity, from: obLocation, to: obLocation);
      constructor (entity: obeEntity, from: obLocation, to: obLocation, searchRadius: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the search radius value for finding an available portal.*/
      getSearchRadius (): number;
      /**Set the Block radius to search in for available portals.*/
      setSearchRadius (searchRadius: number): void;
   }
   /**Called before an entity exits a portal.    This event allows you to modify the velocity of the entity after they have  successfully exited the portal.*/
   export class obeeEntityPortalExitEvent extends obeeEntityTeleportEvent {
      constructor (entity: obeEntity, from: obLocation, to: obLocation, before: obuVector, after: obuVector);
      /**Gets a copy of the velocity that the entity will have after exiting the  portal.*/
      getAfter (): obuVector;
      /**Gets a copy of the velocity that the entity has before entering the  portal.*/
      getBefore (): obuVector;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Sets the velocity that the entity will have after exiting the portal.*/
      setAfter (after: obuVector): void;
   }
   /**Called when an entity changes its pose.*/
   export class obeeEntityPoseChangeEvent extends obeeEntityEvent {
      constructor (who: obeEntity, pose: obePose);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the entity's new pose.*/
      getPose (): obePose;
   }
   /**Called when a potion effect is modified on an entity.    If the event is cancelled, no change will be made on the entity.*/
   export class obeeEntityPotionEffectEvent extends obeeEntityEvent implements obeCancellable {
      constructor (
         livingEntity: obeLivingEntity,
         oldEffect: obpPotionEffect,
         newEffect: obpPotionEffect,
         cause: obeeECause,
         action: obeeEAction,
         override: boolean
      );
      /**Gets the action which will be performed on the potion effect type.*/
      getAction (): obeeEAction;
      /**Gets the cause why the effect has changed.*/
      getCause (): obeeECause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the modified potion effect type.*/
      getModifiedType (): obpPotionEffectType;
      /**Gets new potion effect of the changed type to be applied.*/
      getNewEffect (): obpPotionEffect;
      /**Gets the old potion effect of the changed type, which will be removed.*/
      getOldEffect (): obpPotionEffect;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Returns if the new potion effect will override the old potion effect  (Only applicable for the CHANGED Action).*/
      isOverride (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets if the new potion effect will override the old potion effect (Only  applicable for the CHANGED action).*/
      setOverride (override: boolean): void;
   }
   /**An enum to specify the action to be performed.*/
   export class obeeEAction extends jlEnum<obeeEAction> {
      /**When the potion effect is added because the entity didn't have it's  type.*/
      static ADDED: obeeEAction;
      /**When the entity already had the potion effect type, but the effect is  changed.*/
      static CHANGED: obeeEAction;
      /**When the effect is removed due to all effects being removed.*/
      static CLEARED: obeeEAction;
      /**When the potion effect type is completely removed.*/
      static REMOVED: obeeEAction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeEAction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeEAction[];
   }
   /**An enum to specify the cause why an effect was changed.*/
   export class obeeECause extends jlEnum<obeeECause> {
      /**When the entity stands inside an area effect cloud.*/
      static AREA_EFFECT_CLOUD: obeeECause;
      /**When the entity is hit by an spectral or tipped arrow.*/
      static ARROW: obeeECause;
      /**When the entity is inflicted with a potion effect due to an entity  attack (e.g.*/
      static ATTACK: obeeECause;
      /**When beacon effects get applied due to the entity being nearby.*/
      static BEACON: obeeECause;
      /**When a potion effect is changed due to the \/effect command.*/
      static COMMAND: obeeECause;
      /**When the entity gets the effect from a conduit.*/
      static CONDUIT: obeeECause;
      /**When a conversion from a villager zombie to a villager is started or  finished.*/
      static CONVERSION: obeeECause;
      /**When all effects are removed due to death (Note: This is called on  respawn, so it's player only!)*/
      static DEATH: obeeECause;
      /**When the entity gets the effect from a dolphin.*/
      static DOLPHIN: obeeECause;
      /**When the effect was removed due to expiration.*/
      static EXPIRATION: obeeECause;
      /**When an effect is inflicted due to food (e.g.*/
      static FOOD: obeeECause;
      /**When an illusion illager makes himself disappear.*/
      static ILLUSION: obeeECause;
      /**When all effects are removed due to a bucket of milk.*/
      static MILK: obeeECause;
      /**When a player gets bad omen after killing a patrol captain.*/
      static PATROL_CAPTAIN: obeeECause;
      /**When a potion effect is modified through the plugin methods.*/
      static PLUGIN: obeeECause;
      /**When the entity drinks a potion.*/
      static POTION_DRINK: obeeECause;
      /**When the entity is inflicted with an effect due to a splash potion.*/
      static POTION_SPLASH: obeeECause;
      /**When a spider gets effects when spawning on hard difficulty.*/
      static SPIDER_SPAWN: obeeECause;
      /**When the entity gets effects from a totem item saving it's life.*/
      static TOTEM: obeeECause;
      /**When the entity gets water breathing by wearing a turtle helmet.*/
      static TURTLE_HELMET: obeeECause;
      /**When the Cause is missing.*/
      static UNKNOWN: obeeECause;
      /**When a villager gets regeneration after a trade.*/
      static VILLAGER_TRADE: obeeECause;
      /**When an entity comes in contact with a wither rose.*/
      static WITHER_ROSE: obeeECause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeECause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeECause[];
   }
   /**Stores data for health-regain events*/
   export class obeeEntityRegainHealthEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, amount: number, regainReason: obeeERegainReason);
      constructor (entity: obeEntity, amount: number, regainReason: obeeERegainReason, isFastRegen: boolean);
      /**Gets the amount of regained health*/
      getAmount (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the reason for why the entity is regaining health*/
      getRegainReason (): obeeERegainReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Is this event a result of the fast regeneration mechanic*/
      isFastRegen (): boolean;
      /**Sets the amount of regained health*/
      setAmount (amount: number): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An enum to specify the type of health regaining that is occurring*/
   export class obeeERegainReason extends jlEnum<obeeERegainReason> {
      /**Any other reason not covered by the reasons above*/
      static CUSTOM: obeeERegainReason;
      /**When a player regains health from eating consumables*/
      static EATING: obeeERegainReason;
      /**When an ender dragon regains health from an ender crystal*/
      static ENDER_CRYSTAL: obeeERegainReason;
      /**When a player is healed by a potion or spell*/
      static MAGIC: obeeERegainReason;
      /**When a player is healed over time by a potion or spell*/
      static MAGIC_REGEN: obeeERegainReason;
      /**When a player regains health from regenerating due to Peaceful mode  (difficulty=0)*/
      static REGEN: obeeERegainReason;
      /**When a player regains health from regenerating due to their hunger  being satisfied*/
      static SATIATED: obeeERegainReason;
      /**When an entity is damaged by the Wither potion effect*/
      static WITHER: obeeERegainReason;
      /**When a wither is filling its health during spawning*/
      static WITHER_SPAWN: obeeERegainReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeERegainReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeERegainReason[];
   }
   /**Fired any time an entity is being removed from a world for any reason*/
   export class cdpeeEntityRemoveFromWorldEvent extends obeeEntityEvent {
      constructor (entity: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when an entity dies and may have the opportunity to be resurrected.  Will be called in a cancelled state if the entity does not have a totem  equipped.*/
   export class obeeEntityResurrectEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeLivingEntity);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   export class ipptEntitySetTag extends ipptBaseTag<obeEntityType, ipptEntitySetTag> {
      constructor (key: obNamespacedKey, values: juCollection<obeEntityType>);
      constructor (
         key: obNamespacedKey,
         values: juCollection<obeEntityType>,
         ...globalPredicates: jufPredicate<obeEntityType>[]
      );
      constructor (key: obNamespacedKey, filter: jufPredicate<obeEntityType>);
      constructor (key: obNamespacedKey, ...values: obeEntityType[]);
      getAllPossibleValues (): juSet<obeEntityType>;
      getName (value: obeEntityType): string;
   }
   /**Called when a LivingEntity shoots a bow firing an arrow*/
   export class obeeEntityShootBowEvent extends obeeEntityEvent implements obeCancellable {
      constructor (shooter: obeLivingEntity, bow: obiItemStack, projectile: obeEntity, force: number);
      constructor (
         shooter: obeLivingEntity,
         bow: obiItemStack,
         arrowItem: obiItemStack,
         projectile: obeEntity,
         force: number
      );
      constructor (
         shooter: obeLivingEntity,
         bow: obiItemStack,
         consumable: obiItemStack,
         projectile: obeEntity,
         hand: obiEquipmentSlot,
         force: number,
         consumeItem: boolean
      );
      /**Gets the bow ItemStack used to fire the arrow.*/
      getBow (): obiItemStack;
      /**Get the ItemStack to be consumed in this event (if any).*/
      getConsumable (): obiItemStack;
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      /**Gets the force the arrow was launched with*/
      getForce (): number;
      /**Get the hand from which the bow was shot.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the projectile which will be launched by this event*/
      getProjectile (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set whether or not the consumable item should be consumed in this event.*/
      setConsumeItem (consumeItem: boolean): void;
      /**Replaces the projectile which will be launched*/
      setProjectile (projectile: obeEntity): void;
      /**Get whether or not the consumable item should be consumed in this event.*/
      shouldConsumeItem (): boolean;
   }
   /**Called when an entity is spawned into a world.    If an Entity Spawn event is cancelled, the entity will not spawn.*/
   export class obeeEntitySpawnEvent extends obeeEntityEvent implements obeCancellable {
      constructor (spawnee: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location at which the entity is spawning.*/
      getLocation (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a Spellcaster casts a spell.*/
   export class obeeEntitySpellCastEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeSpellcaster, spell: obeSSpell);
      /**Returns the Entity involved in this event*/
      getEntity (): obeSpellcaster;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the spell to be cast in this event.*/
      getSpell (): obeSSpell;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   export class ipptEntityTags extends jlObject {
      constructor ();
   }
   /**Thrown when a LivingEntity is tamed*/
   export class obeeEntityTameEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeLivingEntity, owner: obeAnimalTamer);
      /**Returns the Entity involved in this event*/
      getEntity (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the owning AnimalTamer*/
      getOwner (): obeAnimalTamer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a creature targets or untargets another entity*/
   export class obeeEntityTargetEvent extends obeeEntityEvent implements obeCancellable {
      constructor (entity: obeEntity, target: obeEntity, reason: obeeETargetReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the reason for the targeting*/
      getReason (): obeeETargetReason;
      /**Get the entity that this is targeting.*/
      getTarget (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the entity that you want the mob to target instead.*/
      setTarget (target: obeEntity): void;
   }
   /**An enum to specify the reason for the targeting*/
   export class obeeETargetReason extends jlEnum<obeeETargetReason> {
      /**When the entity doesn't have a target, so it attacks the nearest  entity*/
      static CLOSEST_ENTITY: obeeETargetReason;
      /**When the entity doesn't have a target, so it attacks the nearest  player*/
      static CLOSEST_PLAYER: obeeETargetReason;
      /**When an entity targets another entity after colliding with it.*/
      static COLLISION: obeeETargetReason;
      /**For custom calls to the event.*/
      static CUSTOM: obeeETargetReason;
      /**When an entity selects a target while defending a village.*/
      static DEFEND_VILLAGE: obeeETargetReason;
      /**When a raiding entity selects the same target as one of its compatriots.*/
      static FOLLOW_LEADER: obeeETargetReason;
      /**When the target is forgotten for whatever reason.*/
      static FORGOT_TARGET: obeeETargetReason;
      /**When the owner of the entity attacks the target attacks, so the  entity targets it.*/
      static OWNER_ATTACKED_TARGET: obeeETargetReason;
      /**When the entity has no target, so the entity randomly chooses one.*/
      static RANDOM_TARGET: obeeETargetReason;
      /**When a zombie targeting an entity summons reinforcements, so the reinforcements target the same entity*/
      static REINFORCEMENT_TARGET: obeeETargetReason;
      /**When the target attacks the entity, so entity targets it*/
      static TARGET_ATTACKED_ENTITY: obeeETargetReason;
      /**When the target attacks a nearby entity of the same type, so the entity targets it*/
      static TARGET_ATTACKED_NEARBY_ENTITY: obeeETargetReason;
      /**When the target attacks the owner of the entity, so the entity  targets it.*/
      static TARGET_ATTACKED_OWNER: obeeETargetReason;
      /**When the entity's target has died, and so it no longer targets it*/
      static TARGET_DIED: obeeETargetReason;
      /**When the target is in creative or spectator mode, or the gamemode is peaceful, or other reasons*/
      static TARGET_INVALID: obeeETargetReason;
      /**When the target is in a different dimension*/
      static TARGET_OTHER_LEVEL: obeeETargetReason;
      /**When another entity tempts this entity by having a desired item such  as wheat in it's hand.*/
      static TEMPT: obeeETargetReason;
      /**A currently unknown reason for the entity changing target.*/
      static UNKNOWN: obeeETargetReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeETargetReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeETargetReason[];
   }
   /**Called when an Entity targets a LivingEntity and can only target  LivingEntity's.*/
   export class obeeEntityTargetLivingEntityEvent extends obeeEntityTargetEvent {
      constructor (entity: obeEntity, target: obeLivingEntity, reason: obeeETargetReason);
      /**Get the entity that this is targeting.*/
      getTarget (): obeLivingEntity;
      /**Set the Entity that you want the mob to target.*/
      setTarget (target: obeEntity): void;
   }
   /**Fired any time an entity attempts to teleport in an end gateway*/
   export class cdpeeEntityTeleportEndGatewayEvent extends obeeEntityTeleportEvent {
      constructor (what: obeEntity, from: obLocation, to: obLocation, gateway: obbEndGateway);
      /**The gateway triggering the teleport*/
      getGateway (): obbEndGateway;
   }
   /**Thrown when a non-player entity is teleported from one location to another.    This may be as a result of natural causes (Enderman, Shulker), pathfinding  (Wolf), or commands (\/teleport).*/
   export class obeeEntityTeleportEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, from: obLocation, to: obLocation);
      /**Gets the location that this entity moved from*/
      getFrom (): obLocation;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location that this entity moved to*/
      getTo (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the location that this entity moved from*/
      setFrom (from: obLocation): void;
      /**Sets the location that this entity moved to*/
      setTo (to: obLocation): void;
   }
   /**Sent when an entity's gliding status is toggled with an Elytra.  Examples of when this event would be called:        Player presses the jump key while in midair and using an Elytra      Player lands on ground while they are gliding (with an Elytra)    This can be visually estimated by the animation in which a player turns horizontal.*/
   export class obeeEntityToggleGlideEvent extends obeeEntityEvent implements obeCancellable {
      constructor (who: obeLivingEntity, isGliding: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isGliding (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Sent when an entity's swimming status is toggled.*/
   export class obeeEntityToggleSwimEvent extends obeeEntityEvent implements obeCancellable {
      constructor (who: obeLivingEntity, isSwimming: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isSwimming (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export class cdpeeETransformedReason extends jlEnum<cdpeeETransformedReason> {
      /**When a zombie villager is cured*/
      static CURED: cdpeeETransformedReason;
      /**When a zombie drowns*/
      static DROWNED: cdpeeETransformedReason;
      /**When a villager turns to a zombie villager*/
      static INFECTED: cdpeeETransformedReason;
      /**When a pig turns to a zombiepigman*/
      static LIGHTNING: cdpeeETransformedReason;
      /**When a mooshroom turns to a cow*/
      static SHEARED: cdpeeETransformedReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpeeETransformedReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpeeETransformedReason[];
   }
   /**Called when an entity is about to be replaced by another entity.*/
   export class obeeEntityTransformEvent extends obeeEntityEvent implements obeCancellable {
      constructor (original: obeEntity, convertedList: juList<obeEntity>, transformReason: obeeETransformReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the entities that the original entity was transformed to.*/
      getTransformedEntities (): juList<obeEntity>;
      /**Gets the entity that the original entity was transformed to.*/
      getTransformedEntity (): obeEntity;
      /**Gets the reason for the conversion that has occurred.*/
      getTransformReason (): obeeETransformReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export class obeeETransformReason extends jlEnum<obeeETransformReason> {
      /**When a zombie gets cured and a villager is spawned.*/
      static CURED: obeeETransformReason;
      /**When a entity drowns in water and a new entity spawns.*/
      static DROWNED: obeeETransformReason;
      /**When a villager gets infected and a zombie villager spawns.*/
      static INFECTION: obeeETransformReason;
      /**When lightning strikes a entity.*/
      static LIGHTNING: obeeETransformReason;
      /**When a mooshroom (or MUSHROOM_COW) is sheared and a cow spawns.*/
      static SHEARED: obeeETransformReason;
      /**When a slime splits into multiple smaller slimes.*/
      static SPLIT: obeeETransformReason;
      /**When reason is unknown.*/
      static UNKNOWN: obeeETransformReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeETransformReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeETransformReason[];
   }
   export class obeEntityType extends jlEnum<obeEntityType> implements obKeyed {
      static AREA_EFFECT_CLOUD: obeEntityType;
      /**Mechanical entity with an inventory for placing weapons \/ armor into.*/
      static ARMOR_STAND: obeEntityType;
      /**An arrow projectile; may get stuck in the ground.*/
      static ARROW: obeEntityType;
      static BAT: obeEntityType;
      static BEE: obeEntityType;
      static BLAZE: obeEntityType;
      /**A placed boat.*/
      static BOAT: obeEntityType;
      static CAT: obeEntityType;
      static CAVE_SPIDER: obeEntityType;
      static CHICKEN: obeEntityType;
      static COD: obeEntityType;
      static COW: obeEntityType;
      static CREEPER: obeEntityType;
      static DOLPHIN: obeEntityType;
      static DONKEY: obeEntityType;
      /**Like FIREBALL but with added effects.*/
      static DRAGON_FIREBALL: obeEntityType;
      /**An item resting on the ground.*/
      static DROPPED_ITEM: obeEntityType;
      static DROWNED: obeEntityType;
      /**A flying chicken egg.*/
      static EGG: obeEntityType;
      static ELDER_GUARDIAN: obeEntityType;
      static ENDER_CRYSTAL: obeEntityType;
      static ENDER_DRAGON: obeEntityType;
      /**A flying ender pearl.*/
      static ENDER_PEARL: obeEntityType;
      /**An ender eye signal.*/
      static ENDER_SIGNAL: obeEntityType;
      static ENDERMAN: obeEntityType;
      static ENDERMITE: obeEntityType;
      static EVOKER: obeEntityType;
      static EVOKER_FANGS: obeEntityType;
      /**An experience orb.*/
      static EXPERIENCE_ORB: obeEntityType;
      /**A block that is going to or is about to fall.*/
      static FALLING_BLOCK: obeEntityType;
      /**A flying large fireball, as thrown by a Ghast for example.*/
      static FIREBALL: obeEntityType;
      /**Internal representation of a Firework once it has been launched.*/
      static FIREWORK: obeEntityType;
      /**A fishing line and bobber.*/
      static FISHING_HOOK: obeEntityType;
      static FOX: obeEntityType;
      static GHAST: obeEntityType;
      static GIANT: obeEntityType;
      static GUARDIAN: obeEntityType;
      static HOGLIN: obeEntityType;
      static HORSE: obeEntityType;
      static HUSK: obeEntityType;
      static ILLUSIONER: obeEntityType;
      static IRON_GOLEM: obeEntityType;
      /**An item frame on a wall.*/
      static ITEM_FRAME: obeEntityType;
      /**A leash attached to a fencepost.*/
      static LEASH_HITCH: obeEntityType;
      /**A bolt of lightning.*/
      static LIGHTNING: obeEntityType;
      static LLAMA: obeEntityType;
      static LLAMA_SPIT: obeEntityType;
      static MAGMA_CUBE: obeEntityType;
      static MINECART: obeEntityType;
      static MINECART_CHEST: obeEntityType;
      static MINECART_COMMAND: obeEntityType;
      static MINECART_FURNACE: obeEntityType;
      static MINECART_HOPPER: obeEntityType;
      static MINECART_MOB_SPAWNER: obeEntityType;
      static MINECART_TNT: obeEntityType;
      static MULE: obeEntityType;
      static MUSHROOM_COW: obeEntityType;
      static OCELOT: obeEntityType;
      /**A painting on a wall.*/
      static PAINTING: obeEntityType;
      static PANDA: obeEntityType;
      static PARROT: obeEntityType;
      static PHANTOM: obeEntityType;
      static PIG: obeEntityType;
      static PIGLIN: obeEntityType;
      static PIGLIN_BRUTE: obeEntityType;
      static PILLAGER: obeEntityType;
      static PLAYER: obeEntityType;
      static POLAR_BEAR: obeEntityType;
      /**Primed TNT that is about to explode.*/
      static PRIMED_TNT: obeEntityType;
      static PUFFERFISH: obeEntityType;
      static RABBIT: obeEntityType;
      static RAVAGER: obeEntityType;
      static SALMON: obeEntityType;
      static SHEEP: obeEntityType;
      static SHULKER: obeEntityType;
      /**Bullet fired by SHULKER.*/
      static SHULKER_BULLET: obeEntityType;
      static SILVERFISH: obeEntityType;
      static SKELETON: obeEntityType;
      static SKELETON_HORSE: obeEntityType;
      static SLIME: obeEntityType;
      /**A flying small fireball, such as thrown by a Blaze or player.*/
      static SMALL_FIREBALL: obeEntityType;
      /**A flying snowball.*/
      static SNOWBALL: obeEntityType;
      static SNOWMAN: obeEntityType;
      /**Like ARROW but causes the PotionEffectType.GLOWING effect on all team members.*/
      static SPECTRAL_ARROW: obeEntityType;
      static SPIDER: obeEntityType;
      /**A flying splash potion.*/
      static SPLASH_POTION: obeEntityType;
      static SQUID: obeEntityType;
      static STRAY: obeEntityType;
      static STRIDER: obeEntityType;
      /**A flying experience bottle.*/
      static THROWN_EXP_BOTTLE: obeEntityType;
      static TRADER_LLAMA: obeEntityType;
      static TRIDENT: obeEntityType;
      static TROPICAL_FISH: obeEntityType;
      static TURTLE: obeEntityType;
      /**An unknown entity without an Entity Class*/
      static UNKNOWN: obeEntityType;
      static VEX: obeEntityType;
      static VILLAGER: obeEntityType;
      static VINDICATOR: obeEntityType;
      static WANDERING_TRADER: obeEntityType;
      static WITCH: obeEntityType;
      static WITHER: obeEntityType;
      static WITHER_SKELETON: obeEntityType;
      /**A flying wither skull projectile.*/
      static WITHER_SKULL: obeEntityType;
      static WOLF: obeEntityType;
      static ZOGLIN: obeEntityType;
      static ZOMBIE: obeEntityType;
      static ZOMBIE_HORSE: obeEntityType;
      static ZOMBIE_VILLAGER: obeEntityType;
      static ZOMBIFIED_PIGLIN: obeEntityType;
      getEntityClass (): jlClass<obeEntity>;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      isAlive (): boolean;
      /**Some entities cannot be spawned using World.spawnEntity(Location, EntityType) or World.spawn(Location, Class), usually because they require additional  information in order to spawn.*/
      isSpawnable (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEntityType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEntityType[];
   }
   /**Called immediately prior to an entity being unleashed.*/
   export class obeeEntityUnleashEvent extends obeeEntityEvent {
      constructor (entity: obeEntity, reason: obeeEUnleashReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the reason for the unleashing.*/
      getReason (): obeeEUnleashReason;
   }
   export class obeeEUnleashReason extends jlEnum<obeeEUnleashReason> {
      /**When the entity's leashholder is more than 10 blocks away*/
      static DISTANCE: obeeEUnleashReason;
      /**When the entity's leashholder has died or logged out, and so is  unleashed*/
      static HOLDER_GONE: obeeEUnleashReason;
      /**When the entity's leashholder attempts to unleash it*/
      static PLAYER_UNLEASH: obeeEUnleashReason;
      static UNKNOWN: obeeEUnleashReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeEUnleashReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeEUnleashReason[];
   }
   /**Fired when lightning strikes an entity*/
   export class cdpeeEntityZapEvent extends obeeEntityTransformEvent implements obeCancellable {
      constructor (entity: obeEntity, bolt: obeLightningStrike, replacementEntity: obeEntity);
      /**Gets the lightning bolt that is striking the entity.*/
      getBolt (): obeLightningStrike;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the entity that will replace the struck entity.*/
      getReplacementEntity (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export class obiEquipmentSlot extends jlEnum<obiEquipmentSlot> {
      static CHEST: obiEquipmentSlot;
      static FEET: obiEquipmentSlot;
      static HAND: obiEquipmentSlot;
      static HEAD: obiEquipmentSlot;
      static LEGS: obiEquipmentSlot;
      static OFF_HAND: obiEquipmentSlot;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obiEquipmentSlot;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obiEquipmentSlot[];
   }
   /**EulerAngle is used to represent 3 angles, one for each  axis (x, y, z). The angles are in radians*/
   export class obuEulerAngle extends jlObject {
      constructor (x: number, y: number, z: number);
      /**Creates a new EulerAngle which is the result of adding  the x, y, z components to this EulerAngle*/
      add (x: number, y: number, z: number): obuEulerAngle;
      equals (o: jlObject): boolean;
      /**Returns the angle on the x axis in radians*/
      getX (): number;
      /**Returns the angle on the y axis in radians*/
      getY (): number;
      /**Returns the angle on the z axis in radians*/
      getZ (): number;
      hashCode (): number;
      /**Return a EulerAngle which is the result of changing  the x axis to the passed angle*/
      setX (x: number): obuEulerAngle;
      /**Return a EulerAngle which is the result of changing  the y axis to the passed angle*/
      setY (y: number): obuEulerAngle;
      /**Return a EulerAngle which is the result of changing  the z axis to the passed angle*/
      setZ (z: number): obuEulerAngle;
      /**Creates a new EulerAngle which is the result of subtracting  the x, y, z components to this EulerAngle*/
      subtract (x: number, y: number, z: number): obuEulerAngle;
   }
   /**Represents an event.   All events require a static method named getHandlerList() which returns the same HandlerList as getHandlers().*/
   export class obeEvent extends jlObject {
      constructor ();
      constructor (isAsync: boolean);
      /**Calls the event and tests if cancelled.*/
      callEvent (): boolean;
      /**Convenience method for providing a user-friendly identifier.*/
      getEventName (): string;
      getHandlers (): obeHandlerList;
      /**Any custom event that should not by synchronized with other events must  use the specific constructor.*/
      isAsynchronous (): boolean;
   }
   export class obeEResult extends jlEnum<obeEResult> {
      /**Allow \/ Force the event.*/
      static ALLOW: obeEResult;
      /**Neither deny nor allow the event.*/
      static DEFAULT: obeEResult;
      /**Deny the event.*/
      static DENY: obeEResult;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEResult;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEResult[];
   }
   export class obeEventException extends jlException {
      constructor ();
      constructor (message: string);
      constructor (throwable: jlThrowable);
      constructor (cause: jlThrowable, message: string);
      /**If applicable, returns the Exception that triggered this Exception*/
      getCause (): jlThrowable;
   }
   /**Interface which defines the class for event call backs to plugins*/
   export interface obpEventExecutor {
      static create(m: jlrMethod, eventClass: jlClass<obeEvent>): obpEventExecutor;
      execute(listener: obeListener, event: obeEvent): void;
   }
   /**Represents an event's priority in execution*/
   export class obeEventPriority extends jlEnum<obeEventPriority> {
      /**Event call is of high importance*/
      static HIGH: obeEventPriority;
      /**Event call is critical and must have the final say in what happens  to the event*/
      static HIGHEST: obeEventPriority;
      /**Event call is of low importance*/
      static LOW: obeEventPriority;
      /**Event call is of very low importance and should be ran first, to allow  other plugins to further customise the outcome*/
      static LOWEST: obeEventPriority;
      /**Event is listened to purely for monitoring the outcome of an event.*/
      static MONITOR: obeEventPriority;
      /**Event call is neither important nor unimportant, and may be ran  normally*/
      static NORMAL: obeEventPriority;
      getSlot (): number;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeEventPriority;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeEventPriority[];
   }
   /**Represents an Evoker "Illager".*/
   export interface obeEvoker extends obeSpellcaster {
      getWololoTarget(): obeSheep;
      /**Set the sheep to be the target of the wololo spell, or null to clear.*/
      setWololoTarget(sheep: obeSheep): void;
   }
   /**Represents Evoker Fangs.*/
   export interface obeEvokerFangs extends obeEntity {
      /**Gets the LivingEntity which summoned the fangs.*/
      getOwner(): obeLivingEntity;
      /**Sets the LivingEntity which summoned the fangs.*/
      setOwner(owner: obeLivingEntity): void;
   }
   /**An ExactMatchConversationCanceller cancels a conversation if the user  enters an exact input string*/
   export class obcExactMatchConversationCanceller extends jlObject implements obcConversationCanceller {
      constructor (escapeSequence: string);
      /**Cancels a conversation based on user input.*/
      cancelBasedOnInput (context: obcConversationContext, input: string): boolean;
      /**Allows the ConversationFactory to duplicate this  ConversationCanceller when creating a new Conversation.*/
      clone (): obcConversationCanceller;
      /**Sets the conversation this ConversationCanceller can optionally cancel.*/
      setConversation (conversation: obcConversation): void;
   }
   /**Called when a ThrownExpBottle hits and releases experience.*/
   export class obeeExpBottleEvent extends obeeProjectileHitEvent {
      constructor (bottle: obeThrownExpBottle, exp: number);
      /**Returns the Entity involved in this event*/
      getEntity (): obeThrownExpBottle;
      /**This method retrieves the amount of experience to be created.*/
      getExperience (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**This method indicates if the particle effect should be shown.*/
      getShowEffect (): boolean;
      /**This method sets the amount of experience to be created.*/
      setExperience (exp: number): void;
      /**This method sets if the particle effect will be shown.*/
      setShowEffect (showEffect: boolean): void;
   }
   /**Represents an Experience Orb.*/
   export interface obeExperienceOrb extends obeEntity {
      /**Gets how much experience is contained within this orb*/
      getExperience(): number;
      /**If this experience orb was spawned in relation to another  entity, such as a player or other living entity death, or breeding,  return the source entity UUID.*/
      getSourceEntityId(): juUUID;
      /**Gets the reason that this experience orb was spawned.*/
      getSpawnReason(): obeESpawnReason;
      /**If this experience orb was triggered to be spawned by  an entity such as a player, due to events such as killing entity,  breaking blocks, smelting in a furnace, etc, this will return the UUID  of the entity that triggered this orb to drop.*/
      getTriggerEntityId(): juUUID;
      /**Sets how much experience is contained within this orb*/
      setExperience(value: number): void;
   }
   /**Reasons for why this Experience Orb was spawned*/
   export class obeESpawnReason extends jlEnum<obeESpawnReason> {
      /**Spawned by player breaking a block that gives experience points such as Diamond Ore*/
      static BLOCK_BREAK: obeESpawnReason;
      /**Spawned by player breeding animals*/
      static BREED: obeESpawnReason;
      /**Spawned by Bukkit API*/
      static CUSTOM: obeESpawnReason;
      /**Spawned by an entity dying after being damaged by a player*/
      static ENTITY_DEATH: obeESpawnReason;
      /**Spawned by a player throwing an experience points bottle*/
      static EXP_BOTTLE: obeESpawnReason;
      /**Spawned by player fishing*/
      static FISHING: obeESpawnReason;
      /**Spawned by player using a furnace*/
      static FURNACE: obeESpawnReason;
      /**Spawned by a player using a grindstone*/
      static GRINDSTONE: obeESpawnReason;
      /**Spawned by a player dying*/
      static PLAYER_DEATH: obeESpawnReason;
      /**We do not know why it was spawned*/
      static UNKNOWN: obeESpawnReason;
      /**Spawned by player trading with a villager*/
      static VILLAGER_TRADE: obeESpawnReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeESpawnReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeESpawnReason[];
   }
   /**Fired anytime the server is about to merge 2 experience orbs into one*/
   export class cdpeeExperienceOrbMergeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (mergeTarget: obeExperienceOrb, mergeSource: obeExperienceOrb);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getMergeSource (): obeExperienceOrb;
      getMergeTarget (): obeExperienceOrb;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when an entity has made a decision to explode.*/
   export class obeeExplosionPrimeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeEntity, radius: number, fire: boolean);
      constructor (explosive: obeExplosive);
      /**Gets whether this explosion will create fire or not*/
      getFire (): boolean;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the radius of the explosion*/
      getRadius (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether this explosion will create fire or not*/
      setFire (fire: boolean): void;
      /**Sets the radius of the explosion*/
      setRadius (radius: number): void;
   }
   /**A representation of an explosive entity*/
   export interface obeExplosive extends obeEntity {
      /**Return the radius or yield of this explosive's explosion*/
      getYield(): number;
      /**Return whether or not this explosive creates a fire when exploding*/
      isIncendiary(): boolean;
      /**Set whether or not this explosive's explosion causes fire*/
      setIsIncendiary(isIncendiary: boolean): void;
      /**Set the radius affected by this explosive's explosion*/
      setYield(yield: number): void;
   }
   /**Represents a Minecart with TNT inside it that can explode when triggered.*/
   export interface obemExplosiveMinecart extends obeMinecart {}
   /**'face' represents the face to which a lever or button is stuck.    This is used in conjunction with Directional to compute the  orientation of these blocks.*/
   export interface obbdFaceAttachable extends obbdBlockData {
      /**Gets the value of the 'face' property.*/
      getAttachedFace(): obbdFAttachedFace;
      /**Sets the value of the 'face' property.*/
      setAttachedFace(face: obbdFAttachedFace): void;
   }
   /**The face to which a switch type block is stuck.*/
   export class obbdFAttachedFace extends jlEnum<obbdFAttachedFace> {
      /**The switch is mounted to the ceiling and pointing dowanrds.*/
      static CEILING: obbdFAttachedFace;
      /**The switch is mounted to the floor and pointing upwards.*/
      static FLOOR: obbdFAttachedFace;
      /**The switch is mounted to the wall.*/
      static WALL: obbdFAttachedFace;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdFAttachedFace;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdFAttachedFace[];
   }
   /**Represents a falling block*/
   export interface obeFallingBlock extends obeEntity {
      /**Get the HurtEntities state of this block.*/
      canHurtEntities(): boolean;
      /**Get the data for the falling block*/
      getBlockData(): obbdBlockData;
      /**Get if the falling block will break into an item if it cannot be placed*/
      getDropItem(): boolean;
      /**Set if the falling block will break into an item if it cannot be placed*/
      setDropItem(drop: boolean): void;
      /**Set the HurtEntities state of this block.*/
      setHurtEntities(hurtEntities: boolean): void;
   }
   /**The 'moisture' level of farmland indicates how close it is to a water source  (if any).    A higher moisture level leads, to faster growth of crops on this block, but  cannot be higher than getMaximumMoisture().*/
   export interface obbdtFarmland extends obbdBlockData {
      /**Gets the maximum allowed value of the 'moisture' property.*/
      getMaximumMoisture(): number;
      /**Gets the value of the 'moisture' property.*/
      getMoisture(): number;
      /**Sets the value of the 'moisture' property.*/
      setMoisture(moisture: number): void;
   }
   export interface obbdtFence extends obbdMultipleFacing, obbdWaterlogged {}
   /**This is a base class for all File based implementations of Configuration*/
   export class obcfFileConfiguration extends obcMemoryConfiguration {
      constructor ();
      constructor (defaults: obcConfiguration);
      /**Compiles the header for this FileConfiguration and returns the  result.*/
      buildHeader (): string;
      /**Loads this FileConfiguration from the specified location.*/
      load (file: jiFile): void;
      /**Loads this FileConfiguration from the specified reader.*/
      load (reader: jiReader): void;
      /**Loads this FileConfiguration from the specified location.*/
      load (file: string): void;
      /**Loads this FileConfiguration from the specified string, as  opposed to from file.*/
      loadFromString (contents: string): void;
      /**Gets the ConfigurationOptions for this Configuration.*/
      options (): obcfFileConfigurationOptions;
      /**Saves this FileConfiguration to the specified location.*/
      save (file: jiFile): void;
      /**Saves this FileConfiguration to the specified location.*/
      save (file: string): void;
      /**Saves this FileConfiguration to a string, and returns it.*/
      saveToString (): string;
   }
   /**Various settings for controlling the input and output of a FileConfiguration*/
   export class obcfFileConfigurationOptions extends obcMemoryConfigurationOptions {
      constructor (configuration: obcMemoryConfiguration);
      /**Returns the Configuration that this object is responsible for.*/
      configuration (): obcfFileConfiguration;
      /**Sets if the Configuration should copy values from its default  Configuration directly.*/
      copyDefaults (value: boolean): obcfFileConfigurationOptions;
      /**Gets whether or not the header should be copied from a default source.*/
      copyHeader (): boolean;
      /**Sets whether or not the header should be copied from a default source.*/
      copyHeader (value: boolean): obcfFileConfigurationOptions;
      /**Gets the header that will be applied to the top of the saved output.*/
      header (): string;
      /**Sets the header that will be applied to the top of the saved output.*/
      header (value: string): obcfFileConfigurationOptions;
      /**Sets the char that will be used to separate ConfigurationSections*/
      pathSeparator (value: string): obcfFileConfigurationOptions;
   }
   /**Class containing file utilities*/
   export class obuFileUtil extends jlObject {
      constructor ();
      /**This method copies one file to another location*/
      static copy (inFile: jiFile, outFile: jiFile): boolean;
   }
   /**Fired once a profiles additional properties (such as textures) has been filled*/
   export class cdpepFillProfileEvent extends obeEvent {
      constructor (profile: cdppPlayerProfile);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPlayerProfile (): cdppPlayerProfile;
      /**Same as .getPlayerProfile().getProperties()*/
      getProperties (): juSet<cdppProfileProperty>;
   }
   /**md_5's mixtape.*/
   export interface obbdtFire extends obbdAgeable, obbdMultipleFacing {}
   /**Represents a Fireball.*/
   export interface obeFireball extends obeProjectile, obeExplosive {
      /**Retrieve the direction this fireball is heading toward*/
      getDirection(): obuVector;
      /**Fireballs fly straight and do not take setVelocity(...) well.*/
      setDirection(direction: obuVector): void;
   }
   export interface obeFirework extends obeProjectile {
      /**Cause this firework to explode at earliest opportunity, as if it has no  remaining fuse.*/
      detonate(): void;
      /**If this firework is boosting an entity, return it*/
      getBoostedEntity(): obeLivingEntity;
      /**Get a copy of the fireworks meta*/
      getFireworkMeta(): obimFireworkMeta;
      getSpawningEntity(): juUUID;
      /**Gets if the firework was shot at an angle (i.e.*/
      isShotAtAngle(): boolean;
      /**Apply the provided meta to the fireworks*/
      setFireworkMeta(meta: obimFireworkMeta): void;
      /**Sets if the firework was shot at an angle (i.e.*/
      setShotAtAngle(shotAtAngle: boolean): void;
   }
   /**Represents a single firework effect.*/
   export class obFireworkEffect extends jlObject implements obcsConfigurationSerializable {
      /**Construct a firework effect.*/
      static builder (): obFBuilder;
      static deserialize (map: juMap<string, jlObject>): obcsConfigurationSerializable;
      equals (obj: jlObject): boolean;
      /**Get the primary colors of the firework effect.*/
      getColors (): juList<obColor>;
      /**Get the fade colors of the firework effect.*/
      getFadeColors (): juList<obColor>;
      /**Get the type of the firework effect.*/
      getType (): obFType;
      /**Get whether the firework effect flickers.*/
      hasFlicker (): boolean;
      hashCode (): number;
      /**Get whether the firework effect has a trail.*/
      hasTrail (): boolean;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      toString (): string;
   }
   /**This is a builder for FireworkEffects.*/
   export class obFBuilder extends jlObject {
      /**Create a FireworkEffect from the current contents of this  builder.*/
      build (): obFireworkEffect;
      /**Set whether the firework effect should flicker.*/
      flicker (flicker: boolean): obFBuilder;
      /**Set whether the firework effect should have a trail.*/
      trail (trail: boolean): obFBuilder;
      /**Specify the type of the firework effect.*/
      with (type: obFType): obFBuilder;
      /**Add several primary colors to the firework effect.*/
      withColor (colors: jlIterable<any>): obFBuilder;
      /**Add a primary color to the firework effect.*/
      withColor (color: obColor): obFBuilder;
      /**Add several primary colors to the firework effect.*/
      withColor (...colors: obColor[]): obFBuilder;
      /**Add several fade colors to the firework effect.*/
      withFade (colors: jlIterable<any>): obFBuilder;
      /**Add a fade color to the firework effect.*/
      withFade (color: obColor): obFBuilder;
      /**Add several fade colors to the firework effect.*/
      withFade (...colors: obColor[]): obFBuilder;
      /**Add a flicker to the firework effect.*/
      withFlicker (): obFBuilder;
      /**Add a trail to the firework effect.*/
      withTrail (): obFBuilder;
   }
   /**The type or shape of the effect.*/
   export class obFType extends jlEnum<obFType> {
      /**A small ball effect.*/
      static BALL: obFType;
      /**A large ball effect.*/
      static BALL_LARGE: obFType;
      /**A burst effect.*/
      static BURST: obFType;
      /**A creeper-face effect.*/
      static CREEPER: obFType;
      /**A star-shaped effect.*/
      static STAR: obFType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obFType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obFType[];
   }
   /**Represents a meta that can store a single FireworkEffect. An example  includes Material.FIREWORK_STAR.*/
   export interface obimFireworkEffectMeta extends obimItemMeta {
      clone(): obimFireworkEffectMeta;
      /**Gets the firework effect for this meta.*/
      getEffect(): obFireworkEffect;
      /**Checks if this meta has an effect.*/
      hasEffect(): boolean;
      /**Sets the firework effect for this meta.*/
      setEffect(effect: obFireworkEffect): void;
   }
   /**Called when a firework explodes.*/
   export class obeeFireworkExplodeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeFirework);
      /**Returns the Entity involved in this event*/
      getEntity (): obeFirework;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Set the cancelled state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a Material.FIREWORK_ROCKET and its effects.*/
   export interface obimFireworkMeta extends obimItemMeta {
      /**Add another effect to this firework.*/
      addEffect(effect: obFireworkEffect): void;
      /**Add several firework effects to this firework.*/
      addEffects(effects: jlIterable<obFireworkEffect>): void;
      /**Add several effects to this firework.*/
      addEffects(...effects: obFireworkEffect[]): void;
      /**Remove all effects from this firework.*/
      clearEffects(): void;
      clone(): obimFireworkMeta;
      /**Get the effects in this firework.*/
      getEffects(): juList<obFireworkEffect>;
      /**Get the number of effects in this firework.*/
      getEffectsSize(): number;
      /**Gets the approximate height the firework will fly.*/
      getPower(): number;
      /**Get whether this firework has any effects.*/
      hasEffects(): boolean;
      /**Remove an effect from this firework.*/
      removeEffect(index: number): void;
      /**Sets the approximate power of the firework.*/
      setPower(power: number): void;
   }
   /**Represents a fish entity.*/
   export interface obeFish extends obeWaterMob {}
   /**Represents a fishing hook.*/
   export interface obeFishHook extends obeProjectile {
      /**Get whether the lure enchantment should be applied to reduce the wait  time.*/
      getApplyLure(): boolean;
      /**Get the maximum number of ticks one has to wait for a fish biting.*/
      getMaxWaitTime(): number;
      /**Get the minimum number of ticks one has to wait for a fish biting.*/
      getMinWaitTime(): number;
      /**Set whether the lure enchantment should be applied to reduce the wait  time.*/
      setApplyLure(applyLure: boolean): void;
      /**Set the maximum number of ticks one has to wait for a fish biting.*/
      setMaxWaitTime(maxWaitTime: number): void;
      /**Set the minimum number of ticks one has to wait for a fish biting.*/
      setMinWaitTime(minWaitTime: number): void;
   }
   /**A FixedMetadataValue is a special case metadata item that contains the same  value forever after initialization. Invalidating a FixedMetadataValue has  no effect.    This class extends LazyMetadataValue for historical reasons, even though it  overrides all the implementation methods. it is possible that in the future  that the inheritance hierarchy may change.*/
   export class obmFixedMetadataValue extends obmLazyMetadataValue {
      constructor (owningPlugin: obpPlugin, value: jlObject);
      /**Invalidates this metadata item, forcing it to recompute when next  accessed.*/
      invalidate (): void;
      /**Fetches the value of this metadata item.*/
      value (): jlObject;
   }
   /**FixedSetPrompt is the base class for any prompt that requires a fixed set  response from the user.*/
   export class obcFixedSetPrompt extends obcValidatingPrompt {
      constructor (...fixedSet: string[]);
      /**Utility function to create a formatted string containing all the  options declared in the constructor.*/
      formatFixedSet (): string;
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
   }
   export class obFluid extends jlEnum<obFluid> implements obKeyed {
      static FLOWING_LAVA: obFluid;
      static FLOWING_WATER: obFluid;
      static LAVA: obFluid;
      static WATER: obFluid;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obFluid;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obFluid[];
   }
   /**Determines the collision behavior when fluids get hit during ray tracing.*/
   export class obFluidCollisionMode extends jlEnum<obFluidCollisionMode> {
      /**Collide with all fluids.*/
      static ALWAYS: obFluidCollisionMode;
      /**Ignore fluids.*/
      static NEVER: obFluidCollisionMode;
      /**Only collide with source fluid blocks.*/
      static SOURCE_ONLY: obFluidCollisionMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obFluidCollisionMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obFluidCollisionMode[];
   }
   /**Called when the fluid level of a block changes due to changes in adjacent  blocks.*/
   export class obebFluidLevelChangeEvent extends obebBlockEvent implements obeCancellable {
      constructor (theBlock: obbBlock, newData: obbdBlockData);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new data of the changed block.*/
      getNewData (): obbdBlockData;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      /**Sets the new data of the changed block.*/
      setNewData (newData: obbdBlockData): void;
   }
   /**Represents a Flying Entity.*/
   export interface obeFlying extends obeMob {}
   /**Called when a human entity's food level changes*/
   export class obeeFoodLevelChangeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeHumanEntity, level: number);
      constructor (what: obeHumanEntity, level: number, item: obiItemStack);
      /**Returns the Entity involved in this event*/
      getEntity (): obeHumanEntity;
      /**Gets the resultant food level that the entity involved in this event  should be set to.*/
      getFoodLevel (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item that triggered this event, if any.*/
      getItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the resultant food level that the entity involved in this event  should be set to*/
      setFoodLevel (level: number): void;
   }
   export class obcFormattedCommandAlias extends obcCommand {
      constructor (alias: string, formatStrings: string[]);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, commandLabel: string, args: string[]): boolean;
      getTimingName (): string;
   }
   /**What does the fox sayany*/
   export interface obeFox extends obeAnimals, obeSittable {
      /**Gets the first trusted player.*/
      getFirstTrustedPlayer(): obeAnimalTamer;
      /**Gets the current type of this fox.*/
      getFoxType(): obeFType;
      /**Gets the second trusted player.*/
      getSecondTrustedPlayer(): obeAnimalTamer;
      /**Checks if this animal is crouching*/
      isCrouching(): boolean;
      /**Sets if this animal is crouching.*/
      setCrouching(crouching: boolean): void;
      /**Set the first trusted player.*/
      setFirstTrustedPlayer(player: obeAnimalTamer): void;
      /**Sets the current type of this fox.*/
      setFoxType(type: obeFType): void;
      /**Set the second trusted player.*/
      setSecondTrustedPlayer(player: obeAnimalTamer): void;
      /**Sets if this animal is sleeping.*/
      setSleeping(sleeping: boolean): void;
   }
   /**Represents the various different fox types there are.*/
   export class obeFType extends jlEnum<obeFType> {
      static RED: obeFType;
      static SNOW: obeFType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeFType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeFType[];
   }
   export class catFullServerTickHandler extends jlObject {
      abort (): void;
      /**This is simply for the Closeable interface so it can be used with try-with-resources ()*/
      close (): void;
      equals (o: jlObject): boolean;
      /**Used internally to get the actual backing Handler in the case of delegated Handlers*/
      getTimingHandler (): catTimingHandler;
      hashCode (): number;
      isEnabled (): boolean;
      isSpecial (): boolean;
      /**Starts timing the execution until Timing.stopTiming() is called.*/
      startTiming (): catTiming;
      /**Starts timing the execution until Timing.stopTiming() is called.*/
      startTimingIfSync (): catTiming;
      /**Stops timing and records the data.*/
      stopTiming (): void;
      /**Stops timing and records the data.*/
      stopTimingIfSync (): void;
   }
   export interface obbdtFurnace extends obbdDirectional, obbdLightable {}
   /**Represents a captured state of a furnace.*/
   export interface obbFurnace extends obbContainer {
      /**Get burn time.*/
      getBurnTime(): number;
      /**Gets the cook speed multiplier that this Furnace will cook  compared to vanilla.*/
      getCookSpeedMultiplier(): number;
      /**Get cook time.*/
      getCookTime(): number;
      /**Get cook time total.*/
      getCookTimeTotal(): number;
      /**Gets the inventory of the block represented by this block state.*/
      getInventory(): obiFurnaceInventory;
      /**Gets the captured inventory snapshot of this container.*/
      getSnapshotInventory(): obiFurnaceInventory;
      /**Set burn time.*/
      setBurnTime(burnTime: number): void;
      /**Sets the speed multiplier that this Furnace will cook  compared to vanilla.*/
      setCookSpeedMultiplier(multiplier: number): void;
      /**Set cook time.*/
      setCookTime(cookTime: number): void;
      /**Set cook time.*/
      setCookTimeTotal(cookTimeTotal: number): void;
   }
   /**Called when an ItemStack is successfully burned as fuel in a furnace.*/
   export class obeiFurnaceBurnEvent extends obebBlockEvent implements obeCancellable {
      constructor (furnace: obbBlock, fuel: obiItemStack, burnTime: number);
      /**Gets the burn time for this fuel*/
      getBurnTime (): number;
      /**Gets the fuel ItemStack for this event*/
      getFuel (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets whether the furnace's fuel is burning or not.*/
      isBurning (): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets whether the furnace's fuel is burning or not.*/
      setBurning (burning: boolean): void;
      /**Sets the burn time for this fuel*/
      setBurnTime (burnTime: number): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**This event is called when a player takes items out of the furnace*/
   export class obeiFurnaceExtractEvent extends obebBlockExpEvent {
      constructor (player: obePlayer, block: obbBlock, itemType: obMaterial, itemAmount: number, exp: number);
      /**Get the item count being retrieved*/
      getItemAmount (): number;
      /**Get the Material of the item being retrieved*/
      getItemType (): obMaterial;
      /**Get the player that triggered the event*/
      getPlayer (): obePlayer;
   }
   /**Interface to the inventory of a Furnace.*/
   export interface obiFurnaceInventory extends obiInventory {
      /**Get the current fuel.*/
      getFuel(): obiItemStack;
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obbFurnace;
      /**Get the current item in the result slot.*/
      getResult(): obiItemStack;
      /**Get the item currently smelting.*/
      getSmelting(): obiItemStack;
      /**Set the current fuel.*/
      setFuel(stack: obiItemStack): void;
      /**Set the current item in the result slot.*/
      setResult(stack: obiItemStack): void;
      /**Set the item currently smelting.*/
      setSmelting(stack: obiItemStack): void;
   }
   /**Represents a furnace recipe.*/
   export class obiFurnaceRecipe extends obiCookingRecipe<obiFurnaceRecipe> {
      constructor (result: obiItemStack, source: obMaterial);
      constructor (result: obiItemStack, source: obmMaterialData);
      constructor (result: obiItemStack, source: obmMaterialData, experience: number);
      constructor (result: obiItemStack, source: obMaterial, data: number);
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         input: obiRecipeChoice,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         data: number,
         experience: number,
         cookingTime: number
      );
      /**Sets the input of this cooking recipe.*/
      setInput (input: obMaterial): obiFurnaceRecipe;
      /**Sets the input of this furnace recipe.*/
      setInput (input: obmMaterialData): obiFurnaceRecipe;
      /**Sets the input of this cooking recipe.*/
      setInputChoice (input: obiRecipeChoice): obiFurnaceRecipe;
   }
   /**Called when an ItemStack is successfully smelted in a furnace.*/
   export class obeiFurnaceSmeltEvent extends obebBlockCookEvent {
      constructor (furnace: obbBlock, source: obiItemStack, result: obiItemStack);
   }
   /**Represents the various type of game modes that HumanEntitys may  have*/
   export class obGameMode extends jlEnum<obGameMode> {
      /**Adventure mode cannot break blocks without the correct tools.*/
      static ADVENTURE: obGameMode;
      /**Creative mode may fly, build instantly, become invulnerable and create  free items.*/
      static CREATIVE: obGameMode;
      /**Spectator mode cannot interact with the world in anyway and is  invisible to normal players.*/
      static SPECTATOR: obGameMode;
      /**Survival mode is the "normal" gameplay type, with no special features.*/
      static SURVIVAL: obGameMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obGameMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obGameMode[];
   }
   /**GameRules dictate certain behavior within Minecraft itself    For more information please visit the  Minecraft  Wiki*/
   export class obGameRule<T> extends jlObject {
      equals (obj: jlObject): boolean;
      /**Get a GameRule by its name.*/
      static getByName (rule: string): obGameRule<any>;
      /**Get the name of this GameRule.*/
      getName (): string;
      /**Get the type of this rule.*/
      getType (): jlClass<T>;
      toString (): string;
      /**Get an immutable collection of GameRules.*/
      static values (): obGameRule<any>[];
   }
   /**'in_wall" indicates if the fence gate is attached to a wall, and if true the  texture is lowered by a small amount to blend in better.*/
   export interface obbdtGate extends obbdDirectional, obbdOpenable, obbdPowerable {
      /**Gets the value of the 'in_wall' property.*/
      isInWall(): boolean;
      /**Sets the value of the 'in_wall' property.*/
      setInWall(inWall: boolean): void;
   }
   /**Lacking an alternative, the help system will create instances of  GenericCommandHelpTopic for each command in the server's CommandMap. You  can use this class as a base class for custom help topics, or as an example  for how to write your own.*/
   export class obhGenericCommandHelpTopic extends obhHelpTopic {
      constructor (command: obcCommand);
      /**Determines if a Player is allowed to see this help topic.*/
      canSee (sender: obcCommandSender): boolean;
   }
   /**Represents a Ghast.*/
   export interface obeGhast extends obeFlying {}
   /**Represents a Giant.*/
   export interface obeGiant extends obeMonster {}
   export interface obbdtGlassPane extends obbdMultipleFacing, obbdWaterlogged {}
   /**Represents an AI goal of an entity*/
   export interface cdpeaGoal<T extends Mob> {
      /**A unique key that identifies this type of goal.*/
      getKey(): cdpeaGoalKey<T>;
      /**Returns a list of all applicable flags for this goal.   This method is only called on construction.*/
      getTypes(): juEnumSet<cdpeaGoalType>;
      /**Checks if this goal should be activated*/
      shouldActivate(): boolean;
      /**Checks if this goal should stay active, defaults to shouldActivate()*/
      shouldStayActive(): boolean;
      /**Called when this goal gets activated*/
      start(): void;
      /**Called when this goal gets stopped*/
      stop(): void;
      /**Called each tick the goal is activated*/
      tick(): void;
   }
   /**Used to identify a Goal. Consists of a NamespacedKey and the type of mob the goal can be applied to*/
   export class cdpeaGoalKey<T extends Mob> extends jlObject {
      equals (o: jlObject): boolean;
      getEntityClass (): jlClass<T>;
      getNamespacedKey (): obNamespacedKey;
      hashCode (): number;
      static of<A extends obeMob> (entityClass: jlClass<A>, namespacedKey: obNamespacedKey): cdpeaGoalKey<A>;
      toString (): string;
   }
   /**Represents the subtype of a goal. Used by minecraft to disable certain types of goals if needed.*/
   export class cdpeaGoalType extends jlEnum<cdpeaGoalType> {
      static JUMP: cdpeaGoalType;
      static LOOK: cdpeaGoalType;
      static MOVE: cdpeaGoalType;
      static TARGET: cdpeaGoalType;
      /**Used to map vanilla goals, that are a behavior goal but don't have a type set...*/
      static UNKNOWN_BEHAVIOR: cdpeaGoalType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpeaGoalType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpeaGoalType[];
   }
   /**A mechanical creature that may harm enemies.*/
   export interface obeGolem extends obeCreature {}
   /**Represents the different types of grass.*/
   export class obGrassSpecies extends jlEnum<obGrassSpecies> {
      /**Represents the dead looking grass.*/
      static DEAD: obGrassSpecies;
      /**Represents the fern-looking grass species.*/
      static FERN_LIKE: obGrassSpecies;
      /**Represents the normal grass species.*/
      static NORMAL: obGrassSpecies;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obGrassSpecies;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obGrassSpecies[];
   }
   export interface obbdtGrindstone extends obbdDirectional, obbdFaceAttachable {}
   /**Interface to the inventory of a Grindstone.*/
   export interface obiGrindstoneInventory extends obiInventory {
      /**Gets the lower input item.*/
      getLowerItem(): obiItemStack;
      /**Gets the result.*/
      getResult(): obiItemStack;
      /**Gets the upper input item.*/
      getUpperItem(): obiItemStack;
      /**Sets the lower input item.*/
      setLowerItem(lowerItem: obiItemStack): void;
      /**Sets the result.*/
      setResult(result: obiItemStack): void;
      /**Sets the upper input item.*/
      setUpperItem(upperItem: obiItemStack): void;
   }
   /**This event is fired if server is getting queried over GS4 Query protocol   Adapted from Velocity's ProxyQueryEvent*/
   export class cdpesGS4QueryEvent extends obeEvent {
      constructor (queryType: cdpesGQueryType, querierAddress: jnInetAddress, response: cdpesGQueryResponse);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get querier address*/
      getQuerierAddress (): jnInetAddress;
      /**Get query type*/
      getQueryType (): cdpesGQueryType;
      /**Get query response*/
      getResponse (): cdpesGQueryResponse;
      /**Set query response*/
      setResponse (response: cdpesGQueryResponse): void;
      toString (): string;
   }
   export class cdpesGQueryResponse extends jlObject {
      /**Creates a new GS4QueryEvent.QueryResponse.Builder instance*/
      static builder (): cdpesGQBuilder;
      /**Get current online player count which will be used to reply to the query.*/
      getCurrentPlayers (): number;
      /**Get game version which will be used to reply to the query.*/
      getGameVersion (): string;
      /**Get server (public facing) hostname*/
      getHostname (): string;
      /**Get map name which will be used to reply to the query.*/
      getMap (): string;
      /**Get max player count which will be used to reply to the query.*/
      getMaxPlayers (): number;
      /**Get motd which will be used to reply to the query.*/
      getMotd (): string;
      /**Get collection of players which will be used to reply to the query.*/
      getPlayers (): juCollection<string>;
      /**Get list of plugins which will be used to reply to the query.*/
      getPlugins (): juCollection<cdpesGQPluginInformation>;
      /**Get server (public facing) port*/
      getPort (): number;
      /**Get server software (name and version) which will be used to reply to the query.*/
      getServerVersion (): string;
      /**Creates a new GS4QueryEvent.QueryResponse.Builder instance from data represented by this response*/
      toBuilder (): cdpesGQBuilder;
   }
   /**A builder for GS4QueryEvent.QueryResponse objects.*/
   export class cdpesGQBuilder extends jlObject {
      /**Builds new GS4QueryEvent.QueryResponse with supplied data*/
      build (): cdpesGQueryResponse;
      clearPlayers (): cdpesGQBuilder;
      clearPlugins (): cdpesGQBuilder;
      currentPlayers (currentPlayers: number): cdpesGQBuilder;
      gameVersion (gameVersion: string): cdpesGQBuilder;
      hostname (hostname: string): cdpesGQBuilder;
      map (map: string): cdpesGQBuilder;
      maxPlayers (maxPlayers: number): cdpesGQBuilder;
      motd (motd: string): cdpesGQBuilder;
      players (...players: string[]): cdpesGQBuilder;
      players (players: juCollection<string>): cdpesGQBuilder;
      plugins (...plugins: cdpesGQPluginInformation[]): cdpesGQBuilder;
      plugins (plugins: juCollection<cdpesGQPluginInformation>): cdpesGQBuilder;
      port (port: number): cdpesGQBuilder;
      serverVersion (serverVersion: string): cdpesGQBuilder;
   }
   /**Plugin information*/
   export class cdpesGQPluginInformation extends jlObject {
      constructor (name: string, version: string);
      getName (): string;
      getVersion (): string;
      static of (name: string, version: string): cdpesGQPluginInformation;
      setName (name: string): void;
      setVersion (version: string): void;
   }
   /**The type of query*/
   export class cdpesGQueryType extends jlEnum<cdpesGQueryType> {
      /**Basic query asks only a subset of information, such as motd, game type (hardcoded to*/
      static BASIC: cdpesGQueryType;
      /**Full query asks pretty much everything present on this event (only hardcoded values cannot be modified here).*/
      static FULL: cdpesGQueryType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpesGQueryType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpesGQueryType[];
   }
   export interface obeGuardian extends obeMonster {}
   /**A list of event handlers, stored per-event. Based on lahwran's fevents.*/
   export class obeHandlerList extends jlObject {
      constructor ();
      /**Bake HashMap and ArrayLists to 2d array - does nothing if not necessary*/
      bake (): void;
      /**Bake all handler lists.*/
      static bakeAll (): void;
      /**Get a list of all handler lists for every event type*/
      static getHandlerLists (): juArrayList<obeHandlerList>;
      /**Get the baked registered listeners associated with this handler list*/
      getRegisteredListeners (): obpRegisteredListener[];
      /**Get a specific plugin's registered listeners associated with this  handler list*/
      static getRegisteredListeners (plugin: obpPlugin): juArrayList<obpRegisteredListener>;
      /**Register a new listener in this handler list*/
      register (listener: obpRegisteredListener): void;
      /**Register a collection of new listeners in this handler list*/
      registerAll (listeners: juCollection<obpRegisteredListener>): void;
      /**Remove a specific listener from this handler*/
      unregister (listener: obeListener): void;
      /**Remove a specific plugin's listeners from this handler*/
      unregister (plugin: obpPlugin): void;
      /**Remove a listener from a specific order slot*/
      unregister (listener: obpRegisteredListener): void;
      /**Unregister all listeners from all handler lists.*/
      static unregisterAll (): void;
      /**Unregister a specific listener from all handler lists.*/
      static unregisterAll (listener: obeListener): void;
      /**Unregister a specific plugin's listeners from all handler lists.*/
      static unregisterAll (plugin: obpPlugin): void;
   }
   /**Represents a Hanging entity*/
   export interface obeHanging extends obeEntity, obmAttachable {
      /**Sets the direction of the hanging entity, potentially overriding rules  of placement.*/
      setFacingDirection(face: obbBlockFace, force: boolean): boolean;
   }
   /**Triggered when a hanging entity is removed by an entity*/
   export class obehHangingBreakByEntityEvent extends obehHangingBreakEvent {
      constructor (hanging: obeHanging, remover: obeEntity);
      constructor (hanging: obeHanging, remover: obeEntity, cause: obehHRemoveCause);
      /**Gets the entity that removed the hanging entity.*/
      getRemover (): obeEntity;
   }
   /**Triggered when a hanging entity is removed*/
   export class obehHangingBreakEvent extends obehHangingEvent implements obeCancellable {
      constructor (hanging: obeHanging, cause: obehHRemoveCause);
      /**Gets the cause for the hanging entity's removal*/
      getCause (): obehHRemoveCause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An enum to specify the cause of the removal*/
   export class obehHRemoveCause extends jlEnum<obehHRemoveCause> {
      /**Removed by an uncategorised cause*/
      static DEFAULT: obehHRemoveCause;
      /**Removed by an entity*/
      static ENTITY: obehHRemoveCause;
      /**Removed by an explosion*/
      static EXPLOSION: obehHRemoveCause;
      /**Removed by placing a block on it*/
      static OBSTRUCTION: obehHRemoveCause;
      /**Removed by destroying the block behind it, etc*/
      static PHYSICS: obehHRemoveCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obehHRemoveCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obehHRemoveCause[];
   }
   /**Represents a hanging entity-related event.*/
   export class obehHangingEvent extends obeEvent {
      constructor (painting: obeHanging);
      /**Gets the hanging entity involved in this event.*/
      getEntity (): obeHanging;
   }
   /**Triggered when a hanging entity is created in the world*/
   export class obehHangingPlaceEvent extends obehHangingEvent implements obeCancellable {
      constructor (hanging: obeHanging, player: obePlayer, block: obbBlock, blockFace: obbBlockFace);
      /**Returns the block that the hanging entity was placed on*/
      getBlock (): obbBlock;
      /**Returns the face of the block that the hanging entity was placed on*/
      getBlockFace (): obbBlockFace;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the player placing the hanging entity*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Further information regarding heightmaps.*/
   export class obHeightMap extends jlEnum<obHeightMap> {
      /**The highest block that blocks motion or contains a fluid.*/
      static MOTION_BLOCKING: obHeightMap;
      /**The highest block that blocks motion or contains a fluid or is in the  Tag.LEAVES.*/
      static MOTION_BLOCKING_NO_LEAVES: obHeightMap;
      /**The highest non-air block, solid block.*/
      static OCEAN_FLOOR: obHeightMap;
      /**The highest block that is neither air nor contains a fluid, for worldgen.*/
      static OCEAN_FLOOR_WG: obHeightMap;
      /**The highest non-air block.*/
      static WORLD_SURFACE: obHeightMap;
      /**The highest non-air block, for worldgen.*/
      static WORLD_SURFACE_WG: obHeightMap;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obHeightMap;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obHeightMap[];
   }
   export class obcdHelpCommand extends obcdBukkitCommand {
      constructor ();
      /**Computes the Dameraur-Levenshtein Distance between two strings.*/
      static damerauLevenshteinDistance (s1: string, s2: string): number;
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, currentAlias: string, args: string[]): boolean;
      findPossibleMatches (searchString: string): obhHelpTopic;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
   }
   /**The HelpMap tracks all help topics registered in a Bukkit server. When the  server starts up or is reloaded, help is processed and topics are added in  the following order:     General topics are loaded from the help.yml  Plugins load and optionally call addTopic()  Registered plugin commands are processed by HelpTopicFactory      objects to create topics  Topic contents are amended as directed in help.yml*/
   export interface obhHelpMap {
      /**Adds a topic to the server's help index.*/
      addTopic(topic: obhHelpTopic): void;
      /**Clears out the contents of the help index.*/
      clear(): void;
      /**Returns a help topic for a given topic name.*/
      getHelpTopic(topicName: string): obhHelpTopic;
      /**Returns a collection of all the registered help topics.*/
      getHelpTopics(): juCollection<obhHelpTopic>;
      /**Gets the list of plugins the server administrator has chosen to exclude  from the help index.*/
      getIgnoredPlugins(): juList<string>;
      /**Associates a HelpTopicFactory object with given command base  class.*/
      registerHelpTopicFactory(commandClass: jlClass<any>, factory: obhHelpTopicFactory<any>): void;
   }
   /**HelpTopic implementations are displayed to the user when the user uses the  \/help command.    Custom implementations of this class can work at two levels. A simple  implementation only needs to set the value of name,   shortText, and fullText in the constructor. This base class will  take care of the rest.    Complex implementations can be created by overriding the behavior of all  the methods in this class.*/
   export class obhHelpTopic extends jlObject {
      constructor ();
      /**Allows the server administrator to override the permission required to  see a help topic.*/
      amendCanSee (amendedPermission: string): void;
      /**Allows the server admin (or another plugin) to add or replace the  contents of a help topic.*/
      amendTopic (amendedShortText: string, amendedFullText: string): void;
      /**Developers implementing their own custom HelpTopic implementations can  use this utility method to ensure their implementations comply with the  expected behavior of the amendTopic(String, String)  method.*/
      applyAmendment (baseText: string, amendment: string): string;
      /**Determines if a Player is allowed to see this help topic.*/
      canSee (player: obcCommandSender): boolean;
      /**Returns the full description of this help topic that is displayed when  the user requests this topic's details.*/
      getFullText (forWho: obcCommandSender): string;
      /**Returns the name of this help topic.*/
      getName (): string;
      /**Returns a brief description that will be displayed in the topic index.*/
      getShortText (): string;
   }
   /**Used to impose a custom total ordering on help topics.    All topics are listed in alphabetic order, but topics that start with a  slash come after topics that don't.*/
   export class obhHelpTopicComparator extends jlObject implements juComparator<obhHelpTopic> {
      compare (lhs: obhHelpTopic, rhs: obhHelpTopic): number;
      static helpTopicComparatorInstance (): obhHelpTopicComparator;
      static topicNameComparatorInstance (): obhHTopicNameComparator;
   }
   export class obhHTopicNameComparator extends jlObject implements juComparator<jlString> {
      compare (lhs: string, rhs: string): number;
   }
   /**A HelpTopicFactory is used to create custom HelpTopic objects from  commands that inherit from a common base class or have executors that  inherit from a common base class. You can use a custom HelpTopic to change  the way all the commands in your plugin display in the help. If your plugin  implements a complex permissions system, a custom help topic may also be  appropriate.    To automatically bind your plugin's commands to your custom HelpTopic  implementation, first make sure all your commands or executors derive from  a custom base class (it doesn't have to do anything). Next implement a  custom HelpTopicFactory that accepts your custom command base class and  instantiates an instance of your custom HelpTopic from it. Finally,  register your HelpTopicFactory against your command base class using the  HelpMap.registerHelpTopicFactory(Class, HelpTopicFactory) method.    As the help system iterates over all registered commands to make help  topics, it first checks to see if there is a HelpTopicFactory registered  for the command's base class. If so, the factory is used to make a help  topic rather than a generic help topic. If no factory is found for the  command's base class and the command derives from PluginCommand, then the type of the command's executor  is inspected looking for a registered HelpTopicFactory. Finally, if no  factory is found, a generic help topic is created for the command.*/
   export interface obhHelpTopicFactory<TCommand extends Command> {
      /**This method accepts a command deriving from a custom command base class  and constructs a custom HelpTopic for it.*/
      createTopic(command: TCommand): obhHelpTopic;
   }
   /**Represents a Hoglin.*/
   export interface obeHoglin extends obeAnimals {
      /**Gets the amount of ticks until this entity will be converted to a Zoglin.*/
      getConversionTime(): number;
      /**Get whether the hoglin is able to be hunted by piglins.*/
      isAbleToBeHunted(): boolean;
      /**Get if this entity is in the process of converting to a Zoglin.*/
      isConverting(): boolean;
      /**Gets whether the hoglin is immune to zombification.*/
      isImmuneToZombification(): boolean;
      /**Sets the amount of ticks until this entity will be converted to a Zoglin.*/
      setConversionTime(time: number): void;
      /**Sets whether the hoglin is immune to zombification.*/
      setImmuneToZombification(flag: boolean): void;
      /**Sets whether the hoglin is able to be hunted by piglins.*/
      setIsAbleToBeHunted(flag: boolean): void;
   }
   /**Similar to Powerable, 'enabled' indicates whether or not the hopper  is currently activated.    Unlike most other blocks, a hopper is only enabled when it is not  receiving any power.*/
   export interface obbdtHopper extends obbdDirectional {
      /**Gets the value of the 'enabled' property.*/
      isEnabled(): boolean;
      /**Sets the value of the 'enabled' property.*/
      setEnabled(enabled: boolean): void;
   }
   /**Represents a captured state of a hopper.*/
   export interface obbHopper extends obbContainer, cdplLootableBlockInventory {}
   /**Represents a Minecart with a Hopper inside it*/
   export interface obemHopperMinecart extends obeMinecart, obiInventoryHolder, cdplLootableEntityInventory {
      /**Checks whether or not this Minecart will pick up  items into its inventory.*/
      isEnabled(): boolean;
      /**Sets whether this Minecart will pick up items.*/
      setEnabled(enabled: boolean): void;
   }
   /**Represents a Horse.*/
   export interface obeHorse extends obeAbstractHorse {
      /**Gets the horse's color.*/
      getColor(): obeHColor;
      /**Get the object's inventory.*/
      getInventory(): obiHorseInventory;
      /**Gets the horse's style.*/
      getStyle(): obeHStyle;
      /**Sets the horse's color.*/
      setColor(color: obeHColor): void;
      /**Sets the style of this horse.*/
      setStyle(style: obeHStyle): void;
   }
   /**Represents the base color that the horse has.*/
   export class obeHColor extends jlEnum<obeHColor> {
      /**Pitch black*/
      static BLACK: obeHColor;
      /**Light brown*/
      static BROWN: obeHColor;
      /**Chestnut*/
      static CHESTNUT: obeHColor;
      /**Very light brown*/
      static CREAMY: obeHColor;
      /**Dark brown*/
      static DARK_BROWN: obeHColor;
      /**Gray*/
      static GRAY: obeHColor;
      /**Snow white*/
      static WHITE: obeHColor;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeHColor;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeHColor[];
   }
   /**Represents the style, or markings, that the horse has.*/
   export class obeHStyle extends jlEnum<obeHStyle> {
      /**Small black dots*/
      static BLACK_DOTS: obeHStyle;
      /**No markings*/
      static NONE: obeHStyle;
      /**White socks or stripes*/
      static WHITE: obeHStyle;
      /**Round white dots*/
      static WHITE_DOTS: obeHStyle;
      /**Milky splotches*/
      static WHITEFIELD: obeHStyle;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeHStyle;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeHStyle[];
   }
   /**An interface to the inventory of a Horse.*/
   export interface obiHorseInventory extends obiAbstractHorseInventory, obiArmoredHorseInventory {}
   /**Called when a horse jumps.*/
   export class obeeHorseJumpEvent extends obeeEntityEvent implements obeCancellable {
      constructor (horse: obeAbstractHorse, power: number);
      /**Returns the Entity involved in this event*/
      getEntity (): obeAbstractHorse;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the power of the jump.*/
      getPower (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
   }
   /**Represents a human entity, such as an NPC or a player*/
   export interface obeHumanEntity extends obeLivingEntity, obeAnimalTamer, obiInventoryHolder {
      /**Force-closes the currently open inventory view for this player, if any.*/
      closeInventory(): void;
      /**Force-closes the currently open inventory view for this player, if any.*/
      closeInventory(reason: obeiIReason): void;
      /**Discover a recipe for this player such that it has not already been  discovered.*/
      discoverRecipe(recipe: obNamespacedKey): boolean;
      /**Discover a collection of recipes for this player such that they have not  already been discovered.*/
      discoverRecipes(recipes: juCollection<obNamespacedKey>): number;
      /**Make the entity drop the item in their hand.*/
      dropItem(dropAll: boolean): boolean;
      /**Gets the current cooldown for a player's attack.*/
      getAttackCooldown(): number;
      /**Gets the location of the bed the player is currently sleeping in*/
      getBedLocation(): obLocation;
      /**Get the cooldown time in ticks remaining for the specified material.*/
      getCooldown(material: obMaterial): number;
      /**Get an immutable set of recipes this entity has discovered.*/
      getDiscoveredRecipes(): juSet<obNamespacedKey>;
      /**Get the player's EnderChest inventory*/
      getEnderChest(): obiInventory;
      /**Get the total amount of experience required for the player to level*/
      getExpToLevel(): number;
      /**Gets this human's current GameMode*/
      getGameMode(): obGameMode;
      /**Get the player's inventory.*/
      getInventory(): obiPlayerInventory;
      /**Returns the ItemStack currently on your cursor, can be empty.*/
      getItemOnCursor(): obiItemStack;
      /**Gets the player's selected main hand*/
      getMainHand(): obiMainHand;
      /**Returns the name of this player*/
      getName(): string;
      /**Gets the inventory view the player is currently viewing.*/
      getOpenInventory(): obiInventoryView;
      /**Gets the Location of the player's bed, null if they have not slept  in one.*/
      getPotentialBedLocation(): obLocation;
      /**Get the sleep ticks of the player.*/
      getSleepTicks(): number;
      /**Check whether a cooldown is active on the specified material.*/
      hasCooldown(material: obMaterial): boolean;
      /**Check whether or not this entity has discovered the specified recipe.*/
      hasDiscoveredRecipe(recipe: obNamespacedKey): boolean;
      /**Check if the player is currently blocking (ie with a shield).*/
      isBlocking(): boolean;
      /**Check if the player currently has their hand raised (ie about to begin  blocking).*/
      isHandRaised(): boolean;
      /**Opens an empty anvil inventory window with the player's inventory  on the bottom.*/
      openAnvil(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an empty cartography table inventory window with the player's inventory  on the bottom.*/
      openCartographyTable(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an empty enchanting inventory window with the player's inventory  on the bottom.*/
      openEnchanting(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an empty grindstone inventory window with the player's inventory  on the bottom.*/
      openGrindstone(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an inventory window with the specified inventory on the top and  the player's inventory on the bottom.*/
      openInventory(inventory: obiInventory): obiInventoryView;
      /**Opens an inventory window to the specified inventory view.*/
      openInventory(inventory: obiInventoryView): void;
      /**Opens an empty loom inventory window with the player's inventory  on the bottom.*/
      openLoom(location: obLocation, force: boolean): obiInventoryView;
      /**Starts a trade between the player and the villager.*/
      openMerchant(trader: obeVillager, force: boolean): obiInventoryView;
      /**Starts a trade between the player and the merchant.*/
      openMerchant(merchant: obiMerchant, force: boolean): obiInventoryView;
      /**Opens an editor window for the specified sign*/
      openSign(sign: obbSign): void;
      /**Opens an empty smithing table inventory window with the player's inventory  on the bottom.*/
      openSmithingTable(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an empty stonecutter inventory window with the player's inventory  on the bottom.*/
      openStonecutter(location: obLocation, force: boolean): obiInventoryView;
      /**Opens an empty workbench inventory window with the player's inventory  on the bottom.*/
      openWorkbench(location: obLocation, force: boolean): obiInventoryView;
      /**If there is an Entity on this entities left shoulder, it will be released to the world and returned.*/
      releaseLeftShoulderEntity(): obeEntity;
      /**If there is an Entity on this entities left shoulder, it will be released to the world and returned.*/
      releaseRightShoulderEntity(): obeEntity;
      /**Set a cooldown on the specified material for a certain amount of ticks.*/
      setCooldown(material: obMaterial, ticks: number): void;
      /**Sets this human's current GameMode*/
      setGameMode(mode: obGameMode): void;
      /**Sets the item to the given ItemStack, this will replace whatever the  user was moving.*/
      setItemOnCursor(item: obiItemStack): void;
      /**If the player currently has an inventory window open, this method will  set a property of that window, such as the state of a progress bar.*/
      setWindowProperty(prop: obiIProperty, value: number): boolean;
      /**Attempts to make the entity sleep at the given location.*/
      sleep(location: obLocation, force: boolean): boolean;
      /**Undiscover a recipe for this player such that it has already been  discovered.*/
      undiscoverRecipe(recipe: obNamespacedKey): boolean;
      /**Undiscover a collection of recipes for this player such that they have  already been discovered.*/
      undiscoverRecipes(recipes: juCollection<obNamespacedKey>): number;
      /**Causes the player to wakeup if they are currently sleeping.*/
      wakeup(setSpawnLocation: boolean): void;
   }
   /**Represents a Husk - variant of Zombie.*/
   export interface obeHusk extends obeZombie {
      /**Gets the amount of ticks until this entity will be converted to a Zombie  as a result of being underwater.*/
      getConversionTime(): number;
      /**Get if this entity is in the process of converting to a Zombie as a  result of being underwater.*/
      isConverting(): boolean;
      /**Sets the amount of ticks until this entity will be converted to a Zombie  as a result of being underwater.*/
      setConversionTime(time: number): void;
   }
   /**Represents a type of "Illager".*/
   export interface obeIllager extends obeRaider {}
   /**Thrown when a plugin attempts to interact with the server when it is not  enabled*/
   export class obpIllegalPluginAccessException extends jlRuntimeException {
      constructor ();
      constructor (msg: string);
   }
   /**Represents an Illusioner "Illager".*/
   export interface obeIllusioner extends obeSpellcaster, cdpeRangedEntity {}
   /**An InactivityConversationCanceller will cancel a Conversation after  a period of inactivity by the user.*/
   export class obcInactivityConversationCanceller extends jlObject implements obcConversationCanceller {
      constructor (plugin: obpPlugin, timeoutSeconds: number);
      /**Cancels a conversation based on user input.*/
      cancelBasedOnInput (context: obcConversationContext, input: string): boolean;
      /**Subclasses of InactivityConversationCanceller can override this method  to take additional actions when the inactivity timer abandons the  conversation.*/
      cancelling (conversation: obcConversation): void;
      /**Allows the ConversationFactory to duplicate this  ConversationCanceller when creating a new Conversation.*/
      clone (): obcConversationCanceller;
      /**Sets the conversation this ConversationCanceller can optionally cancel.*/
      setConversation (conversation: obcConversation): void;
   }
   /**This help topic generates a list of other help topics. This class is useful  for adding your own index help topics. To enforce a particular order, use a  sorted collection.    If a preamble is provided to the constructor, that text will be displayed  before the first item in the index.*/
   export class obhIndexHelpTopic extends obhHelpTopic {
      constructor (name: string, shortText: string, permission: string, topics: juCollection<obhHelpTopic>);
      constructor (
         name: string,
         shortText: string,
         permission: string,
         topics: juCollection<obhHelpTopic>,
         preamble: string
      );
      /**Allows the server administrator to override the permission required to  see a help topic.*/
      amendCanSee (amendedPermission: string): void;
      /**Builds individual lines in the index topic.*/
      buildIndexLine (sender: obcCommandSender, topic: obhHelpTopic): string;
      /**Builds the topic preamble.*/
      buildPreamble (sender: obcCommandSender): string;
      /**Determines if a Player is allowed to see this help topic.*/
      canSee (sender: obcCommandSender): boolean;
      /**Returns the full description of this help topic that is displayed when  the user requests this topic's details.*/
      getFullText (sender: obcCommandSender): string;
      /**Sets the contents of the internal allTopics collection.*/
      setTopicsCollection (topics: juCollection<obhHelpTopic>): void;
   }
   export class obInstrument extends jlEnum<obInstrument> {
      /**Banjo is normally played when a note block is on top of a hay block.*/
      static BANJO: obInstrument;
      /**Bass drum is normally played when a note block is on top of a  stone-like block.*/
      static BASS_DRUM: obInstrument;
      /**Bass guitar is normally played when a note block is on top of a wooden  block.*/
      static BASS_GUITAR: obInstrument;
      /**Bell is normally played when a note block is on top of a gold block.*/
      static BELL: obInstrument;
      /**Bit is normally played when a note block is on top of a emerald block.*/
      static BIT: obInstrument;
      /**Chime is normally played when a note block is on top of a packed ice  block.*/
      static CHIME: obInstrument;
      /**Cow Bell is normally played when a note block is on top of a soul sand block.*/
      static COW_BELL: obInstrument;
      /**Didgeridoo is normally played when a note block is on top of a pumpkin block.*/
      static DIDGERIDOO: obInstrument;
      /**Flute is normally played when a note block is on top of a clay block.*/
      static FLUTE: obInstrument;
      /**Guitar is normally played when a note block is on top of a woolen block.*/
      static GUITAR: obInstrument;
      /**Iron Xylophone is normally played when a note block is on top of a iron block.*/
      static IRON_XYLOPHONE: obInstrument;
      /**Piano is the standard instrument for a note block.*/
      static PIANO: obInstrument;
      /**Pling is normally played when a note block is on top of a glowstone block.*/
      static PLING: obInstrument;
      /**Snare drum is normally played when a note block is on top of a sandy  block.*/
      static SNARE_DRUM: obInstrument;
      /**Sticks are normally played when a note block is on top of a glass  block.*/
      static STICKS: obInstrument;
      /**Xylophone is normally played when a note block is on top of a bone block.*/
      static XYLOPHONE: obInstrument;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obInstrument;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obInstrument[];
   }
   /**Exception thrown when attempting to load an invalid Configuration*/
   export class obcInvalidConfigurationException extends jlException {
      constructor ();
      constructor (msg: string);
      constructor (msg: string, cause: jlThrowable);
      constructor (cause: jlThrowable);
   }
   /**Thrown when attempting to load an invalid PluginDescriptionFile*/
   export class obpInvalidDescriptionException extends jlException {
      constructor ();
      constructor (message: string);
      constructor (cause: jlThrowable);
      constructor (cause: jlThrowable, message: string);
   }
   /**Thrown when attempting to load an invalid Plugin file*/
   export class obpInvalidPluginException extends jlException {
      constructor ();
      constructor (message: string);
      constructor (message: string, cause: jlThrowable);
      constructor (cause: jlThrowable);
   }
   /**Interface to the various inventories. Behavior relating to Material.AIR is unspecified.     Note that whilst iterator() deals with the entire inventory, add  \/ contains \/ remove methods deal only with the storage contents.    Consider using getContents() and getStorageContents() for  specific iteration.*/
   export interface obiInventory extends jlIterable<obiItemStack> {
      /**Stores the given ItemStacks in the inventory.*/
      addItem(...items: obiItemStack[]): juHashMap<jlInteger, obiItemStack>;
      /**Finds all slots in the inventory containing any ItemStacks with the  given ItemStack.*/
      all(item: obiItemStack): juHashMap<jlInteger, obiItemStack>;
      /**Returns a HashMap with all slots and ItemStacks in the inventory with  the given Material.*/
      all(material: obMaterial): juHashMap<jlInteger, obiItemStack>;
      /**Clears out the whole Inventory.*/
      clear(): void;
      /**Clears out a particular slot in the index.*/
      clear(index: number): void;
      /**Checks if the inventory contains any ItemStacks matching the given  ItemStack.*/
      contains(item: obiItemStack): boolean;
      /**Checks if the inventory contains at least the minimum amount specified  of exactly matching ItemStacks.*/
      contains(item: obiItemStack, amount: number): boolean;
      /**Checks if the inventory contains any ItemStacks with the given  material.*/
      contains(material: obMaterial): boolean;
      /**Checks if the inventory contains any ItemStacks with the given  material, adding to at least the minimum amount specified.*/
      contains(material: obMaterial, amount: number): boolean;
      /**Checks if the inventory contains ItemStacks matching the given  ItemStack whose amounts sum to at least the minimum amount specified.*/
      containsAtLeast(item: obiItemStack, amount: number): boolean;
      /**Returns the first slot in the inventory containing an ItemStack with  the given stack.*/
      first(item: obiItemStack): number;
      /**Finds the first slot in the inventory containing an ItemStack with the  given material*/
      first(material: obMaterial): number;
      /**Returns the first empty Slot.*/
      firstEmpty(): number;
      /**Returns all ItemStacks from the inventory*/
      getContents(): obiItemStack[];
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obiInventoryHolder;
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(useSnapshot: boolean): obiInventoryHolder;
      /**Returns the ItemStack found in the slot at the given index*/
      getItem(index: number): obiItemStack;
      /**Get the location of the block or entity which corresponds to this inventory.*/
      getLocation(): obLocation;
      /**Returns the maximum stack size for an ItemStack in this inventory.*/
      getMaxStackSize(): number;
      /**Returns the size of the inventory*/
      getSize(): number;
      /**Return the contents from the section of the inventory where items can  reasonably be expected to be stored.*/
      getStorageContents(): obiItemStack[];
      /**Returns what type of inventory this is.*/
      getType(): obeiInventoryType;
      /**Gets a list of players viewing the inventory.*/
      getViewers(): juList<obeHumanEntity>;
      /**Check whether or not this inventory is empty.*/
      isEmpty(): boolean;
      iterator(): juListIterator<obiItemStack>;
      /**Returns an iterator starting at the given index.*/
      iterator(index: number): juListIterator<obiItemStack>;
      /**Removes all stacks in the inventory matching the given stack.*/
      remove(item: obiItemStack): void;
      /**Removes all stacks in the inventory matching the given material.*/
      remove(material: obMaterial): void;
      /**Removes the given ItemStacks from the inventory.*/
      removeItem(...items: obiItemStack[]): juHashMap<jlInteger, obiItemStack>;
      /**Searches all possible inventory slots in order to remove the given ItemStacks.*/
      removeItemAnySlot(...items: obiItemStack[]): juHashMap<jlInteger, obiItemStack>;
      /**Completely replaces the inventory's contents.*/
      setContents(items: obiItemStack[]): void;
      /**Stores the ItemStack at the given index of the inventory.*/
      setItem(index: number, item: obiItemStack): void;
      /**This method allows you to change the maximum stack size for an  inventory.*/
      setMaxStackSize(size: number): void;
      /**Put the given ItemStacks into the storage slots*/
      setStorageContents(items: obiItemStack[]): void;
   }
   /**An estimation of what the result will be.*/
   export class obeiInventoryAction extends jlEnum<obeiInventoryAction> {
      /**A max-size stack of the clicked item is put on the cursor.*/
      static CLONE_STACK: obeiInventoryAction;
      /**The inventory is searched for the same material, and they are put on  the cursor up to Material.getMaxStackSize().*/
      static COLLECT_TO_CURSOR: obeiInventoryAction;
      /**The entire cursor item is dropped.*/
      static DROP_ALL_CURSOR: obeiInventoryAction;
      /**The entire clicked slot is dropped.*/
      static DROP_ALL_SLOT: obeiInventoryAction;
      /**One item is dropped from the cursor.*/
      static DROP_ONE_CURSOR: obeiInventoryAction;
      /**One item is dropped from the clicked slot.*/
      static DROP_ONE_SLOT: obeiInventoryAction;
      /**The clicked item is moved to the hotbar, and the item currently there  is re-added to the player's inventory.*/
      static HOTBAR_MOVE_AND_READD: obeiInventoryAction;
      /**The clicked slot and the picked hotbar slot are swapped.*/
      static HOTBAR_SWAP: obeiInventoryAction;
      /**The item is moved to the opposite inventory if a space is found.*/
      static MOVE_TO_OTHER_INVENTORY: obeiInventoryAction;
      /**Nothing will happen from the click.*/
      static NOTHING: obeiInventoryAction;
      /**All of the items on the clicked slot are moved to the cursor.*/
      static PICKUP_ALL: obeiInventoryAction;
      /**Half of the items on the clicked slot are moved to the cursor.*/
      static PICKUP_HALF: obeiInventoryAction;
      /**One of the items on the clicked slot are moved to the cursor.*/
      static PICKUP_ONE: obeiInventoryAction;
      /**Some of the items on the clicked slot are moved to the cursor.*/
      static PICKUP_SOME: obeiInventoryAction;
      /**All of the items on the cursor are moved to the clicked slot.*/
      static PLACE_ALL: obeiInventoryAction;
      /**A single item from the cursor is moved to the clicked slot.*/
      static PLACE_ONE: obeiInventoryAction;
      /**Some of the items from the cursor are moved to the clicked slot  (usually up to the max stack size).*/
      static PLACE_SOME: obeiInventoryAction;
      /**The clicked item and the cursor are exchanged.*/
      static SWAP_WITH_CURSOR: obeiInventoryAction;
      /**An unrecognized ClickType.*/
      static UNKNOWN: obeiInventoryAction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiInventoryAction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiInventoryAction[];
   }
   /**This event is called when a player clicks in an inventory.    Because InventoryClickEvent occurs within a modification of the Inventory,  not all Inventory related methods are safe to use.    The following should never be invoked by an EventHandler for  InventoryClickEvent using the HumanEntity or InventoryView associated with  this event:    HumanEntity.closeInventory()  HumanEntity.openInventory(Inventory)  HumanEntity.openWorkbench(Location, boolean)  HumanEntity.openEnchanting(Location, boolean)  InventoryView.close()    To invoke one of these methods, schedule a task using  BukkitScheduler.runTask(Plugin, Runnable), which will run the task  on the next tick. Also be aware that this is not an exhaustive list, and  other methods could potentially create issues as well.    Assuming the EntityHuman associated with this event is an instance of a  Player, manipulating the MaxStackSize or contents of an Inventory will  require an Invocation of Player.updateInventory().    Modifications to slots that are modified by the results of this  InventoryClickEvent can be overwritten. To change these slots, this event  should be cancelled and all desired changes to the inventory applied.  Alternatively, scheduling a task using BukkitScheduler.runTask(  Plugin, Runnable), which would execute the task on the next tick, would  work as well.*/
   export class obeiInventoryClickEvent extends obeiInventoryInteractEvent {
      constructor (
         view: obiInventoryView,
         type: obeiISlotType,
         slot: number,
         click: obeiClickType,
         action: obeiInventoryAction
      );
      constructor (
         view: obiInventoryView,
         type: obeiISlotType,
         slot: number,
         click: obeiClickType,
         action: obeiInventoryAction,
         key: number
      );
      /**Gets the InventoryAction that triggered this event.*/
      getAction (): obeiInventoryAction;
      /**Gets the ClickType for this event.*/
      getClick (): obeiClickType;
      /**Gets the inventory corresponding to the clicked slot.*/
      getClickedInventory (): obiInventory;
      /**Gets the ItemStack currently in the clicked slot.*/
      getCurrentItem (): obiItemStack;
      /**Gets the current ItemStack on the cursor.*/
      getCursor (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**If the ClickType is NUMBER_KEY, this method will return the index of  the pressed key (0-8).*/
      getHotbarButton (): number;
      /**The raw slot number clicked, ready for passing to #getItem(int) This slot number is unique for the view.*/
      getRawSlot (): number;
      /**The slot number that was clicked, ready for passing to  Inventory.getItem(int).*/
      getSlot (): number;
      /**Gets the type of slot that was clicked.*/
      getSlotType (): obeiISlotType;
      /**Gets whether or not the ClickType for this event represents a left  click.*/
      isLeftClick (): boolean;
      /**Gets whether or not the ClickType for this event represents a right  click.*/
      isRightClick (): boolean;
      /**Gets whether the ClickType for this event indicates that the key was  pressed down when the click was made.*/
      isShiftClick (): boolean;
      /**Sets the ItemStack currently in the clicked slot.*/
      setCurrentItem (stack: obiItemStack): void;
   }
   /**Represents a player related inventory event*/
   export class obeiInventoryCloseEvent extends obeiInventoryEvent {
      constructor (transaction: obiInventoryView);
      constructor (transaction: obiInventoryView, reason: obeiIReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the player involved in this event*/
      getPlayer (): obeHumanEntity;
      getReason (): obeiIReason;
   }
   export class obeiIReason extends jlEnum<obeiIReason> {
      /**Player is no longer permitted to use this inventory*/
      static CANT_USE: obeiIReason;
      /**The player died*/
      static DEATH: obeiIReason;
      /**Closed due to disconnect*/
      static DISCONNECT: obeiIReason;
      /**Opening new inventory instead*/
      static OPEN_NEW: obeiIReason;
      /**Closed*/
      static PLAYER: obeiIReason;
      /**Closed by Bukkit API*/
      static PLUGIN: obeiIReason;
      /**Player is teleporting*/
      static TELEPORT: obeiIReason;
      /**Unknown reason*/
      static UNKNOWN: obeiIReason;
      /**The chunk the inventory was in was unloaded*/
      static UNLOADED: obeiIReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiIReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiIReason[];
   }
   /**This event is called when a player in creative mode puts down or picks up  an item in their inventory \/ hotbar and when they drop items from their  Inventory while in creative mode.*/
   export class obeiInventoryCreativeEvent extends obeiInventoryClickEvent {
      constructor (what: obiInventoryView, type: obeiISlotType, slot: number, newItem: obiItemStack);
      /**Gets the current ItemStack on the cursor.*/
      getCursor (): obiItemStack;
      /**Sets the item on the cursor.*/
      setCursor (item: obiItemStack): void;
   }
   /**This event is called when the player drags an item in their cursor across  the inventory. The ItemStack is distributed across the slots the  HumanEntity dragged over. The method of distribution is described by the  DragType returned by getType().    Canceling this event will result in none of the changes described in  getNewItems() being applied to the Inventory.    Because InventoryDragEvent occurs within a modification of the Inventory,  not all Inventory related methods are safe to use.    The following should never be invoked by an EventHandler for  InventoryDragEvent using the HumanEntity or InventoryView associated with  this event.    HumanEntity.closeInventory()  HumanEntity.openInventory(Inventory)  HumanEntity.openWorkbench(Location, boolean)  HumanEntity.openEnchanting(Location, boolean)  InventoryView.close()    To invoke one of these methods, schedule a task using  BukkitScheduler.runTask(Plugin, Runnable), which will run the task  on the next tick.  Also be aware that this is not an exhaustive list, and  other methods could potentially create issues as well.    Assuming the EntityHuman associated with this event is an instance of a  Player, manipulating the MaxStackSize or contents of an Inventory will  require an Invocation of Player.updateInventory().    Any modifications to slots that are modified by the results of this  InventoryDragEvent will be overwritten. To change these slots, this event  should be cancelled and the changes applied. Alternatively, scheduling a  task using BukkitScheduler.runTask(Plugin, Runnable), which would  execute the task on the next tick, would work as well.*/
   export class obeiInventoryDragEvent extends obeiInventoryInteractEvent {
      constructor (
         what: obiInventoryView,
         newCursor: obiItemStack,
         oldCursor: obiItemStack,
         right: boolean,
         slots: juMap<jlInteger, obiItemStack>
      );
      /**Gets the result cursor after the drag is done.*/
      getCursor (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the slots to be changed in this drag.*/
      getInventorySlots (): juSet<jlInteger>;
      /**Gets all items to be added to the inventory in this drag.*/
      getNewItems (): juMap<jlInteger, obiItemStack>;
      /**Gets an ItemStack representing the cursor prior to any modifications  as a result of this drag.*/
      getOldCursor (): obiItemStack;
      /**Gets the raw slot ids to be changed in this drag.*/
      getRawSlots (): juSet<jlInteger>;
      /**Gets the DragType that describes the behavior of ItemStacks placed  after this InventoryDragEvent.*/
      getType (): obeiDragType;
      /**Sets the result cursor after the drag is done.*/
      setCursor (newCursor: obiItemStack): void;
   }
   /**Represents a player related inventory event*/
   export class obeiInventoryEvent extends obeEvent {
      constructor (transaction: obiInventoryView);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiInventory;
      /**Gets the view object itself*/
      getView (): obiInventoryView;
      /**Gets the list of players viewing the primary (upper) inventory involved  in this event*/
      getViewers (): juList<obeHumanEntity>;
   }
   export interface obiInventoryHolder {
      /**Get the object's inventory.*/
      getInventory(): obiInventory;
   }
   /**An abstract base class for events that describe an interaction between a  HumanEntity and the contents of an Inventory.*/
   export class obeiInventoryInteractEvent extends obeiInventoryEvent implements obeCancellable {
      constructor (transaction: obiInventoryView);
      /**Gets the Event.Result of this event.*/
      getResult (): obeEResult;
      /**Gets the player who performed the click.*/
      getWhoClicked (): obeHumanEntity;
      /**Gets whether or not this event is cancelled.*/
      isCancelled (): boolean;
      /**Proxy method to setResult(org.bukkit.event.Event.Result) for the Cancellable  interface.*/
      setCancelled (toCancel: boolean): void;
      /**Sets the result of this event.*/
      setResult (newResult: obeEResult): void;
   }
   /**Called when some entity or block (e.g. hopper) tries to move items directly  from one inventory to another.    When this event is called, the initiator may already have removed the item  from the source inventory and is ready to move it into the destination  inventory.    If this event is cancelled, the items will be returned to the source  inventory, if needed.    If this event is not cancelled, the initiator will try to put the ItemStack  into the destination inventory. If this is not possible and the ItemStack  has not been modified, the source inventory slot will be restored to its  former state. Otherwise any additional items will be discarded.*/
   export class obeiInventoryMoveItemEvent extends obeEvent implements obeCancellable {
      constructor (
         sourceInventory: obiInventory,
         itemStack: obiItemStack,
         destinationInventory: obiInventory,
         didSourceInitiate: boolean
      );
      /**Gets the Inventory that the ItemStack is being put into*/
      getDestination (): obiInventory;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Inventory that initiated the transfer.*/
      getInitiator (): obiInventory;
      /**Gets the ItemStack being moved; if modified, the original item will not  be removed from the source inventory.*/
      getItem (): obiItemStack;
      /**Gets the Inventory that the ItemStack is being taken from*/
      getSource (): obiInventory;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the ItemStack being moved; if this is different from the original  ItemStack, the original item will not be removed from the source  inventory.*/
      setItem (itemStack: obiItemStack): void;
   }
   /**Represents a player related inventory event*/
   export class obeiInventoryOpenEvent extends obeiInventoryEvent implements obeCancellable {
      constructor (transaction: obiInventoryView);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the player involved in this event*/
      getPlayer (): obeHumanEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a hopper or hopper minecart picks up a dropped item.*/
   export class obeiInventoryPickupItemEvent extends obeEvent implements obeCancellable {
      constructor (inventory: obiInventory, item: obeItem);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Inventory that picked up the item*/
      getInventory (): obiInventory;
      /**Gets the Item entity that was picked up*/
      getItem (): obeItem;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents the different kinds of inventories available in Bukkit.    Only InventoryTypes marked isCreatable() can be created.    The current list of inventories that cannot be created via  Bukkit.createInventory(org.bukkit.inventory.InventoryHolder, org.bukkit.event.inventory.InventoryType) are:        CREATIVE, CRAFTING and      MERCHANT     See Bukkit.createInventory(org.bukkit.inventory.InventoryHolder, org.bukkit.event.inventory.InventoryType) for more information.*/
   export class obeiInventoryType extends jlEnum<obeiInventoryType> {
      /**An anvil inventory, with 2 CRAFTING slots and 1 RESULT slot*/
      static ANVIL: obeiInventoryType;
      /**A barrel box inventory, with 27 slots of type CONTAINER.*/
      static BARREL: obeiInventoryType;
      /**A beacon inventory, with 1 CRAFTING slot*/
      static BEACON: obeiInventoryType;
      /**A blast furnace inventory, with a RESULT slot, a CRAFTING slot, and a  FUEL slot.*/
      static BLAST_FURNACE: obeiInventoryType;
      /**A brewing stand inventory, with one FUEL slot and four CRAFTING slots.*/
      static BREWING: obeiInventoryType;
      /**Cartography inventory with 2 CRAFTING slots, and 1 RESULT slot.*/
      static CARTOGRAPHY: obeiInventoryType;
      /**A chest inventory, with 0, 9, 18, 27, 36, 45, or 54 slots of type  CONTAINER.*/
      static CHEST: obeiInventoryType;
      /**A player's crafting inventory, with 4 CRAFTING slots and a RESULT slot.*/
      static CRAFTING: obeiInventoryType;
      /**The creative mode inventory, with only 9 QUICKBAR slots and nothing  else.*/
      static CREATIVE: obeiInventoryType;
      /**A dispenser inventory, with 9 slots of type CONTAINER.*/
      static DISPENSER: obeiInventoryType;
      /**A dropper inventory, with 9 slots of type CONTAINER.*/
      static DROPPER: obeiInventoryType;
      /**An enchantment table inventory, with two CRAFTING slots and three  enchanting buttons.*/
      static ENCHANTING: obeiInventoryType;
      /**The ender chest inventory, with 27 slots.*/
      static ENDER_CHEST: obeiInventoryType;
      /**A furnace inventory, with a RESULT slot, a CRAFTING slot, and a FUEL  slot.*/
      static FURNACE: obeiInventoryType;
      /**Grindstone inventory with 2 CRAFTING slots, and 1 RESULT slot.*/
      static GRINDSTONE: obeiInventoryType;
      /**A hopper inventory, with 5 slots of type CONTAINER.*/
      static HOPPER: obeiInventoryType;
      /**A lectern inventory, with 1 BOOK slot.*/
      static LECTERN: obeiInventoryType;
      /**Loom inventory, with 3 CRAFTING slots, and 1 RESULT slot.*/
      static LOOM: obeiInventoryType;
      /**The merchant inventory, with 2 CRAFTING slots, and 1 RESULT slot.*/
      static MERCHANT: obeiInventoryType;
      /**A player's inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, 4 ARMOR  slots and 1 offhand slot.*/
      static PLAYER: obeiInventoryType;
      /**A shulker box inventory, with 27 slots of type CONTAINER.*/
      static SHULKER_BOX: obeiInventoryType;
      /**A smithing inventory, with 2 CRAFTING slots and 1 RESULT slot*/
      static SMITHING: obeiInventoryType;
      /**A smoker inventory, with a RESULT slot, a CRAFTING slot, and a FUEL slot.*/
      static SMOKER: obeiInventoryType;
      /**Stonecutter inventory with 1 CRAFTING slot, and 1 RESULT slot.*/
      static STONECUTTER: obeiInventoryType;
      /**A workbench inventory, with 9 CRAFTING slots and a RESULT slot.*/
      static WORKBENCH: obeiInventoryType;
      getDefaultSize (): number;
      getDefaultTitle (): string;
      /**Denotes that this InventoryType can be created via the normal  Bukkit.createInventory(org.bukkit.inventory.InventoryHolder, org.bukkit.event.inventory.InventoryType) methods.*/
      isCreatable (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiInventoryType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiInventoryType[];
   }
   export class obeiISlotType extends jlEnum<obeiISlotType> {
      /**An armour slot in the player's inventory.*/
      static ARMOR: obeiISlotType;
      /**A regular slot in the container or the player's inventory; anything  not covered by the other enum values.*/
      static CONTAINER: obeiISlotType;
      /**A slot in the crafting matrix, or an 'input' slot.*/
      static CRAFTING: obeiISlotType;
      /**The fuel slot in a furnace inventory, or the ingredient slot in a  brewing stand inventory.*/
      static FUEL: obeiISlotType;
      /**A pseudo-slot representing the area outside the inventory window.*/
      static OUTSIDE: obeiISlotType;
      /**A slot in the bottom row or quickbar.*/
      static QUICKBAR: obeiISlotType;
      /**A result slot in a furnace or crafting inventory.*/
      static RESULT: obeiISlotType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeiISlotType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeiISlotType[];
   }
   /**Represents a view linking two inventories and a single player (whose  inventory may or may not be one of the two).    Note: If you implement this interface but fail to satisfy the expected  contracts of certain methods, there's no guarantee that the game will work  as it should.*/
   export class obiInventoryView extends jlObject {
      constructor ();
      /**Closes the inventory view.*/
      close (): void;
      /**Converts a raw slot ID into its local slot ID into whichever of the two  inventories the slot points to.*/
      convertSlot (rawSlot: number): number;
      /**Check the total number of slots in this view, combining the upper and  lower inventories.*/
      countSlots (): number;
      /**Get the lower inventory involved in this transaction.*/
      getBottomInventory (): obiInventory;
      /**Get the item on the cursor of one of the viewing players.*/
      getCursor (): obiItemStack;
      /**Gets the inventory corresponding to the given raw slot ID.*/
      getInventory (rawSlot: number): obiInventory;
      /**Gets one item in this inventory view by its raw slot ID.*/
      getItem (slot: number): obiItemStack;
      /**Get the player viewing.*/
      getPlayer (): obeHumanEntity;
      /**Determine the type of the slot by its raw slot ID.*/
      getSlotType (slot: number): obeiISlotType;
      /**Get the title of this inventory window.*/
      getTitle (): string;
      /**Get the upper inventory involved in this transaction.*/
      getTopInventory (): obiInventory;
      /**Determine the type of inventory involved in the transaction.*/
      getType (): obeiInventoryType;
      /**Sets the item on the cursor of one of the viewing players.*/
      setCursor (item: obiItemStack): void;
      /**Sets one item in this inventory view by its raw slot ID.*/
      setItem (slot: number, item: obiItemStack): void;
      /**Sets an extra property of this inventory if supported by that  inventory, for example the state of a progress bar.*/
      setProperty (prop: obiIProperty, value: number): boolean;
   }
   /**Represents various extra properties of certain inventory windows.*/
   export class obiIProperty extends jlEnum<obiIProperty> {
      /**The lectern's current open book page*/
      static BOOK_PAGE: obiIProperty;
      /**The progress of the down-pointing arrow in a brewing inventory.*/
      static BREW_TIME: obiIProperty;
      /**The progress of the flame in a furnace inventory.*/
      static BURN_TIME: obiIProperty;
      /**The progress of the right-pointing arrow in a furnace inventory.*/
      static COOK_TIME: obiIProperty;
      /**In an enchanting inventory, the top button's experience level  value.*/
      static ENCHANT_BUTTON1: obiIProperty;
      /**In an enchanting inventory, the middle button's experience level  value.*/
      static ENCHANT_BUTTON2: obiIProperty;
      /**In an enchanting inventory, the bottom button's experience level  value.*/
      static ENCHANT_BUTTON3: obiIProperty;
      /**In an enchanting inventory, the top button's enchantment's id*/
      static ENCHANT_ID1: obiIProperty;
      /**In an enchanting inventory, the middle button's enchantment's id*/
      static ENCHANT_ID2: obiIProperty;
      /**In an enchanting inventory, the bottom button's enchantment's id*/
      static ENCHANT_ID3: obiIProperty;
      /**In an enchanting inventory, the top button's level value.*/
      static ENCHANT_LEVEL1: obiIProperty;
      /**In an enchanting inventory, the middle button's level value.*/
      static ENCHANT_LEVEL2: obiIProperty;
      /**In an enchanting inventory, the bottom button's level value.*/
      static ENCHANT_LEVEL3: obiIProperty;
      /**In an enchanting inventory, the first four bits of the player's xpSeed.*/
      static ENCHANT_XP_SEED: obiIProperty;
      /**The progress of the fuel slot in a brewing inventory.*/
      static FUEL_TIME: obiIProperty;
      /**In an beacon inventory, the levels of the beacon*/
      static LEVELS: obiIProperty;
      /**In an beacon inventory, the primary potion effect*/
      static PRIMARY_EFFECT: obiIProperty;
      /**The repair's cost in xp levels*/
      static REPAIR_COST: obiIProperty;
      /**In an beacon inventory, the secondary potion effect*/
      static SECONDARY_EFFECT: obiIProperty;
      /**How many total ticks the current fuel should last.*/
      static TICKS_FOR_CURRENT_FUEL: obiIProperty;
      /**How many total ticks the current smelting should last.*/
      static TICKS_FOR_CURRENT_SMELTING: obiIProperty;
      getType (): obeiInventoryType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obiIProperty;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obiIProperty[];
   }
   /**An iron Golem that protects Villages.*/
   export interface obeIronGolem extends obeGolem {
      /**Gets whether this iron golem was built by a player.*/
      isPlayerCreated(): boolean;
      /**Sets whether this iron golem was built by a player or not.*/
      setPlayerCreated(playerCreated: boolean): void;
   }
   /**Represents a dropped item.*/
   export interface obeItem extends obeEntity {
      /**Gets if non-player entities can pick this Item up*/
      canMobPickup(): boolean;
      /**Gets whether the player can pickup the item or not*/
      canPlayerPickup(): boolean;
      /**Gets the item stack associated with this item drop.*/
      getItemStack(): obiItemStack;
      /**Get the owner of this item.*/
      getOwner(): juUUID;
      /**Gets the delay before this Item is available to be picked up by players*/
      getPickupDelay(): number;
      /**Get the thrower of this item.*/
      getThrower(): juUUID;
      /**Sets if non-player entities can pick this Item up*/
      setCanMobPickup(canMobPickup: boolean): void;
      /**Sets whether the item can be picked up or not.*/
      setCanPlayerPickup(canPlayerPickup: boolean): void;
      /**Sets the item stack associated with this item drop.*/
      setItemStack(stack: obiItemStack): void;
      /**Sets the owner of this item.*/
      setOwner(owner: juUUID): void;
      /**Sets the delay before this Item is available to be picked up by players*/
      setPickupDelay(delay: number): void;
      /**Set the thrower of this item.*/
      setThrower(uuid: juUUID): void;
      /**Sets whether the item will age or not.*/
      setWillAge(willAge: boolean): void;
      /**Gets whether the item will age and despawn from being on the ground too long*/
      willAge(): boolean;
   }
   /**This event is called when a Item is removed from  the world because it has existed for 5 minutes.    Cancelling the event results in the item being allowed to exist for 5 more  minutes. This behavior is not guaranteed and may change in future versions.*/
   export class obeeItemDespawnEvent extends obeeEntityEvent implements obeCancellable {
      constructor (despawnee: obeItem, loc: obLocation);
      /**Returns the Entity involved in this event*/
      getEntity (): obeItem;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location at which the item is despawning.*/
      getLocation (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An instance of the ItemFactory can be obtained with Server.getItemFactory().    The ItemFactory is solely responsible for creating item meta containers to  apply on item stacks.*/
   export interface obiItemFactory {
      /**Returns an appropriate item meta for the specified stack.*/
      asMetaFor(meta: obimItemMeta, stack: obiItemStack): obimItemMeta;
      /**Returns an appropriate item meta for the specified material.*/
      asMetaFor(meta: obimItemMeta, material: obMaterial): obimItemMeta;
      /**Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.*/
      ensureServerConversions(item: obiItemStack): obiItemStack;
      /**This method is used to compare two item meta data objects.*/
      equals(meta1: obimItemMeta, meta2: obimItemMeta): boolean;
      /**Returns the default color for all leather armor.*/
      getDefaultLeatherColor(): obColor;
      /**Gets the Display name as seen in the Client.*/
      getI18NDisplayName(item: obiItemStack): string;
      /**This creates a new item meta for the material.*/
      getItemMeta(material: obMaterial): obimItemMeta;
      /**Creates a Content of that Entity for displaying.*/
      hoverContentOf(entity: obeEntity): nmbachcContent;
      /**Creates a Content of that Entity for displaying.*/
      hoverContentOf(entity: obeEntity, customName: string): nmbachcContent;
      /**Creates a Content of that Entity for displaying.*/
      hoverContentOf(entity: obeEntity, customName: nmbacBaseComponent): nmbachcContent;
      /**Creates a Content of that Entity for displaying.*/
      hoverContentOf(entity: obeEntity, customName: nmbacBaseComponent[]): nmbachcContent;
      /**Creates a Content of that ItemStack for displaying.*/
      hoverContentOf(itemStack: obiItemStack): nmbachcContent;
      /**This method checks the item meta to confirm that it is applicable (no  data lost if applied) to the specified ItemStack.*/
      isApplicable(meta: obimItemMeta, stack: obiItemStack): boolean;
      /**This method checks the item meta to confirm that it is applicable (no  data lost if applied) to the specified Material.*/
      isApplicable(meta: obimItemMeta, material: obMaterial): boolean;
   }
   /**A ItemFlag can hide some Attributes from ItemStacks*/
   export class obiItemFlag extends jlEnum<obiItemFlag> {
      /**Setting to show\/hide Attributes like Damage*/
      static HIDE_ATTRIBUTES: obiItemFlag;
      /**Setting to show\/hide what the ItemStack can break\/destroy*/
      static HIDE_DESTROYS: obiItemFlag;
      /**Setting to show\/hide dyes from coloured leather armour*/
      static HIDE_DYE: obiItemFlag;
      /**Setting to show\/hide enchants*/
      static HIDE_ENCHANTS: obiItemFlag;
      /**Setting to show\/hide where this ItemStack can be build\/placed on*/
      static HIDE_PLACED_ON: obiItemFlag;
      /**Setting to show\/hide potion effects on this ItemStack*/
      static HIDE_POTION_EFFECTS: obiItemFlag;
      /**Setting to show\/hide the unbreakable State*/
      static HIDE_UNBREAKABLE: obiItemFlag;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obiItemFlag;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obiItemFlag[];
   }
   /**Represents an Item Frame*/
   export interface obeItemFrame extends obeHanging {
      /**Get the item in this frame*/
      getItem(): obiItemStack;
      /**Gets the chance of the item being dropped upon this frame's destruction.*/
      getItemDropChance(): number;
      /**Get the rotation of the frame's item*/
      getRotation(): obRotation;
      /**Returns whether the item frame is "fixed" or not.*/
      isFixed(): boolean;
      /**Returns whether the item frame is be visible or not.*/
      isVisible(): boolean;
      /**Sets whether the item frame should be fixed or not.*/
      setFixed(visible: boolean): void;
      /**Set the item in this frame*/
      setItem(item: obiItemStack): void;
      /**Set the item in this frame*/
      setItem(item: obiItemStack, playSound: boolean): void;
      /**Sets the chance of the off hand item being dropped upon this frame's  destruction.*/
      setItemDropChance(chance: number): void;
      /**Set the rotation of the frame's item*/
      setRotation(rotation: obRotation): void;
      /**Sets whether the item frame should be visible or not.*/
      setVisible(visible: boolean): void;
   }
   export class obeeItemMergeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (item: obeItem, target: obeItem);
      /**Returns the Entity involved in this event*/
      getEntity (): obeItem;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Item entity the main Item is being merged into.*/
      getTarget (): obeItem;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**This type represents the storage mechanism for auxiliary item data.    An implementation will handle the creation and application for ItemMeta.  This class should not be implemented by a plugin in a live environment.*/
   export interface obimItemMeta extends jlCloneable, obcsConfigurationSerializable, obpPersistentDataHolder {
      /**Add an Attribute and it's Modifier.*/
      addAttributeModifier(attribute: obaAttribute, modifier: obaAttributeModifier): boolean;
      /**Adds the specified enchantment to this item meta.*/
      addEnchant(ench: obeEnchantment, level: number, ignoreLevelRestriction: boolean): boolean;
      /**Set itemflags which should be ignored when rendering a ItemStack in the Client.*/
      addItemFlags(...itemFlags: obiItemFlag[]): void;
      clone(): obimItemMeta;
      /**Return an immutable copy of all Attributes and  their modifiers in this ItemMeta.  Returns null if none exist.*/
      getAttributeModifiers(): cgccMultimap<obaAttribute, obaAttributeModifier>;
      /**Return an immutable copy of all AttributeModifiers  for a given Attribute*/
      getAttributeModifiers(attribute: obaAttribute): juCollection<obaAttributeModifier>;
      /**Return an immutable copy of all Attributes and their  AttributeModifiers for a given EquipmentSlot.  Any AttributeModifier that does have have a given  EquipmentSlot will be returned.*/
      getAttributeModifiers(slot: obiEquipmentSlot): cgccMultimap<obaAttribute, obaAttributeModifier>;
      /**Gets the custom model data that is set.*/
      getCustomModelData(): number;
      /**Gets the collection of namespaced keys that the item can destroy in GameMode.ADVENTURE*/
      getDestroyableKeys(): juSet<cdpNamespaced>;
      /**Gets the display name that is set.*/
      getDisplayName(): string;
      /**Gets the display name that is set.*/
      getDisplayNameComponent(): nmbacBaseComponent[];
      /**Checks for the level of the specified enchantment.*/
      getEnchantLevel(ench: obeEnchantment): number;
      /**Returns a copy the enchantments in this ItemMeta.*/
      getEnchants(): juMap<obeEnchantment, jlInteger>;
      /**Get current set itemFlags.*/
      getItemFlags(): juSet<obiItemFlag>;
      /**Gets the localized display name that is set.*/
      getLocalizedName(): string;
      /**Gets the lore that is set.*/
      getLore(): juList<string>;
      /**Gets the lore that is set.*/
      getLoreComponents(): juList<nmbacBaseComponent[]>;
      /**Gets the collection of namespaced keys that the item can be placed on in GameMode.ADVENTURE*/
      getPlaceableKeys(): juSet<cdpNamespaced>;
      /**Checks for the existence of any AttributeModifiers.*/
      hasAttributeModifiers(): boolean;
      /**Checks if the specified enchantment conflicts with any enchantments in  this ItemMeta.*/
      hasConflictingEnchant(ench: obeEnchantment): boolean;
      /**Checks for existence of custom model data.*/
      hasCustomModelData(): boolean;
      /**Checks for the existence of any keys that the item can destroy*/
      hasDestroyableKeys(): boolean;
      /**Checks for existence of a display name.*/
      hasDisplayName(): boolean;
      /**Checks for existence of the specified enchantment.*/
      hasEnchant(ench: obeEnchantment): boolean;
      /**Checks for the existence of any enchantments.*/
      hasEnchants(): boolean;
      /**Check if the specified flag is present on this item.*/
      hasItemFlag(flag: obiItemFlag): boolean;
      /**Checks for existence of a localized name.*/
      hasLocalizedName(): boolean;
      /**Checks for existence of lore.*/
      hasLore(): boolean;
      /**Checks for the existence of any keys that the item can be placed on*/
      hasPlaceableKeys(): boolean;
      /**Return if the unbreakable tag is true.*/
      isUnbreakable(): boolean;
      /**Remove all AttributeModifiers associated with the given  Attribute.*/
      removeAttributeModifier(attribute: obaAttribute): boolean;
      /**Remove a specific Attribute and AttributeModifier.*/
      removeAttributeModifier(attribute: obaAttribute, modifier: obaAttributeModifier): boolean;
      /**Remove all Attributes and AttributeModifiers for a  given EquipmentSlot.  If the given EquipmentSlot is null, this will remove all  AttributeModifiers that do not have an EquipmentSlot set.*/
      removeAttributeModifier(slot: obiEquipmentSlot): boolean;
      /**Removes the specified enchantment from this item meta.*/
      removeEnchant(ench: obeEnchantment): boolean;
      /**Remove specific set of itemFlags.*/
      removeItemFlags(...itemFlags: obiItemFlag[]): void;
      /**Set all Attributes and their AttributeModifiers.*/
      setAttributeModifiers(attributeModifiers: cgccMultimap<obaAttribute, obaAttributeModifier>): void;
      /**Sets the custom model data.*/
      setCustomModelData(data: jlInteger): void;
      /**Sets the collection of namespaced keys that the item can destroy in GameMode.ADVENTURE*/
      setDestroyableKeys(canDestroy: juCollection<cdpNamespaced>): void;
      /**Sets the display name.*/
      setDisplayName(name: string): void;
      /**Sets the display name.*/
      setDisplayNameComponent(component: nmbacBaseComponent[]): void;
      /**Sets the localized name.*/
      setLocalizedName(name: string): void;
      /**Sets the lore for this item.*/
      setLore(lore: juList<string>): void;
      /**Sets the lore for this item.*/
      setLoreComponents(lore: juList<nmbacBaseComponent[]>): void;
      /**Sets the set of namespaced keys that the item can be placed on in GameMode.ADVENTURE*/
      setPlaceableKeys(canPlaceOn: juCollection<cdpNamespaced>): void;
      /**Sets the unbreakable tag.*/
      setUnbreakable(unbreakable: boolean): void;
   }
   /**Called when an item is spawned into a world*/
   export class obeeItemSpawnEvent extends obeeEntitySpawnEvent {
      constructor (spawnee: obeItem);
      constructor (spawnee: obeItem, loc: obLocation);
      /**Returns the Entity involved in this event*/
      getEntity (): obeItem;
   }
   /**Represents a stack of items.    IMPORTANT: An ItemStack is only designed to contain items. Do not  use this class to encapsulate Materials for which Material.isItem()  returns false.*/
   export class obiItemStack extends jlObject implements jlCloneable, obcsConfigurationSerializable {
      constructor ();
      constructor (stack: obiItemStack);
      constructor (type: obMaterial);
      constructor (type: obMaterial, amount: number);
      constructor (type: obMaterial, amount: number, damage: number);
      constructor (type: obMaterial, amount: number, damage: number, data: jlByte);
      /**Adds 1 to this itemstack.*/
      add (): obiItemStack;
      /**Adds quantity to this itemstack.*/
      add (qty: number): obiItemStack;
      /**Adds the specified Enchantment to this item stack.*/
      addEnchantment (ench: obeEnchantment, level: number): void;
      /**Adds the specified enchantments to this item stack.*/
      addEnchantments (enchantments: juMap<obeEnchantment, jlInteger>): void;
      /**Set itemflags which should be ignored when rendering a ItemStack in the Client.*/
      addItemFlags (...itemFlags: obiItemFlag[]): void;
      /**Adds the specified Enchantment to this item stack.*/
      addUnsafeEnchantment (ench: obeEnchantment, level: number): void;
      /**Adds the specified enchantments to this item stack in an unsafe manner.*/
      addUnsafeEnchantments (enchantments: juMap<obeEnchantment, jlInteger>): void;
      /**Clones the itemstack and returns it a single quantity.*/
      asOne (): obiItemStack;
      /**Clones the itemstack and returns it as the specified quantity*/
      asQuantity (qty: number): obiItemStack;
      clone (): obiItemStack;
      /**Checks if this ItemStack contains the given Enchantment*/
      containsEnchantment (ench: obeEnchantment): boolean;
      /**Required method for configuration serialization*/
      static deserialize (args: juMap<string, jlObject>): obiItemStack;
      /**Deserializes this itemstack from raw NBT bytes.*/
      static deserializeBytes (bytes: number[]): obiItemStack;
      /**Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.*/
      ensureServerConversions (): obiItemStack;
      equals (obj: jlObject): boolean;
      /**Gets the amount of items in this stack*/
      getAmount (): number;
      /**Gets the MaterialData for this stack of items*/
      getData (): obmMaterialData;
      /**Gets the level of the specified enchantment on this item stack*/
      getEnchantmentLevel (ench: obeEnchantment): number;
      /**Gets a map containing all enchantments and their levels on this item.*/
      getEnchantments (): juMap<obeEnchantment, jlInteger>;
      /**Gets the Display name as seen in the Client.*/
      getI18NDisplayName (): string;
      /**Get current set itemFlags.*/
      getItemFlags (): juSet<obiItemFlag>;
      /**Get a copy of this ItemStack's ItemMeta.*/
      getItemMeta (): obimItemMeta;
      /**If the item has lore, returns it, else it will return null*/
      getLore (): juList<string>;
      getMaxItemUseDuration (): number;
      /**Get the maximum stacksize for the material hold in this ItemStack.*/
      getMaxStackSize (): number;
      /**Gets the type of this item*/
      getType (): obMaterial;
      hashCode (): number;
      /**Check if the specified flag is present on this item.*/
      hasItemFlag (flag: obiItemFlag): boolean;
      /**Checks to see if any meta data has been defined.*/
      hasItemMeta (): boolean;
      /**This method is the same as equals, but does not consider stack size  (amount).*/
      isSimilar (stack: obiItemStack): boolean;
      /**Removes the specified Enchantment if it exists on this  ItemStack*/
      removeEnchantment (ench: obeEnchantment): number;
      /**Remove specific set of itemFlags.*/
      removeItemFlags (...itemFlags: obiItemFlag[]): void;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      /**Serializes this itemstack to raw bytes in NBT.*/
      serializeAsBytes (): number[];
      /**Sets the amount of items in this stack*/
      setAmount (amount: number): void;
      /**Sets the MaterialData for this stack of items*/
      setData (data: obmMaterialData): void;
      /**Set the ItemMeta of this ItemStack.*/
      setItemMeta (itemMeta: obimItemMeta): boolean;
      /**Sets the lore for this item.*/
      setLore (lore: juList<string>): void;
      /**Sets the type of this item*/
      setType (type: obMaterial): void;
      /**Subtracts 1 to this itemstack.*/
      subtract (): obiItemStack;
      /**Subtracts quantity to this itemstack.*/
      subtract (qty: number): obiItemStack;
      toString (): string;
   }
   /**A default implementation that simply exists to pass on the retrieved or  inserted value to the next layer.   This implementation does not add any kind of logic, but is used to  provide default implementations for the primitive types.*/
   export class obimtIPrimitiveTagType<T> extends jlObject implements obimtItemTagType<T, T> {
      /**Creates a complex object based of the passed primitive value*/
      fromPrimitive (primitive: T, context: obimtItemTagAdapterContext): T;
      /**Returns the complex object type the primitive value resembles.*/
      getComplexType (): jlClass<T>;
      /**Returns the primitive data type of this tag.*/
      getPrimitiveType (): jlClass<T>;
      /**Returns the primitive data that resembles the complex object passed to  this method.*/
      toPrimitive (complex: T, context: obimtItemTagAdapterContext): T;
   }
   /**Represents a Java plugin*/
   export class obpjJavaPlugin extends obpPluginBase {
      constructor ();
      constructor (loader: obpjJavaPluginLoader, description: obpPluginDescriptionFile, dataFolder: jiFile, file: jiFile);
      /**Returns the ClassLoader which holds this plugin*/
      getClassLoader (): jlClassLoader;
      /**Gets the command with the given name, specific to this plugin.*/
      getCommand (name: string): obcPluginCommand;
      /**Gets a FileConfiguration for this plugin, read through  "config.yml"*/
      getConfig (): obcfFileConfiguration;
      /**Returns the folder that the plugin data's files are located in.*/
      getDataFolder (): jiFile;
      /**Gets a ChunkGenerator for use in a default world, as specified  in the server configuration*/
      getDefaultWorldGenerator (worldName: string, id: string): obgChunkGenerator;
      /**Returns the plugin.yaml file containing the details for this plugin*/
      getDescription (): obpPluginDescriptionFile;
      /**Returns the file which contains this plugin*/
      getFile (): jiFile;
      /**Returns the plugin logger associated with this server's logger.*/
      getLogger (): julLogger;
      /**This method provides fast access to the plugin that has provided the given plugin class, which is  usually the plugin that implemented it.*/
      static getPlugin<T extends obpjJavaPlugin> (clazz: jlClass<T>): T;
      /**Gets the associated PluginLoader responsible for this plugin*/
      getPluginLoader (): obpPluginLoader;
      /**This method provides fast access to the plugin that has provided the  given class.*/
      static getProvidingPlugin (clazz: jlClass<any>): obpjJavaPlugin;
      /**Gets an embedded resource in this plugin*/
      getResource (filename: string): jiInputStream;
      /**Returns the Server instance currently running this plugin*/
      getServer (): obServer;
      /**Provides a reader for a text file located inside the jar.*/
      getTextResource (file: string): jiReader;
      /**Returns a value indicating whether or not this plugin is currently  enabled*/
      isEnabled (): boolean;
      /**Simple boolean if we can still nag to the logs about things*/
      isNaggable (): boolean;
      /**Executes the given command, returning its success.*/
      onCommand (sender: obcCommandSender, command: obcCommand, label: string, args: string[]): boolean;
      /**Called when this plugin is disabled*/
      onDisable (): void;
      /**Called when this plugin is enabled*/
      onEnable (): void;
      /**Called after a plugin is loaded but before it has been enabled.*/
      onLoad (): void;
      /**Requests a list of possible completions for a command argument.*/
      onTabComplete (sender: obcCommandSender, command: obcCommand, alias: string, args: string[]): juList<string>;
      /**Discards any data in Plugin.getConfig() and reloads from disk.*/
      reloadConfig (): void;
      /**Saves the FileConfiguration retrievable by Plugin.getConfig().*/
      saveConfig (): void;
      /**Saves the raw contents of the default config.yml file to the location  retrievable by Plugin.getConfig().*/
      saveDefaultConfig (): void;
      /**Saves the raw contents of any resource embedded with a plugin's .jar  file assuming it can be found using Plugin.getResource(String).*/
      saveResource (resourcePath: string, replace: boolean): void;
      /**Sets the enabled state of this plugin*/
      setEnabled (enabled: boolean): void;
      /**Set naggable state*/
      setNaggable (canNag: boolean): void;
      toString (): string;
   }
   /**Represents a Java plugin loader, allowing plugins in the form of .jar*/
   export class obpjJavaPluginLoader extends jlObject implements obpPluginLoader {
      constructor (instance: obServer);
      /**Creates and returns registered listeners for the event classes used in  this listener*/
      createRegisteredListeners (
         listener: obeListener,
         plugin: obpPlugin
      ): juMap<jlClass<obeEvent>, juSet<obpRegisteredListener>>;
      /**Disables the specified plugin*/
      disablePlugin (plugin: obpPlugin): void;
      /**Disables the specified plugin*/
      disablePlugin (plugin: obpPlugin, closeClassloader: boolean): void;
      /**Enables the specified plugin*/
      enablePlugin (plugin: obpPlugin): void;
      /**Loads a PluginDescriptionFile from the specified file*/
      getPluginDescription (file: jiFile): obpPluginDescriptionFile;
      /**Returns a list of all filename filters expected by this PluginLoader*/
      getPluginFileFilters (): jurPattern[];
      /**Loads the plugin contained in the specified file*/
      loadPlugin (file: jiFile): obpPlugin;
   }
   /**'orientation' is the direction the block is facing.*/
   export interface obbdtJigsaw extends obbdBlockData {
      /**Gets the value of the 'orientation' property.*/
      getOrientation(): obbdtJOrientation;
      /**Sets the value of the 'orientation' property.*/
      setOrientation(orientation: obbdtJOrientation): void;
   }
   /**Represents a captured state of a jigsaw.*/
   export interface obbJigsaw extends obbTileState {}
   /**The directions the Jigsaw can be oriented.*/
   export class obbdtJOrientation extends jlEnum<obbdtJOrientation> {
      static DOWN_EAST: obbdtJOrientation;
      static DOWN_NORTH: obbdtJOrientation;
      static DOWN_SOUTH: obbdtJOrientation;
      static DOWN_WEST: obbdtJOrientation;
      static EAST_UP: obbdtJOrientation;
      static NORTH_UP: obbdtJOrientation;
      static SOUTH_UP: obbdtJOrientation;
      static UP_EAST: obbdtJOrientation;
      static UP_NORTH: obbdtJOrientation;
      static UP_SOUTH: obbdtJOrientation;
      static UP_WEST: obbdtJOrientation;
      static WEST_UP: obbdtJOrientation;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtJOrientation;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtJOrientation[];
   }
   /**Provides Utility methods that assist with generating JSON Objects*/
   export class cauJSONUtil extends jlObject {
      /**This appends multiple key\/value Obj pairs into a JSON Object*/
      static appendObjectData (parent: juMap, ...data: cauJJSONPair[]): juMap<string, jlObject>;
      /**Creates a new JSON object from multiple JSONPair key\/value pairs*/
      static createObject (...data: cauJJSONPair[]): juMap<string, jlObject>;
      static pair (key: number, obj: jlObject): cauJJSONPair;
      /**Creates a key\/value "JSONPair" object*/
      static pair (key: string, obj: jlObject): cauJJSONPair;
      /**This builds a JSON array from a set of data*/
      static toArray (...data: jlObject[]): juList;
      /**These help build a single JSON array using a mapper function*/
      static toArrayMapper<E> (collection: E[], mapper: cgcbFunction<E, jlObject>): juList;
      static toArrayMapper<E> (collection: jlIterable<E>, mapper: cgcbFunction<E, jlObject>): juList;
      /**These help build a single JSON Object from a collection, using a mapper function*/
      static toObjectMapper<E> (collection: E[], mapper: cgcbFunction<E, cauJJSONPair>): juMap;
      static toObjectMapper<E> (collection: jlIterable<E>, mapper: cgcbFunction<E, cauJJSONPair>): juMap;
   }
   /**Simply stores a key and a value, used internally by many methods below.*/
   export class cauJJSONPair extends jlObject {}
   /**'has_record' is a quick flag to check whether this jukebox has a record  inside it.*/
   export interface obbdtJukebox extends obbdBlockData {
      /**Gets the value of the 'has_record' property.*/
      hasRecord(): boolean;
   }
   /**Represents a captured state of a jukebox.*/
   export interface obbJukebox extends obbTileState {
      /**Stops the jukebox playing and ejects the current record.*/
      eject(): boolean;
      /**Gets the record inserted into the jukebox.*/
      getPlaying(): obMaterial;
      /**Gets the record item inserted into the jukebox.*/
      getRecord(): obiItemStack;
      /**Checks if the jukebox is playing a record.*/
      isPlaying(): boolean;
      /**Sets the record being played.*/
      setPlaying(record: obMaterial): void;
      /**Sets the record being played.*/
      setRecord(record: obiItemStack): void;
      /**Stops the jukebox playing without ejecting the record.*/
      stopPlaying(): void;
   }
   /**Represents an object which has a NamespacedKey attached to it.*/
   export interface obKeyed {
      /**Return the namespaced identifier for this object.*/
      getKey(): obNamespacedKey;
   }
   /**Represents a custom BossBar that has a  NamespacedKey*/
   export interface obbKeyedBossBar extends obbBossBar, obKeyed {}
   export interface obimKnowledgeBookMeta extends obimItemMeta {
      /**Adds new recipe to the end of the book.*/
      addRecipe(...recipes: obNamespacedKey[]): void;
      clone(): obimKnowledgeBookMeta;
      /**Gets all the recipes in the book.*/
      getRecipes(): juList<obNamespacedKey>;
      /**Checks for the existence of recipes in the book.*/
      hasRecipes(): boolean;
      /**Clears the existing book recipes, and sets the book to use the provided  recipes.*/
      setRecipes(recipes: juList<obNamespacedKey>): void;
   }
   export interface obbdtLadder extends obbdDirectional, obbdWaterlogged {}
   /**'hanging' denotes whether the lantern is hanging from a block.*/
   export interface obbdtLantern extends obbdWaterlogged {
      /**Gets the value of the 'hanging' property.*/
      isHanging(): boolean;
      /**Sets the value of the 'hanging' property.*/
      setHanging(hanging: boolean): void;
   }
   /**Represents a large Fireball*/
   export interface obeLargeFireball extends obeSizedFireball {}
   /**The LazyMetadataValue class implements a type of metadata that is not  computed until another plugin asks for it.    By making metadata values lazy, no computation is done by the providing  plugin until absolutely necessary (if ever). Additionally,  LazyMetadataValue objects cache their values internally unless overridden  by a LazyMetadataValue.CacheStrategy or invalidated at the individual or plugin  level. Once invalidated, the LazyMetadataValue will recompute its value  when asked.*/
   export class obmLazyMetadataValue extends obmMetadataValueAdapter {
      constructor (owningPlugin: obpPlugin);
      constructor (owningPlugin: obpPlugin, lazyValue: jucCallable<jlObject>);
      constructor (owningPlugin: obpPlugin, cacheStrategy: obmLCacheStrategy, lazyValue: jucCallable<jlObject>);
      /**Invalidates this metadata item, forcing it to recompute when next  accessed.*/
      invalidate (): void;
      /**Fetches the value of this metadata item.*/
      value (): jlObject;
   }
   /**Describes possible caching strategies for metadata.*/
   export class obmLCacheStrategy extends jlEnum<obmLCacheStrategy> {
      /**Once the metadata value has been evaluated, do not re-evaluate the  value until it is manually invalidated.*/
      static CACHE_AFTER_FIRST_EVAL: obmLCacheStrategy;
      /**Once the metadata value has been evaluated, do not re-evaluate the  value in spite of manual invalidation.*/
      static CACHE_ETERNALLY: obmLCacheStrategy;
      /**Re-evaluate the metadata item every time it is requested*/
      static NEVER_CACHE: obmLCacheStrategy;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obmLCacheStrategy;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obmLCacheStrategy[];
   }
   /**Represents a Leash Hitch on a fence*/
   export interface obeLeashHitch extends obeHanging {}
   /**Represents leather armor (Material.LEATHER_BOOTS, Material.LEATHER_CHESTPLATE, Material.LEATHER_HELMET, or Material.LEATHER_LEGGINGS) that can be colored.*/
   export interface obimLeatherArmorMeta extends obimItemMeta {
      clone(): obimLeatherArmorMeta;
      /**Gets the color of the armor.*/
      getColor(): obColor;
      /**Sets the color of the armor.*/
      setColor(color: obColor): void;
   }
   /**'persistent' indicates whether or not leaves will be checked by the server to  see if they are subject to decay or not.    'distance' denotes how far the block is from a tree and is used in  conjunction with 'persistent' flag to determine if the leaves will decay or  not.*/
   export interface obbdtLeaves extends obbdBlockData {
      /**Gets the value of the 'distance' property.*/
      getDistance(): number;
      /**Gets the value of the 'persistent' property.*/
      isPersistent(): boolean;
      /**Sets the value of the 'distance' property.*/
      setDistance(distance: number): void;
      /**Sets the value of the 'persistent' property.*/
      setPersistent(persistent: boolean): void;
   }
   /**Called when leaves are decaying naturally.    If a Leaves Decay event is cancelled, the leaves will not decay.*/
   export class obebLeavesDecayEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**'has_book' is a quick flag to check whether this lectern has a book inside  it.*/
   export interface obbdtLectern extends obbdDirectional, obbdPowerable {
      /**Gets the value of the 'has_book' property.*/
      hasBook(): boolean;
   }
   /**Represents a captured state of a lectern.*/
   export interface obbLectern extends obbTileState, obiBlockInventoryHolder {
      /**Get the object's inventory.*/
      getInventory(): obiInventory;
      /**Get the current lectern page.*/
      getPage(): number;
      getSnapshotInventory(): obiInventory;
      /**Set the current lectern page.*/
      setPage(page: number): void;
   }
   /**Interface to the inventory of a Lectern.*/
   export interface obiLecternInventory extends obiInventory {
      /**Gets the lectern's held book.*/
      getBook(): obiItemStack;
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obbLectern;
      /**Sets the lectern's held book.*/
      setBook(book: obiItemStack): void;
   }
   /**'level' represents the amount of fluid contained within this block, either by  itself or inside a cauldron.    In the case of water and lava blocks the levels have special meanings: a  level of 0 corresponds to a source block, 1-7 regular fluid heights, and 8-15  to "falling" fluids. All falling fluids have the same behaviour, but the  level corresponds to that of the block above them, equal to  this.level - 8  Note that counterintuitively, an adjusted level of 1 is the highest level,  whilst 7 is the lowest.    May not be higher than getMaximumLevel().*/
   export interface obbdLevelled extends obbdBlockData {
      /**Gets the value of the 'level' property.*/
      getLevel(): number;
      /**Gets the maximum allowed value of the 'level' property.*/
      getMaximumLevel(): number;
      /**Sets the value of the 'level' property.*/
      setLevel(level: number): void;
   }
   export interface obbLidded {
      /**Sets the block's animated state to closed even if a player is currently  viewing this block.*/
      close(): void;
      /**Sets the block's animated state to open and prevents it from being closed  until close() is called.*/
      open(): void;
   }
   /**'lit' denotes whether this block (either a redstone torch or furnace) is  currently lit - that is not burned out.*/
   export interface obbdLightable extends obbdBlockData {
      /**Gets the value of the 'lit' property.*/
      isLit(): boolean;
      /**Sets the value of the 'lit' property.*/
      setLit(lit: boolean): void;
   }
   /**Represents an instance of a lightning strike. May or may not do damage.*/
   export interface obeLightningStrike extends obeEntity {
      /**Returns the amount of flash iterations that will be done before the lightning dies.*/
      getFlashCount(): number;
      /**Returns the amount of ticks the current flash will do damage for.*/
      getLifeTicks(): number;
      /**Returns whether the strike is an effect that does no damage.*/
      isEffect(): boolean;
      /**Sets the amount of life iterations that will be done before the lightning dies.*/
      setFlashCount(flashes: number): void;
      /**Sets the amount of ticks the current flash will do damage\/fire for.*/
      setLifeTicks(lifeTicks: number): void;
      spigot(): obeLSpigot;
   }
   export class obeLSpigot extends obeESpigot {
      constructor ();
      isSilent (): boolean;
   }
   /**Stores data for lightning striking*/
   export class obewLightningStrikeEvent extends obewWeatherEvent implements obeCancellable {
      constructor (world: obWorld, bolt: obeLightningStrike);
      constructor (world: obWorld, bolt: obeLightningStrike, cause: obewLCause);
      /**Gets the cause of this lightning strike.*/
      getCause (): obewLCause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the bolt which is striking the earth.*/
      getLightning (): obeLightningStrike;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export class obewLCause extends jlEnum<obewLCause> {
      /**Triggered by the \/summon command.*/
      static COMMAND: obewLCause;
      /**Triggered by a skeleton horse trap.*/
      static TRAP: obewLCause;
      /**Triggered by an enchanted trident.*/
      static TRIDENT: obewLCause;
      /**Unknown trigger.*/
      static UNKNOWN: obewLCause;
      /**Triggered by weather.*/
      static WEATHER: obewLCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obewLCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obewLCause[];
   }
   /**Called when a splash potion hits an area*/
   export class obeeLingeringPotionSplashEvent extends obeeProjectileHitEvent implements obeCancellable {
      constructor (potion: obeThrownPotion, entity: obeAreaEffectCloud);
      /**Gets the AreaEffectCloud spawned*/
      getAreaEffectCloud (): obeAreaEffectCloud;
      /**Returns the Entity involved in this event*/
      getEntity (): obeThrownPotion;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Whether or not to cancel any behavior that would occur from the arrow hitting the block*/
      setCancelled (cancel: boolean): void;
   }
   /**Simple interface for tagging all EventListeners*/
   export interface obeListener {}
   /**Represents a living entity, such as a monster or player*/
   export interface obeLivingEntity extends obaAttributable, obeDamageable, obpProjectileSource {
      /**Adds the given PotionEffect to the living entity.*/
      addPotionEffect(effect: obpPotionEffect): boolean;
      /**Attempts to add all of the given PotionEffect to the living  entity.*/
      addPotionEffects(effects: juCollection<obpPotionEffect>): boolean;
      /**Makes this entity attack the given entity with a melee attack.*/
      attack(target: obeEntity): void;
      /**Interrupts any ongoing active "usage" or consumption or an item.*/
      clearActiveItem(): void;
      /**Get's the item being actively "used" or consumed.*/
      getActiveItem(): obiItemStack;
      /**Returns all currently active PotionEffects on the living  entity.*/
      getActivePotionEffects(): juCollection<obpPotionEffect>;
      /**Gets the time in ticks until the next arrow leaves the entity's body.*/
      getArrowCooldown(): number;
      /**Gets the amount of arrows in an entity's body.*/
      getArrowsInBody(): number;
      /**Get the number of arrows stuck in this entity*/
      getArrowsStuck(): number;
      /**Gets if the living entity can pick up items.*/
      getCanPickupItems(): boolean;
      /**Get the category to which this entity belongs.*/
      getCategory(): obeEntityCategory;
      /**Gets a mutable set of UUIDs of the entities which are exempt from the  entity's collidable rule and which's collision with this entity will  behave the opposite of it.*/
      getCollidableExemptions(): juSet<juUUID>;
      /**Gets the inventory with the equipment worn by the living entity.*/
      getEquipment(): obiEntityEquipment;
      /**Gets the height of the living entity's eyes above its Location.*/
      getEyeHeight(): number;
      /**Gets the height of the living entity's eyes above its Location.*/
      getEyeHeight(ignorePose: boolean): number;
      /**Get a Location detailing the current eye position of the living entity.*/
      getEyeLocation(): obLocation;
      /**Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)*/
      getHandRaisedTime(): number;
      /**Gets player hurt direction*/
      getHurtDirection(): number;
      /**Get's remaining time a player needs to keep hands raised with an item to finish using it.*/
      getItemUseRemainingTime(): number;
      /**Gets the player identified as the killer of the living entity.*/
      getKiller(): obePlayer;
      /**Returns the living entity's last damage taken in the current no damage  ticks time.*/
      getLastDamage(): number;
      /**Gets the last two blocks along the living entity's line of sight.*/
      getLastTwoTargetBlocks(transparent: juSet<obMaterial>, maxDistance: number): juList<obbBlock>;
      /**Gets the entity that is currently leading this entity.*/
      getLeashHolder(): obeEntity;
      /**Gets all blocks along the living entity's line of sight.*/
      getLineOfSight(transparent: juSet<obMaterial>, maxDistance: number): juList<obbBlock>;
      /**Returns the maximum amount of air the living entity can have, in ticks.*/
      getMaximumAir(): number;
      /**Returns the living entity's current maximum no damage ticks.*/
      getMaximumNoDamageTicks(): number;
      /**Returns the value of the memory specified.*/
      getMemory<T>(memoryKey: obemMemoryKey<T>): T;
      /**Returns the living entity's current no damage ticks.*/
      getNoDamageTicks(): number;
      /**Returns the active PotionEffect of the specified type.*/
      getPotionEffect(type: obpPotionEffectType): obpPotionEffect;
      /**Returns the amount of air that the living entity has remaining, in  ticks.*/
      getRemainingAir(): number;
      /**Returns if the living entity despawns when away from players or not.*/
      getRemoveWhenFarAway(): boolean;
      /**Get the delay (in ticks) before blocking is effective for this entity*/
      getShieldBlockingDelay(): number;
      /**Gets the block that the living entity has targeted, ignoring fluids*/
      getTargetBlock(maxDistance: number): obbBlock;
      /**Gets the block that the living entity has targeted*/
      getTargetBlock(maxDistance: number, fluidMode: cdpbTFluidMode): obbBlock;
      /**Gets the block that the living entity has targeted.*/
      getTargetBlock(transparent: juSet<obMaterial>, maxDistance: number): obbBlock;
      /**Gets the block that the living entity has targeted.*/
      getTargetBlockExact(maxDistance: number): obbBlock;
      /**Gets the block that the living entity has targeted.*/
      getTargetBlockExact(maxDistance: number, fluidCollisionMode: obFluidCollisionMode): obbBlock;
      /**Gets the blockface of that block that the living entity has targeted, ignoring fluids*/
      getTargetBlockFace(maxDistance: number): obbBlockFace;
      /**Gets the blockface of that block that the living entity has targeted*/
      getTargetBlockFace(maxDistance: number, fluidMode: cdpbTFluidMode): obbBlockFace;
      /**Gets information about the block the living entity has targeted, ignoring fluids*/
      getTargetBlockInfo(maxDistance: number): cdpbTargetBlockInfo;
      /**Gets information about the block the living entity has targeted*/
      getTargetBlockInfo(maxDistance: number, fluidMode: cdpbTFluidMode): cdpbTargetBlockInfo;
      /**Gets information about the entity being targeted*/
      getTargetEntity(maxDistance: number): obeEntity;
      /**Gets information about the entity being targeted*/
      getTargetEntity(maxDistance: number, ignoreBlocks: boolean): obeEntity;
      /**Gets information about the entity being targeted*/
      getTargetEntityInfo(maxDistance: number): cdpeTargetEntityInfo;
      /**Gets information about the entity being targeted*/
      getTargetEntityInfo(maxDistance: number, ignoreBlocks: boolean): cdpeTargetEntityInfo;
      /**Checks whether an entity has AI.*/
      hasAI(): boolean;
      /**Checks whether the living entity has block line of sight to another.*/
      hasLineOfSight(other: obeEntity): boolean;
      /**Returns whether the living entity already has an existing effect of  the given PotionEffectType applied to it.*/
      hasPotionEffect(type: obpPotionEffectType): boolean;
      /**Gets if this entity is subject to collisions with other entities.*/
      isCollidable(): boolean;
      /**Checks to see if an entity is gliding, such as using an Elytra.*/
      isGliding(): boolean;
      /**Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)*/
      isHandRaised(): boolean;
      /**Gets whether the entity is invisible or not.*/
      isInvisible(): boolean;
      /**Get entity jump state.*/
      isJumping(): boolean;
      /**Returns whether the entity is currently leashed.*/
      isLeashed(): boolean;
      /**Checks to see if an entity is currently using the Riptide enchantment.*/
      isRiptiding(): boolean;
      /**Returns whether this entity is slumbering.*/
      isSleeping(): boolean;
      /**Checks to see if an entity is swimming.*/
      isSwimming(): boolean;
      /**Plays pickup item animation towards this entity.*/
      playPickupItemAnimation(item: obeItem): void;
      /**Plays pickup item animation towards this entity.*/
      playPickupItemAnimation(item: obeItem, quantity: number): void;
      /**Performs a ray trace that provides information on the targeted block.*/
      rayTraceBlocks(maxDistance: number): obuRayTraceResult;
      /**Performs a ray trace that provides information on the targeted block.*/
      rayTraceBlocks(maxDistance: number, fluidCollisionMode: obFluidCollisionMode): obuRayTraceResult;
      /**Removes any effects present of the given PotionEffectType.*/
      removePotionEffect(type: obpPotionEffectType): void;
      /**Sets whether an entity will have AI.*/
      setAI(ai: boolean): void;
      /**Sets the time in ticks until the next arrow leaves the entity's body.*/
      setArrowCooldown(ticks: number): void;
      /**Set the amount of arrows in the entity's body.*/
      setArrowsInBody(count: number): void;
      /**Set the number of arrows stuck in this entity*/
      setArrowsStuck(arrows: number): void;
      /**Sets whether or not the living entity can pick up items.*/
      setCanPickupItems(pickup: boolean): void;
      /**Set if this entity will be subject to collisions with other entities.*/
      setCollidable(collidable: boolean): void;
      /**Makes entity start or stop gliding.*/
      setGliding(gliding: boolean): void;
      /**Sets player hurt direction*/
      setHurtDirection(hurtDirection: number): void;
      /**Sets whether the entity is invisible or not.*/
      setInvisible(invisible: boolean): void;
      /**Set entity jump state*/
      setJumping(jumping: boolean): void;
      /**Sets the player identified as the killer of the living entity.*/
      setKiller(killer: obePlayer): void;
      /**Sets the damage dealt within the current no damage ticks time period.*/
      setLastDamage(damage: number): void;
      /**Sets the leash on this entity to be held by the supplied entity.*/
      setLeashHolder(holder: obeEntity): boolean;
      /**Sets the maximum amount of air the living entity can have, in ticks.*/
      setMaximumAir(ticks: number): void;
      /**Sets the living entity's current maximum no damage ticks.*/
      setMaximumNoDamageTicks(ticks: number): void;
      /**Sets the value of the memory specified.*/
      setMemory<T>(memoryKey: obemMemoryKey<T>, memoryValue: T): void;
      /**Sets the living entity's current no damage ticks.*/
      setNoDamageTicks(ticks: number): void;
      /**Sets the amount of air that the living entity has remaining, in ticks.*/
      setRemainingAir(ticks: number): void;
      /**Sets whether or not the living entity despawns when away from players  or not.*/
      setRemoveWhenFarAway(remove: boolean): void;
      /**Set the delay (in ticks) before blocking is effective for this entity*/
      setShieldBlockingDelay(delay: number): void;
      /**Makes entity start or stop swimming.*/
      setSwimming(swimming: boolean): void;
      /**Makes this entity swing their main hand.*/
      swingMainHand(): void;
      /**Makes this entity swing their off hand.*/
      swingOffHand(): void;
   }
   /**Represents a Llama.*/
   export interface obeLlama extends obeChestedHorse, cdpeRangedEntity {
      /**Gets the llama's color.*/
      getColor(): obeLColor;
      /**Get the object's inventory.*/
      getInventory(): obiLlamaInventory;
      /**Gets the llama's strength.*/
      getStrength(): number;
      /**Sets the llama's color.*/
      setColor(color: obeLColor): void;
      /**Sets the llama's strength.*/
      setStrength(strength: number): void;
   }
   /**Represents the base color that the llama has.*/
   export class obeLColor extends jlEnum<obeLColor> {
      /**A brown llama.*/
      static BROWN: obeLColor;
      /**A cream-colored llama.*/
      static CREAMY: obeLColor;
      /**A gray llama.*/
      static GRAY: obeLColor;
      /**A white llama.*/
      static WHITE: obeLColor;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeLColor;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeLColor[];
   }
   /**An interface to the inventory of a Llama.*/
   export interface obiLlamaInventory extends obiSaddledHorseInventory {
      /**Gets the item in the llama's decor slot.*/
      getDecor(): obiItemStack;
      /**Sets the item in the llama's decor slot.*/
      setDecor(stack: obiItemStack): void;
   }
   /**Represents Llama spit.*/
   export interface obeLlamaSpit extends obeProjectile {}
   /**Allows you to pass a Loader function that when a key is accessed that doesn't exist,  automatically loads the entry into the map by calling the loader Function.   .get() Will only return null if the Loader can return null.   You may pass any backing Map to use.   This class is not thread safe and should be wrapped with Collections.synchronizedMap on the OUTSIDE of the LoadingMap if needed.   Do not wrap the backing map with Collections.synchronizedMap.*/
   export class cauLoadingIntMap<V> extends it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<V> {
      constructor (expectedSize: number, loadFactor: number, loader: cgcbFunction<jlInteger, V>);
      constructor (expectedSize: number, loader: cgcbFunction<jlInteger, V>);
      constructor (loader: cgcbFunction<jlInteger, V>);
      get (key: number): V;
   }
   /**Due to java stuff, you will need to cast it to (Function) for some cases*/
   export class cauLFeeder<T> extends jlObject implements cgcbFunction<T, T> {
      constructor ();
      apply (): T;
      apply (input: jlObject): T;
   }
   /**Allows you to pass a Loader function that when a key is accessed that doesn't exists,  automatically loads the entry into the map by calling the loader Function.   .get() Will only return null if the Loader can return null.   You may pass any backing Map to use.   This class is not thread safe and should be wrapped with Collections.synchronizedMap on the OUTSIDE of the LoadingMap if needed.   Do not wrap the backing map with Collections.synchronizedMap.*/
   export class cauLoadingMap<K, V> extends juAbstractMap<K, V> {
      constructor (backingMap: juMap<K, V>, loader: jufFunction<K, V>);
      clear (): void;
      clone (): cauLoadingMap<K, V>;
      containsKey (key: jlObject): boolean;
      containsValue (value: jlObject): boolean;
      entrySet (): juSet<juMEntry<K, V>>;
      equals (o: jlObject): boolean;
      get (key: jlObject): V;
      hashCode (): number;
      isEmpty (): boolean;
      keySet (): juSet<K>;
      /**Creates a LoadingMap with an auto instantiating loader.*/
      static newAutoMap<K, V> (backingMap: juMap<K, V>, keyClass: jlClass<K>, valueClass: jlClass<V>): juMap<K, V>;
      /**Creates a LoadingMap with an auto instantiating loader.*/
      static newAutoMap<K, V> (backingMap: juMap<K, V>, valueClass: jlClass<V>): juMap<K, V>;
      static newHashAutoMap<K, V> (keyClass: jlClass<K>, valueClass: jlClass<V>): juMap<K, V>;
      static newHashAutoMap<K, V> (
         keyClass: jlClass<K>,
         valueClass: jlClass<V>,
         initialCapacity: number,
         loadFactor: number
      ): juMap<K, V>;
      static newHashAutoMap<K, V> (valueClass: jlClass<V>): juMap<K, V>;
      static newHashAutoMap<K, V> (valueClass: jlClass<V>, initialCapacity: number, loadFactor: number): juMap<K, V>;
      /**Initializes an auto loading map using a HashMap*/
      static newHashMap<K, V> (loader: jufFunction<K, V>): juMap<K, V>;
      /**Initializes an auto loading map using a HashMap*/
      static newHashMap<K, V> (loader: jufFunction<K, V>, initialCapacity: number): juMap<K, V>;
      /**Initializes an auto loading map using a HashMap*/
      static newHashMap<K, V> (loader: jufFunction<K, V>, initialCapacity: number, loadFactor: number): juMap<K, V>;
      /**Initializes an auto loading map using an Identity HashMap*/
      static newIdentityHashMap<K, V> (loader: jufFunction<K, V>): juMap<K, V>;
      /**Initializes an auto loading map using an Identity HashMap*/
      static newIdentityHashMap<K, V> (loader: jufFunction<K, V>, initialCapacity: number): juMap<K, V>;
      /**Creates a new LoadingMap with the specified map and loader*/
      static of<K, V> (backingMap: juMap<K, V>, loader: jufFunction<K, V>): juMap<K, V>;
      put (key: K, value: V): V;
      putAll (m: juMap<K, V>): void;
      remove (key: jlObject): V;
      size (): number;
      values (): juCollection<V>;
   }
   /**Due to java stuff, you will need to cast it to (Function) for some cases*/
   export class cauLFeeder<T> extends jlObject implements jufFunction<T, T> {
      constructor ();
      apply (): T;
      apply (input: jlObject): T;
   }
   /**Represents a 3-dimensional position in a world.    No constraints are placed on any angular values other than that they be  specified in degrees. This means that negative angles or angles of greater  magnitude than 360 are valid, but may be normalized to any other equivalent  representation by the implementation.*/
   export class obLocation extends jlObject implements jlCloneable, obcsConfigurationSerializable {
      constructor (world: obWorld, x: number, y: number, z: number);
      constructor (world: obWorld, x: number, y: number, z: number, yaw: number, pitch: number);
      /**Adds the location by another.*/
      add (x: number, y: number, z: number): obLocation;
      /**Adds the location by another.*/
      add (vec: obLocation): obLocation;
      /**Takes the x\/y\/z from base and adds the specified x\/y\/z to it and returns self   This mutates this object, clone first.*/
      add (base: obLocation, x: number, y: number, z: number): obLocation;
      /**Adds the location by a vector.*/
      add (vec: obuVector): obLocation;
      /**Check if each component of this Location is finite.*/
      checkFinite (): void;
      clone (): obLocation;
      /**Creates explosion at this location with given power   Will break blocks and ignite blocks on fire.*/
      createExplosion (power: number): boolean;
      /**Creates explosion at this location with given power and optionally  setting blocks on fire.*/
      createExplosion (power: number, setFire: boolean): boolean;
      /**Creates explosion at this location with given power and optionally  setting blocks on fire.*/
      createExplosion (power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Creates explosion at this location with given power, with the specified entity as the source.*/
      createExplosion (source: obeEntity, power: number): boolean;
      /**Creates explosion at this location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion (source: obeEntity, power: number, setFire: boolean): boolean;
      /**Creates explosion at this location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion (source: obeEntity, power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Required method for deserialization*/
      static deserialize (args: juMap<string, jlObject>): obLocation;
      /**Get the distance between this location and another.*/
      distance (o: obLocation): number;
      /**Get the squared distance between this location and another.*/
      distanceSquared (o: obLocation): number;
      equals (obj: jlObject): boolean;
      /**Gets the block at the represented location*/
      getBlock (): obbBlock;
      /**Gets the floored value of the X component, indicating the block that  this location is contained with.*/
      getBlockX (): number;
      /**Gets the floored value of the Y component, indicating the block that  this location is contained with.*/
      getBlockY (): number;
      /**Gets the floored value of the Z component, indicating the block that  this location is contained with.*/
      getBlockZ (): number;
      /**Gets the chunk at the represented location*/
      getChunk (): obChunk;
      /**Gets a unit-vector pointing in the direction that this Location is  facing.*/
      getDirection (): obuVector;
      /**Returns a list of entities within a bounding box centered around a Location.*/
      getNearbyEntities (x: number, y: number, z: number): juCollection<obeEntity>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (
         clazz: jlClass<obeEntity>,
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (clazz: jlClass<T>, radius: number): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (clazz: jlClass<T>, xzRadius: number, yRadius: number): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (
         clazz: jlClass<T>,
         xRadius: number,
         yRadius: number,
         zRadius: number
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (
         clazz: jlClass<T>,
         xzRadius: number,
         yRadius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity> (
         clazz: jlClass<T>,
         radius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (radius: number): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (xzRadius: number, yRadius: number): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (xRadius: number, yRadius: number, zRadius: number): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<obeLivingEntity>
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (
         xzRadius: number,
         yRadius: number,
         predicate: jufPredicate<obeLivingEntity>
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities (radius: number, predicate: jufPredicate<obeLivingEntity>): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (radius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (xzRadius: number, yRadius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (xRadius: number, yRadius: number, zRadius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<obePlayer>
      ): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (xzRadius: number, yRadius: number, predicate: jufPredicate<obePlayer>): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers (radius: number, predicate: jufPredicate<obePlayer>): juCollection<obePlayer>;
      /**Gets the pitch of this location, measured in degrees.*/
      getPitch (): number;
      /**Gets the world that this location resides in*/
      getWorld (): obWorld;
      /**Gets the x-coordinate of this location*/
      getX (): number;
      /**Gets the y-coordinate of this location*/
      getY (): number;
      /**Gets the yaw of this location, measured in degrees.*/
      getYaw (): number;
      /**Gets the z-coordinate of this location*/
      getZ (): number;
      hashCode (): number;
      isChunkLoaded (): boolean;
      /**Checks if a Chunk has been generated at this location.*/
      isGenerated (): boolean;
      /**Checks if world in this location is present and loaded.*/
      isWorldLoaded (): boolean;
      /**Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2).*/
      length (): number;
      /**Gets the magnitude of the location squared.*/
      lengthSquared (): number;
      /**Safely converts a double (location coordinate) to an int (block  coordinate)*/
      static locToBlock (loc: number): number;
      /**Performs scalar multiplication, multiplying all components with a  scalar.*/
      multiply (m: number): obLocation;
      /**Normalizes the given pitch angle to a value between +\/-90  degrees.*/
      static normalizePitch (pitch: number): number;
      /**Normalizes the given yaw angle to a value between +\/-180  degrees.*/
      static normalizeYaw (yaw: number): number;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      /**Sets the position of this Location and returns itself   This mutates this object, clone first.*/
      set (x: number, y: number, z: number): obLocation;
      /**Sets the yaw and pitch to point  in the direction of the vector.*/
      setDirection (vector: obuVector): obLocation;
      /**Sets the pitch of this location, measured in degrees.*/
      setPitch (pitch: number): void;
      /**Sets the world that this location resides in*/
      setWorld (world: obWorld): void;
      /**Sets the x-coordinate of this location*/
      setX (x: number): void;
      /**Sets the y-coordinate of this location*/
      setY (y: number): void;
      /**Sets the yaw of this location, measured in degrees.*/
      setYaw (yaw: number): void;
      /**Sets the z-coordinate of this location*/
      setZ (z: number): void;
      /**Subtracts the location by another.*/
      subtract (x: number, y: number, z: number): obLocation;
      /**Subtracts the location by another.*/
      subtract (vec: obLocation): obLocation;
      /**Takes the x\/y\/z from base and subtracts the specified x\/y\/z to it and returns self   This mutates this object, clone first.*/
      subtract (base: obLocation, x: number, y: number, z: number): obLocation;
      /**Subtracts the location by a vector.*/
      subtract (vec: obuVector): obLocation;
      toBlockKey (): number;
      toBlockLocation (): obLocation;
      toCenterLocation (): obLocation;
      /**Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())*/
      toHighestLocation (): obLocation;
      /**Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightMap)*/
      toHighestLocation (heightMap: obHeightMap): obLocation;
      toString (): string;
      /**Constructs a new Vector based on this Location*/
      toVector (): obuVector;
      /**Zero this location's components.*/
      zero (): obLocation;
   }
   /**Represents a block (usually a container) that may be locked. When a lock is  active an item with a name corresponding to the key will be required to open  this block.*/
   export interface obbLockable {
      /**Gets the key needed to access the container.*/
      getLock(): string;
      /**Checks if the container has a valid (non empty) key.*/
      isLocked(): boolean;
      /**Sets the key required to access this container.*/
      setLock(key: string): void;
   }
   /**Allows a plugin to be notified anytime AFTER a Profile has been looked up from the Mojang API  This is an opportunity to view the response and potentially cache things.   No guarantees are made about thread execution context for this event. If you need to know, check  event.isAsync()*/
   export class cdpepLookupProfileEvent extends obeEvent {
      constructor (profile: cdppPlayerProfile);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPlayerProfile (): cdppPlayerProfile;
   }
   /**Interface to the inventory of a Loom.*/
   export interface obiLoomInventory extends obiInventory {}
   /**Represents a Container or a  Mob that can have a loot table.    Container loot will only generate upon opening, and only when the container  is first opened.    Entities will only generate loot upon death.*/
   export interface oblLootable {
      /**Clears the associated Loot Table to this object*/
      clearLootTable(): void;
      /**Gets the Loot Table attached to this block or entity.*/
      getLootTable(): oblLootTable;
      /**Get the Loot Table's seed.*/
      getSeed(): number;
      /**Returns whether or not this object has a Loot Table*/
      hasLootTable(): boolean;
      /**Set the loot table for a container or entity.*/
      setLootTable(table: oblLootTable): void;
      /**Set the loot table and seed for a container or entity at the same time.*/
      setLootTable(table: oblLootTable, seed: number): void;
      /**Set the seed used when this Loot Table generates loot.*/
      setSeed(seed: number): void;
   }
   /**Represents an Inventory that can generate loot, such as Chests inside of Fortresses and Mineshafts*/
   export interface cdplLootableBlockInventory extends cdplLootableInventory {
      /**Gets the block that is lootable*/
      getBlock(): obbBlock;
   }
   /**Represents an Inventory that can generate loot, such as Minecarts inside of Mineshafts*/
   export interface cdplLootableEntityInventory extends cdplLootableInventory {
      /**Gets the entity that is lootable*/
      getEntity(): obeEntity;
   }
   /**Represents an Inventory that contains a Loot Table associated to it that will  automatically fill on first open.   A new feature and API is provided to support automatically refreshing the contents  of the inventory based on that Loot Table after a configurable amount of time has passed.   The behavior of how the Inventory is filled based on the loot table may vary based  on Minecraft versions and the Loot Table feature.*/
   export interface cdplLootableInventory extends oblLootable {
      /**Gets the timestamp in milliseconds that the Lootable object was last refilled*/
      getLastFilled(): number;
      /**Gets the timestamp, in milliseconds, of when the player last looted this object*/
      getLastLooted(player: juUUID): jlLong;
      /**Gets the timestamp, in milliseconds, of when the player last looted this object*/
      getLastLooted(player: obePlayer): jlLong;
      /**Gets the timestamp in milliseconds that the Lootable object will refill*/
      getNextRefill(): number;
      /**Whether or not this object has ever been filled*/
      hasBeenFilled(): boolean;
      /**Returns Whether or not this object has been filled and now has a pending refill*/
      hasPendingRefill(): boolean;
      /**Has this player ever looted this block*/
      hasPlayerLooted(player: juUUID): boolean;
      /**Has this player ever looted this block*/
      hasPlayerLooted(player: obePlayer): boolean;
      /**Server owners have to enable whether or not an object in a world should refill*/
      isRefillEnabled(): boolean;
      /**Change the state of whether or not a player has looted this block*/
      setHasPlayerLooted(player: juUUID, looted: boolean): boolean;
      /**Change the state of whether or not a player has looted this block*/
      setHasPlayerLooted(player: obePlayer, looted: boolean): boolean;
      /**Sets the timestamp in milliseconds of the next refill for this object*/
      setNextRefill(refillAt: number): number;
   }
   export class cdplLootableInventoryReplenishEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, inventory: cdplLootableInventory);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getInventory (): cdplLootableInventory;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents additional information a LootTable can use to modify it's  generated loot.*/
   export class oblLootContext extends jlObject {
      /**Get the HumanEntity who killed the getLootedEntity().*/
      getKiller (): obeHumanEntity;
      /**The Location to store where the loot will be generated.*/
      getLocation (): obLocation;
      /**Get the Entity that was killed.*/
      getLootedEntity (): obeEntity;
      /**Represents the  Enchantment.LOOT_BONUS_MOBS the  getKiller() entity has on their equipped item.*/
      getLootingModifier (): number;
      /**Represents the PotionEffectType.LUCK that an  entity can have.*/
      getLuck (): number;
   }
   /**Utility class to make building LootContext easier. The only  required argument is Location with a valid (non-null)  World.*/
   export class oblLBuilder extends jlObject {
      constructor (location: obLocation);
      /**Create a new LootContext instance using the supplied  parameters.*/
      build (): oblLootContext;
      /**Set the HumanEntity that killed  LootContext.getLootedEntity().*/
      killer (killer: obeHumanEntity): oblLBuilder;
      /**The entity that was killed.*/
      lootedEntity (lootedEntity: obeEntity): oblLBuilder;
      /**Set the Enchantment.LOOT_BONUS_MOBS  level equivalent to use when generating loot.*/
      lootingModifier (modifier: number): oblLBuilder;
      /**Set how much luck to have when generating loot.*/
      luck (luck: number): oblLBuilder;
   }
   /**Called when a LootTable is generated in the world for an  InventoryHolder.   This event is NOT currently called when an entity's loot table has been  generated (use EntityDeathEvent.getDrops(), but WILL be called by  plugins invoking  LootTable.fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext).*/
   export class obewLootGenerateEvent extends obewWorldEvent implements obeCancellable {
      constructor (
         world: obWorld,
         entity: obeEntity,
         inventoryHolder: obiInventoryHolder,
         lootTable: oblLootTable,
         lootContext: oblLootContext,
         items: juList<obiItemStack>,
         plugin: boolean
      );
      /**Get the entity used as context for loot generation (if applicable).*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the inventory holder in which the loot was generated.*/
      getInventoryHolder (): obiInventoryHolder;
      /**Get a mutable list of all loot to be generated.*/
      getLoot (): juList<obiItemStack>;
      /**Get the loot context used to provide context to the loot table's loot  generation.*/
      getLootContext (): oblLootContext;
      /**Get the loot table used to generate loot.*/
      getLootTable (): oblLootTable;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Check whether or not this event was called as a result of a plugin  invoking  LootTable.fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext).*/
      isPlugin (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the loot to be generated.*/
      setLoot (loot: juCollection<obiItemStack>): void;
   }
   /**LootTables are technical files that represent what items should be in  naturally generated containers, what items should be dropped when killing a  mob, or what items can be fished.   See the   Minecraft Wiki for more information.*/
   export interface oblLootTable extends obKeyed {
      /**Attempt to fill an inventory with this LootTable's loot.*/
      fillInventory(inventory: obiInventory, random: juRandom, context: oblLootContext): void;
      /**Returns a mutable list of loot generated by this LootTable.*/
      populateLoot(random: juRandom, context: oblLootContext): juCollection<obiItemStack>;
   }
   /**This enum holds a list of all known LootTables offered by Mojang.  This list is not guaranteed to be accurate in future versions.   See the    Minecraft Wiki for more information on loot tables.*/
   export class oblLootTables extends jlEnum<oblLootTables> implements obKeyed {
      static ABANDONED_MINESHAFT: oblLootTables;
      static ARMOR_STAND: oblLootTables;
      static ARMORER_GIFT: oblLootTables;
      static BASTION_BRIDGE: oblLootTables;
      static BASTION_HOGLIN_STABLE: oblLootTables;
      static BASTION_OTHER: oblLootTables;
      static BASTION_TREASURE: oblLootTables;
      static BAT: oblLootTables;
      static BLAZE: oblLootTables;
      static BURIED_TREASURE: oblLootTables;
      static BUTCHER_GIFT: oblLootTables;
      static CARTOGRAPHER_GIFT: oblLootTables;
      static CAT: oblLootTables;
      static CAT_MORNING_GIFT: oblLootTables;
      static CAVE_SPIDER: oblLootTables;
      static CHICKEN: oblLootTables;
      static CLERIC_GIFT: oblLootTables;
      static COD: oblLootTables;
      static COW: oblLootTables;
      static CREEPER: oblLootTables;
      static DESERT_PYRAMID: oblLootTables;
      static DOLPHIN: oblLootTables;
      static DONKEY: oblLootTables;
      static DROWNED: oblLootTables;
      static ELDER_GUARDIAN: oblLootTables;
      static EMPTY: oblLootTables;
      static END_CITY_TREASURE: oblLootTables;
      static ENDER_DRAGON: oblLootTables;
      static ENDERMAN: oblLootTables;
      static ENDERMITE: oblLootTables;
      static EVOKER: oblLootTables;
      static FARMER_GIFT: oblLootTables;
      static FISHERMAN_GIFT: oblLootTables;
      static FISHING: oblLootTables;
      static FISHING_FISH: oblLootTables;
      static FISHING_JUNK: oblLootTables;
      static FISHING_TREASURE: oblLootTables;
      static FLETCHER_GIFT: oblLootTables;
      static FOX: oblLootTables;
      static GHAST: oblLootTables;
      static GIANT: oblLootTables;
      static GUARDIAN: oblLootTables;
      static HORSE: oblLootTables;
      static HUSK: oblLootTables;
      static IGLOO_CHEST: oblLootTables;
      static ILLUSIONER: oblLootTables;
      static IRON_GOLEM: oblLootTables;
      static JUNGLE_TEMPLE: oblLootTables;
      static JUNGLE_TEMPLE_DISPENSER: oblLootTables;
      static LEATHERWORKER_GIFT: oblLootTables;
      static LIBRARIAN_GIFT: oblLootTables;
      static LLAMA: oblLootTables;
      static MAGMA_CUBE: oblLootTables;
      static MASON_GIFT: oblLootTables;
      static MOOSHROOM: oblLootTables;
      static MULE: oblLootTables;
      static NETHER_BRIDGE: oblLootTables;
      static OCELOT: oblLootTables;
      static PANDA: oblLootTables;
      static PARROT: oblLootTables;
      static PHANTOM: oblLootTables;
      static PIG: oblLootTables;
      static PIGLIN_BARTERING: oblLootTables;
      static PILLAGER: oblLootTables;
      static PILLAGER_OUTPOST: oblLootTables;
      static POLAR_BEAR: oblLootTables;
      static PUFFERFISH: oblLootTables;
      static RABBIT: oblLootTables;
      static RAVAGER: oblLootTables;
      static RUINED_PORTAL: oblLootTables;
      static SALMON: oblLootTables;
      static SHEEP: oblLootTables;
      static SHEEP_BLACK: oblLootTables;
      static SHEEP_BLUE: oblLootTables;
      static SHEEP_BROWN: oblLootTables;
      static SHEEP_CYAN: oblLootTables;
      static SHEEP_GRAY: oblLootTables;
      static SHEEP_GREEN: oblLootTables;
      static SHEEP_LIGHT_BLUE: oblLootTables;
      static SHEEP_LIGHT_GRAY: oblLootTables;
      static SHEEP_LIME: oblLootTables;
      static SHEEP_MAGENTA: oblLootTables;
      static SHEEP_ORANGE: oblLootTables;
      static SHEEP_PINK: oblLootTables;
      static SHEEP_PURPLE: oblLootTables;
      static SHEEP_RED: oblLootTables;
      static SHEEP_WHITE: oblLootTables;
      static SHEEP_YELLOW: oblLootTables;
      static SHEPHERD_GIFT: oblLootTables;
      static SHIPWRECK_MAP: oblLootTables;
      static SHIPWRECK_SUPPLY: oblLootTables;
      static SHIPWRECK_TREASURE: oblLootTables;
      static SHULKER: oblLootTables;
      static SILVERFISH: oblLootTables;
      static SIMPLE_DUNGEON: oblLootTables;
      static SKELETON: oblLootTables;
      static SKELETON_HORSE: oblLootTables;
      static SLIME: oblLootTables;
      static SNOW_GOLEM: oblLootTables;
      static SPAWN_BONUS_CHEST: oblLootTables;
      static SPIDER: oblLootTables;
      static SQUID: oblLootTables;
      static STRAY: oblLootTables;
      static STRONGHOLD_CORRIDOR: oblLootTables;
      static STRONGHOLD_CROSSING: oblLootTables;
      static STRONGHOLD_LIBRARY: oblLootTables;
      static TOOLSMITH_GIFT: oblLootTables;
      static TRADER_LLAMA: oblLootTables;
      static TROPICAL_FISH: oblLootTables;
      static TURTLE: oblLootTables;
      static UNDERWATER_RUIN_BIG: oblLootTables;
      static UNDERWATER_RUIN_SMALL: oblLootTables;
      static VEX: oblLootTables;
      static VILLAGE_ARMORER: oblLootTables;
      static VILLAGE_BUTCHER: oblLootTables;
      static VILLAGE_CARTOGRAPHER: oblLootTables;
      static VILLAGE_DESERT_HOUSE: oblLootTables;
      static VILLAGE_FISHER: oblLootTables;
      static VILLAGE_FLETCHER: oblLootTables;
      static VILLAGE_MASON: oblLootTables;
      static VILLAGE_PLAINS_HOUSE: oblLootTables;
      static VILLAGE_SAVANNA_HOUSE: oblLootTables;
      static VILLAGE_SHEPHERD: oblLootTables;
      static VILLAGE_SNOWY_HOUSE: oblLootTables;
      static VILLAGE_TAIGA_HOUSE: oblLootTables;
      static VILLAGE_TANNERY: oblLootTables;
      static VILLAGE_TEMPLE: oblLootTables;
      static VILLAGE_TOOLSMITH: oblLootTables;
      static VILLAGE_WEAPONSMITH: oblLootTables;
      static VILLAGER: oblLootTables;
      static VINDICATOR: oblLootTables;
      static WANDERING_TRADER: oblLootTables;
      static WEAPONSMITH_GIFT: oblLootTables;
      static WITCH: oblLootTables;
      static WITHER: oblLootTables;
      static WITHER_SKELETON: oblLootTables;
      static WOLF: oblLootTables;
      static WOODLAND_MANSION: oblLootTables;
      static ZOMBIE: oblLootTables;
      static ZOMBIE_HORSE: oblLootTables;
      static ZOMBIE_PIGMAN: oblLootTables;
      static ZOMBIE_VILLAGER: oblLootTables;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the LootTable corresponding to this constant.*/
      getLootTable (): oblLootTable;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): oblLootTables;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): oblLootTables[];
   }
   /**Represents a MagmaCube.*/
   export interface obeMagmaCube extends obeSlime {}
   /**Represents the chosen main hand of a player*/
   export class obiMainHand extends jlEnum<obiMainHand> {
      static LEFT: obiMainHand;
      static RIGHT: obiMainHand;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obiMainHand;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obiMainHand[];
   }
   /**The ManuallyAbandonedConversationCanceller is only used as part of a ConversationAbandonedEvent to indicate that the conversation was manually  abandoned by programmatically calling the abandon() method on it.*/
   export class obcManuallyAbandonedConversationCanceller extends jlObject implements obcConversationCanceller {
      constructor ();
      /**Cancels a conversation based on user input.*/
      cancelBasedOnInput (context: obcConversationContext, input: string): boolean;
      /**Allows the ConversationFactory to duplicate this  ConversationCanceller when creating a new Conversation.*/
      clone (): obcConversationCanceller;
      /**Sets the conversation this ConversationCanceller can optionally cancel.*/
      setConversation (conversation: obcConversation): void;
   }
   /**Represents a canvas for drawing to a map. Each canvas is associated with a  specific MapRenderer and represents that renderer's layer on the  map.*/
   export interface obmMapCanvas {
      /**Draw an image to the map.*/
      drawImage(x: number, y: number, image: jaImage): void;
      /**Render text to the map using fancy formatting.*/
      drawText(x: number, y: number, font: obmMapFont, text: string): void;
      /**Get a pixel from the layers below this canvas.*/
      getBasePixel(x: number, y: number): number;
      /**Get the cursor collection associated with this canvas.*/
      getCursors(): obmMapCursorCollection;
      /**Get the map this canvas is attached to.*/
      getMapView(): obmMapView;
      /**Get a pixel from the canvas.*/
      getPixel(x: number, y: number): number;
      /**Set the cursor collection associated with this canvas.*/
      setCursors(cursors: obmMapCursorCollection): void;
      /**Draw a pixel to the canvas.*/
      setPixel(x: number, y: number, color: number): void;
   }
   /**Represents a cursor on a map.*/
   export class obmMapCursor extends jlObject {
      constructor (x: number, y: number, direction: number, type: number, visible: boolean);
      constructor (x: number, y: number, direction: number, type: number, visible: boolean, caption: string);
      constructor (x: number, y: number, direction: number, type: obmMType, visible: boolean);
      constructor (x: number, y: number, direction: number, type: obmMType, visible: boolean, caption: string);
      /**Gets the caption on this cursor.*/
      getCaption (): string;
      /**Get the direction of this cursor.*/
      getDirection (): number;
      /**Get the type of this cursor.*/
      getType (): obmMType;
      /**Get the X position of this cursor.*/
      getX (): number;
      /**Get the Y position of this cursor.*/
      getY (): number;
      /**Get the visibility status of this cursor.*/
      isVisible (): boolean;
      /**Sets the caption on this cursor.*/
      setCaption (caption: string): void;
      /**Set the direction of this cursor.*/
      setDirection (direction: number): void;
      /**Set the type of this cursor.*/
      setType (type: obmMType): void;
      /**Set the visibility status of this cursor.*/
      setVisible (visible: boolean): void;
      /**Set the X position of this cursor.*/
      setX (x: number): void;
      /**Set the Y position of this cursor.*/
      setY (y: number): void;
   }
   /**Represents the standard types of map cursors. More may be made  available by resource packs - the value is used by the client as an  index in the file '.\/misc\/mapicons.png' from minecraft.jar or from a  resource pack.*/
   export class obmMType extends jlEnum<obmMType> {
      static BANNER_BLACK: obmMType;
      static BANNER_BLUE: obmMType;
      static BANNER_BROWN: obmMType;
      static BANNER_CYAN: obmMType;
      static BANNER_GRAY: obmMType;
      static BANNER_GREEN: obmMType;
      static BANNER_LIGHT_BLUE: obmMType;
      static BANNER_LIGHT_GRAY: obmMType;
      static BANNER_LIME: obmMType;
      static BANNER_MAGENTA: obmMType;
      static BANNER_ORANGE: obmMType;
      static BANNER_PINK: obmMType;
      static BANNER_PURPLE: obmMType;
      static BANNER_RED: obmMType;
      static BANNER_WHITE: obmMType;
      static BANNER_YELLOW: obmMType;
      static BLUE_POINTER: obmMType;
      static GREEN_POINTER: obmMType;
      static MANSION: obmMType;
      static RED_MARKER: obmMType;
      static RED_POINTER: obmMType;
      static RED_X: obmMType;
      static SMALL_WHITE_CIRCLE: obmMType;
      static TEMPLE: obmMType;
      static WHITE_CIRCLE: obmMType;
      static WHITE_CROSS: obmMType;
      static WHITE_POINTER: obmMType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obmMType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obmMType[];
   }
   /**Represents all the map cursors on a MapCanvas. Like MapCanvas, a  MapCursorCollection is linked to a specific MapRenderer.*/
   export class obmMapCursorCollection extends jlObject {
      constructor ();
      /**Add a cursor to the collection.*/
      addCursor (x: number, y: number, direction: number): obmMapCursor;
      /**Add a cursor to the collection.*/
      addCursor (cursor: obmMapCursor): obmMapCursor;
      /**Get a cursor from this collection.*/
      getCursor (index: number): obmMapCursor;
      /**Remove a cursor from the collection.*/
      removeCursor (cursor: obmMapCursor): boolean;
      /**Get the amount of cursors in this collection.*/
      size (): number;
   }
   /**Represents a bitmap font drawable to a map.*/
   export class obmMapFont extends jlObject {
      constructor ();
      /**Get the sprite for a given character.*/
      getChar (ch: string): obmMCharacterSprite;
      /**Get the height of this font.*/
      getHeight (): number;
      /**Get the width of the given text as it would be rendered using this  font.*/
      getWidth (text: string): number;
      /**Check whether the given text is valid.*/
      isValid (text: string): boolean;
      /**Set the sprite for a given character.*/
      setChar (ch: string, sprite: obmMCharacterSprite): void;
   }
   /**Represents the graphics for a single character in a MapFont.*/
   export class obmMCharacterSprite extends jlObject {
      constructor (width: number, height: number, data: boolean[]);
      /**Get the value of a pixel of the character.*/
      get (row: number, col: number): boolean;
      /**Get the height of the character sprite.*/
      getHeight (): number;
      /**Get the width of the character sprite.*/
      getWidth (): number;
   }
   /**Called when a map is initialized.*/
   export class obesMapInitializeEvent extends obesServerEvent {
      constructor (mapView: obmMapView);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the map initialized in this event.*/
      getMap (): obmMapView;
   }
   /**Represents a map that can be scalable.*/
   export interface obimMapMeta extends obimItemMeta {
      clone(): obimMapMeta;
      /**Gets the map color that is set.*/
      getColor(): obColor;
      /**Gets the location name that is set.*/
      getLocationName(): string;
      /**Gets the map view that is associated with this map item.*/
      getMapView(): obmMapView;
      /**Checks for existence of a map color.*/
      hasColor(): boolean;
      /**Checks for existence of a location name.*/
      hasLocationName(): boolean;
      /**Checks for existence of an associated map.*/
      hasMapView(): boolean;
      /**Checks to see if this map is scaling.*/
      isScaling(): boolean;
      /**Sets the map color.*/
      setColor(color: obColor): void;
      /**Sets the location name.*/
      setLocationName(name: string): void;
      /**Sets the associated map.*/
      setMapView(map: obmMapView): void;
      /**Sets if this map is scaling or not.*/
      setScaling(value: boolean): void;
   }
   /**Represents the palette that map items use.    These fields are hee base color ranges. Each entry corresponds to four  colors of varying shades with values entry to entry + 3.*/
   export class obmMapPalette extends jlObject {
      /**Resize an image to 128x128.*/
      static resizeImage (image: jaImage): jaiBufferedImage;
   }
   /**Represents a renderer for a map.*/
   export class obmMapRenderer extends jlObject {
      constructor ();
      constructor (contextual: boolean);
      /**Initialize this MapRenderer for the given map.*/
      initialize (map: obmMapView): void;
      /**Get whether the renderer is contextual, i.e.*/
      isContextual (): boolean;
      /**Render to the given map.*/
      render (map: obmMapView, canvas: obmMapCanvas, player: obePlayer): void;
   }
   /**Represents a map item.*/
   export interface obmMapView {
      /**Add a renderer to this map.*/
      addRenderer(renderer: obmMapRenderer): void;
      /**Get the center X position of this map.*/
      getCenterX(): number;
      /**Get the center Z position of this map.*/
      getCenterZ(): number;
      /**Get the ID of this map item for use with MapMeta.*/
      getId(): number;
      /**Get a list of MapRenderers currently in effect.*/
      getRenderers(): juList<obmMapRenderer>;
      /**Get the scale of this map.*/
      getScale(): obmMScale;
      /**Get the world that this map is associated with.*/
      getWorld(): obWorld;
      /**Gets whether the map is locked or not.*/
      isLocked(): boolean;
      /**Gets whether a position cursor should be shown when the map is near its  center.*/
      isTrackingPosition(): boolean;
      /**Whether the map will show a smaller position cursor (true), or no  position cursor (false) when cursor is outside of map's range.*/
      isUnlimitedTracking(): boolean;
      /**Check whether this map is virtual.*/
      isVirtual(): boolean;
      /**Remove a renderer from this map.*/
      removeRenderer(renderer: obmMapRenderer): boolean;
      /**Set the center X position of this map.*/
      setCenterX(x: number): void;
      /**Set the center Z position of this map.*/
      setCenterZ(z: number): void;
      /**Gets whether the map is locked or not.*/
      setLocked(locked: boolean): void;
      /**Set the scale of this map.*/
      setScale(scale: obmMScale): void;
      /**Sets whether a position cursor should be shown when the map is near its  center.*/
      setTrackingPosition(trackingPosition: boolean): void;
      /**Whether the map will show a smaller position cursor (true), or no  position cursor (false) when cursor is outside of map's range.*/
      setUnlimitedTracking(unlimited: boolean): void;
      /**Set the world that this map is associated with.*/
      setWorld(world: obWorld): void;
   }
   /**An enum representing all possible scales a map can be set to.*/
   export class obmMScale extends jlEnum<obmMScale> {
      static CLOSE: obmMScale;
      static CLOSEST: obmMScale;
      static FAR: obmMScale;
      static FARTHEST: obmMScale;
      static NORMAL: obmMScale;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obmMScale;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obmMScale[];
   }
   /**An enum of all material IDs accepted by the official server and client*/
   export class obMaterial extends jlEnum<obMaterial> implements obKeyed {
      static ACACIA_BOAT: obMaterial;
      /**BlockData: Switch*/
      static ACACIA_BUTTON: obMaterial;
      /**BlockData: Door*/
      static ACACIA_DOOR: obMaterial;
      /**BlockData: Fence*/
      static ACACIA_FENCE: obMaterial;
      /**BlockData: Gate*/
      static ACACIA_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static ACACIA_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static ACACIA_LOG: obMaterial;
      static ACACIA_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static ACACIA_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static ACACIA_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static ACACIA_SIGN: obMaterial;
      /**BlockData: Slab*/
      static ACACIA_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static ACACIA_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static ACACIA_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static ACACIA_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static ACACIA_WOOD: obMaterial;
      /**BlockData: RedstoneRail*/
      static ACTIVATOR_RAIL: obMaterial;
      static AIR: obMaterial;
      static ALLIUM: obMaterial;
      static ANCIENT_DEBRIS: obMaterial;
      static ANDESITE: obMaterial;
      /**BlockData: Slab*/
      static ANDESITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static ANDESITE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static ANDESITE_WALL: obMaterial;
      /**BlockData: Directional*/
      static ANVIL: obMaterial;
      static APPLE: obMaterial;
      static ARMOR_STAND: obMaterial;
      static ARROW: obMaterial;
      /**BlockData: Directional*/
      static ATTACHED_MELON_STEM: obMaterial;
      /**BlockData: Directional*/
      static ATTACHED_PUMPKIN_STEM: obMaterial;
      static AZURE_BLUET: obMaterial;
      static BAKED_POTATO: obMaterial;
      /**BlockData: Bamboo*/
      static BAMBOO: obMaterial;
      static BAMBOO_SAPLING: obMaterial;
      /**BlockData: Directional*/
      static BARREL: obMaterial;
      static BARRIER: obMaterial;
      /**BlockData: Orientable*/
      static BASALT: obMaterial;
      static BAT_SPAWN_EGG: obMaterial;
      static BEACON: obMaterial;
      static BEDROCK: obMaterial;
      /**BlockData: Beehive*/
      static BEE_NEST: obMaterial;
      static BEE_SPAWN_EGG: obMaterial;
      static BEEF: obMaterial;
      /**BlockData: Beehive*/
      static BEEHIVE: obMaterial;
      static BEETROOT: obMaterial;
      static BEETROOT_SEEDS: obMaterial;
      static BEETROOT_SOUP: obMaterial;
      /**BlockData: Ageable*/
      static BEETROOTS: obMaterial;
      /**BlockData: Bell*/
      static BELL: obMaterial;
      static BIRCH_BOAT: obMaterial;
      /**BlockData: Switch*/
      static BIRCH_BUTTON: obMaterial;
      /**BlockData: Door*/
      static BIRCH_DOOR: obMaterial;
      /**BlockData: Fence*/
      static BIRCH_FENCE: obMaterial;
      /**BlockData: Gate*/
      static BIRCH_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static BIRCH_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static BIRCH_LOG: obMaterial;
      static BIRCH_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static BIRCH_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static BIRCH_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static BIRCH_SIGN: obMaterial;
      /**BlockData: Slab*/
      static BIRCH_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static BIRCH_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static BIRCH_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static BIRCH_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static BIRCH_WOOD: obMaterial;
      /**BlockData: Rotatable*/
      static BLACK_BANNER: obMaterial;
      /**BlockData: Bed*/
      static BLACK_BED: obMaterial;
      static BLACK_CARPET: obMaterial;
      static BLACK_CONCRETE: obMaterial;
      static BLACK_CONCRETE_POWDER: obMaterial;
      static BLACK_DYE: obMaterial;
      /**BlockData: Directional*/
      static BLACK_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static BLACK_SHULKER_BOX: obMaterial;
      static BLACK_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static BLACK_STAINED_GLASS_PANE: obMaterial;
      static BLACK_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static BLACK_WALL_BANNER: obMaterial;
      static BLACK_WOOL: obMaterial;
      static BLACKSTONE: obMaterial;
      /**BlockData: Slab*/
      static BLACKSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static BLACKSTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static BLACKSTONE_WALL: obMaterial;
      /**BlockData: Furnace*/
      static BLAST_FURNACE: obMaterial;
      static BLAZE_POWDER: obMaterial;
      static BLAZE_ROD: obMaterial;
      static BLAZE_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static BLUE_BANNER: obMaterial;
      /**BlockData: Bed*/
      static BLUE_BED: obMaterial;
      static BLUE_CARPET: obMaterial;
      static BLUE_CONCRETE: obMaterial;
      static BLUE_CONCRETE_POWDER: obMaterial;
      static BLUE_DYE: obMaterial;
      /**BlockData: Directional*/
      static BLUE_GLAZED_TERRACOTTA: obMaterial;
      static BLUE_ICE: obMaterial;
      static BLUE_ORCHID: obMaterial;
      /**BlockData: Directional*/
      static BLUE_SHULKER_BOX: obMaterial;
      static BLUE_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static BLUE_STAINED_GLASS_PANE: obMaterial;
      static BLUE_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static BLUE_WALL_BANNER: obMaterial;
      static BLUE_WOOL: obMaterial;
      static BONE: obMaterial;
      /**BlockData: Orientable*/
      static BONE_BLOCK: obMaterial;
      static BONE_MEAL: obMaterial;
      static BOOK: obMaterial;
      static BOOKSHELF: obMaterial;
      static BOW: obMaterial;
      static BOWL: obMaterial;
      /**BlockData: Waterlogged*/
      static BRAIN_CORAL: obMaterial;
      static BRAIN_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static BRAIN_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static BRAIN_CORAL_WALL_FAN: obMaterial;
      static BREAD: obMaterial;
      /**BlockData: BrewingStand*/
      static BREWING_STAND: obMaterial;
      static BRICK: obMaterial;
      /**BlockData: Slab*/
      static BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static BRICK_WALL: obMaterial;
      static BRICKS: obMaterial;
      /**BlockData: Rotatable*/
      static BROWN_BANNER: obMaterial;
      /**BlockData: Bed*/
      static BROWN_BED: obMaterial;
      static BROWN_CARPET: obMaterial;
      static BROWN_CONCRETE: obMaterial;
      static BROWN_CONCRETE_POWDER: obMaterial;
      static BROWN_DYE: obMaterial;
      /**BlockData: Directional*/
      static BROWN_GLAZED_TERRACOTTA: obMaterial;
      static BROWN_MUSHROOM: obMaterial;
      /**BlockData: MultipleFacing*/
      static BROWN_MUSHROOM_BLOCK: obMaterial;
      /**BlockData: Directional*/
      static BROWN_SHULKER_BOX: obMaterial;
      static BROWN_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static BROWN_STAINED_GLASS_PANE: obMaterial;
      static BROWN_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static BROWN_WALL_BANNER: obMaterial;
      static BROWN_WOOL: obMaterial;
      /**BlockData: BubbleColumn*/
      static BUBBLE_COLUMN: obMaterial;
      /**BlockData: Waterlogged*/
      static BUBBLE_CORAL: obMaterial;
      static BUBBLE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static BUBBLE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static BUBBLE_CORAL_WALL_FAN: obMaterial;
      static BUCKET: obMaterial;
      /**BlockData: Ageable*/
      static CACTUS: obMaterial;
      /**BlockData: Cake*/
      static CAKE: obMaterial;
      /**BlockData: Campfire*/
      static CAMPFIRE: obMaterial;
      static CARROT: obMaterial;
      static CARROT_ON_A_STICK: obMaterial;
      /**BlockData: Ageable*/
      static CARROTS: obMaterial;
      static CARTOGRAPHY_TABLE: obMaterial;
      /**BlockData: Directional*/
      static CARVED_PUMPKIN: obMaterial;
      static CAT_SPAWN_EGG: obMaterial;
      /**BlockData: Levelled*/
      static CAULDRON: obMaterial;
      static CAVE_AIR: obMaterial;
      static CAVE_SPIDER_SPAWN_EGG: obMaterial;
      /**BlockData: Chain*/
      static CHAIN: obMaterial;
      /**BlockData: CommandBlock*/
      static CHAIN_COMMAND_BLOCK: obMaterial;
      static CHAINMAIL_BOOTS: obMaterial;
      static CHAINMAIL_CHESTPLATE: obMaterial;
      static CHAINMAIL_HELMET: obMaterial;
      static CHAINMAIL_LEGGINGS: obMaterial;
      static CHARCOAL: obMaterial;
      /**BlockData: Chest*/
      static CHEST: obMaterial;
      static CHEST_MINECART: obMaterial;
      static CHICKEN: obMaterial;
      static CHICKEN_SPAWN_EGG: obMaterial;
      /**BlockData: Directional*/
      static CHIPPED_ANVIL: obMaterial;
      static CHISELED_NETHER_BRICKS: obMaterial;
      static CHISELED_POLISHED_BLACKSTONE: obMaterial;
      static CHISELED_QUARTZ_BLOCK: obMaterial;
      static CHISELED_RED_SANDSTONE: obMaterial;
      static CHISELED_SANDSTONE: obMaterial;
      static CHISELED_STONE_BRICKS: obMaterial;
      /**BlockData: Ageable*/
      static CHORUS_FLOWER: obMaterial;
      static CHORUS_FRUIT: obMaterial;
      /**BlockData: MultipleFacing*/
      static CHORUS_PLANT: obMaterial;
      static CLAY: obMaterial;
      static CLAY_BALL: obMaterial;
      static CLOCK: obMaterial;
      static COAL: obMaterial;
      static COAL_BLOCK: obMaterial;
      static COAL_ORE: obMaterial;
      static COARSE_DIRT: obMaterial;
      static COBBLESTONE: obMaterial;
      /**BlockData: Slab*/
      static COBBLESTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static COBBLESTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static COBBLESTONE_WALL: obMaterial;
      static COBWEB: obMaterial;
      /**BlockData: Cocoa*/
      static COCOA: obMaterial;
      static COCOA_BEANS: obMaterial;
      static COD: obMaterial;
      static COD_BUCKET: obMaterial;
      static COD_SPAWN_EGG: obMaterial;
      /**BlockData: CommandBlock*/
      static COMMAND_BLOCK: obMaterial;
      static COMMAND_BLOCK_MINECART: obMaterial;
      /**BlockData: Comparator*/
      static COMPARATOR: obMaterial;
      static COMPASS: obMaterial;
      /**BlockData: Levelled*/
      static COMPOSTER: obMaterial;
      /**BlockData: Waterlogged*/
      static CONDUIT: obMaterial;
      static COOKED_BEEF: obMaterial;
      static COOKED_CHICKEN: obMaterial;
      static COOKED_COD: obMaterial;
      static COOKED_MUTTON: obMaterial;
      static COOKED_PORKCHOP: obMaterial;
      static COOKED_RABBIT: obMaterial;
      static COOKED_SALMON: obMaterial;
      static COOKIE: obMaterial;
      static CORNFLOWER: obMaterial;
      static COW_SPAWN_EGG: obMaterial;
      static CRACKED_NETHER_BRICKS: obMaterial;
      static CRACKED_POLISHED_BLACKSTONE_BRICKS: obMaterial;
      static CRACKED_STONE_BRICKS: obMaterial;
      static CRAFTING_TABLE: obMaterial;
      static CREEPER_BANNER_PATTERN: obMaterial;
      /**BlockData: Rotatable*/
      static CREEPER_HEAD: obMaterial;
      static CREEPER_SPAWN_EGG: obMaterial;
      /**BlockData: Directional*/
      static CREEPER_WALL_HEAD: obMaterial;
      /**BlockData: Switch*/
      static CRIMSON_BUTTON: obMaterial;
      /**BlockData: Door*/
      static CRIMSON_DOOR: obMaterial;
      /**BlockData: Fence*/
      static CRIMSON_FENCE: obMaterial;
      /**BlockData: Gate*/
      static CRIMSON_FENCE_GATE: obMaterial;
      static CRIMSON_FUNGUS: obMaterial;
      /**BlockData: Orientable*/
      static CRIMSON_HYPHAE: obMaterial;
      static CRIMSON_NYLIUM: obMaterial;
      static CRIMSON_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static CRIMSON_PRESSURE_PLATE: obMaterial;
      static CRIMSON_ROOTS: obMaterial;
      /**BlockData: Sign*/
      static CRIMSON_SIGN: obMaterial;
      /**BlockData: Slab*/
      static CRIMSON_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static CRIMSON_STAIRS: obMaterial;
      /**BlockData: Orientable*/
      static CRIMSON_STEM: obMaterial;
      /**BlockData: TrapDoor*/
      static CRIMSON_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static CRIMSON_WALL_SIGN: obMaterial;
      static CROSSBOW: obMaterial;
      static CRYING_OBSIDIAN: obMaterial;
      static CUT_RED_SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static CUT_RED_SANDSTONE_SLAB: obMaterial;
      static CUT_SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static CUT_SANDSTONE_SLAB: obMaterial;
      /**BlockData: Rotatable*/
      static CYAN_BANNER: obMaterial;
      /**BlockData: Bed*/
      static CYAN_BED: obMaterial;
      static CYAN_CARPET: obMaterial;
      static CYAN_CONCRETE: obMaterial;
      static CYAN_CONCRETE_POWDER: obMaterial;
      static CYAN_DYE: obMaterial;
      /**BlockData: Directional*/
      static CYAN_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static CYAN_SHULKER_BOX: obMaterial;
      static CYAN_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static CYAN_STAINED_GLASS_PANE: obMaterial;
      static CYAN_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static CYAN_WALL_BANNER: obMaterial;
      static CYAN_WOOL: obMaterial;
      /**BlockData: Directional*/
      static DAMAGED_ANVIL: obMaterial;
      static DANDELION: obMaterial;
      static DARK_OAK_BOAT: obMaterial;
      /**BlockData: Switch*/
      static DARK_OAK_BUTTON: obMaterial;
      /**BlockData: Door*/
      static DARK_OAK_DOOR: obMaterial;
      /**BlockData: Fence*/
      static DARK_OAK_FENCE: obMaterial;
      /**BlockData: Gate*/
      static DARK_OAK_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static DARK_OAK_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static DARK_OAK_LOG: obMaterial;
      static DARK_OAK_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static DARK_OAK_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static DARK_OAK_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static DARK_OAK_SIGN: obMaterial;
      /**BlockData: Slab*/
      static DARK_OAK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static DARK_OAK_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static DARK_OAK_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static DARK_OAK_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static DARK_OAK_WOOD: obMaterial;
      static DARK_PRISMARINE: obMaterial;
      /**BlockData: Slab*/
      static DARK_PRISMARINE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static DARK_PRISMARINE_STAIRS: obMaterial;
      /**BlockData: DaylightDetector*/
      static DAYLIGHT_DETECTOR: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_BRAIN_CORAL: obMaterial;
      static DEAD_BRAIN_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_BRAIN_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static DEAD_BRAIN_CORAL_WALL_FAN: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_BUBBLE_CORAL: obMaterial;
      static DEAD_BUBBLE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_BUBBLE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static DEAD_BUBBLE_CORAL_WALL_FAN: obMaterial;
      static DEAD_BUSH: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_FIRE_CORAL: obMaterial;
      static DEAD_FIRE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_FIRE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static DEAD_FIRE_CORAL_WALL_FAN: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_HORN_CORAL: obMaterial;
      static DEAD_HORN_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_HORN_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static DEAD_HORN_CORAL_WALL_FAN: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_TUBE_CORAL: obMaterial;
      static DEAD_TUBE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static DEAD_TUBE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static DEAD_TUBE_CORAL_WALL_FAN: obMaterial;
      static DEBUG_STICK: obMaterial;
      /**BlockData: RedstoneRail*/
      static DETECTOR_RAIL: obMaterial;
      static DIAMOND: obMaterial;
      static DIAMOND_AXE: obMaterial;
      static DIAMOND_BLOCK: obMaterial;
      static DIAMOND_BOOTS: obMaterial;
      static DIAMOND_CHESTPLATE: obMaterial;
      static DIAMOND_HELMET: obMaterial;
      static DIAMOND_HOE: obMaterial;
      static DIAMOND_HORSE_ARMOR: obMaterial;
      static DIAMOND_LEGGINGS: obMaterial;
      static DIAMOND_ORE: obMaterial;
      static DIAMOND_PICKAXE: obMaterial;
      static DIAMOND_SHOVEL: obMaterial;
      static DIAMOND_SWORD: obMaterial;
      static DIORITE: obMaterial;
      /**BlockData: Slab*/
      static DIORITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static DIORITE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static DIORITE_WALL: obMaterial;
      static DIRT: obMaterial;
      /**BlockData: Dispenser*/
      static DISPENSER: obMaterial;
      static DOLPHIN_SPAWN_EGG: obMaterial;
      static DONKEY_SPAWN_EGG: obMaterial;
      static DRAGON_BREATH: obMaterial;
      static DRAGON_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static DRAGON_HEAD: obMaterial;
      /**BlockData: Directional*/
      static DRAGON_WALL_HEAD: obMaterial;
      static DRIED_KELP: obMaterial;
      static DRIED_KELP_BLOCK: obMaterial;
      /**BlockData: Dispenser*/
      static DROPPER: obMaterial;
      static DROWNED_SPAWN_EGG: obMaterial;
      static EGG: obMaterial;
      static ELDER_GUARDIAN_SPAWN_EGG: obMaterial;
      static ELYTRA: obMaterial;
      static EMERALD: obMaterial;
      static EMERALD_BLOCK: obMaterial;
      static EMERALD_ORE: obMaterial;
      static ENCHANTED_BOOK: obMaterial;
      static ENCHANTED_GOLDEN_APPLE: obMaterial;
      static ENCHANTING_TABLE: obMaterial;
      static END_CRYSTAL: obMaterial;
      static END_GATEWAY: obMaterial;
      static END_PORTAL: obMaterial;
      /**BlockData: EndPortalFrame*/
      static END_PORTAL_FRAME: obMaterial;
      /**BlockData: Directional*/
      static END_ROD: obMaterial;
      static END_STONE: obMaterial;
      /**BlockData: Slab*/
      static END_STONE_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static END_STONE_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static END_STONE_BRICK_WALL: obMaterial;
      static END_STONE_BRICKS: obMaterial;
      /**BlockData: EnderChest*/
      static ENDER_CHEST: obMaterial;
      static ENDER_EYE: obMaterial;
      static ENDER_PEARL: obMaterial;
      static ENDERMAN_SPAWN_EGG: obMaterial;
      static ENDERMITE_SPAWN_EGG: obMaterial;
      static EVOKER_SPAWN_EGG: obMaterial;
      static EXPERIENCE_BOTTLE: obMaterial;
      /**BlockData: Farmland*/
      static FARMLAND: obMaterial;
      static FEATHER: obMaterial;
      static FERMENTED_SPIDER_EYE: obMaterial;
      static FERN: obMaterial;
      static FILLED_MAP: obMaterial;
      /**BlockData: Fire*/
      static FIRE: obMaterial;
      static FIRE_CHARGE: obMaterial;
      /**BlockData: Waterlogged*/
      static FIRE_CORAL: obMaterial;
      static FIRE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static FIRE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static FIRE_CORAL_WALL_FAN: obMaterial;
      static FIREWORK_ROCKET: obMaterial;
      static FIREWORK_STAR: obMaterial;
      static FISHING_ROD: obMaterial;
      static FLETCHING_TABLE: obMaterial;
      static FLINT: obMaterial;
      static FLINT_AND_STEEL: obMaterial;
      static FLOWER_BANNER_PATTERN: obMaterial;
      static FLOWER_POT: obMaterial;
      static FOX_SPAWN_EGG: obMaterial;
      /**BlockData: Ageable*/
      static FROSTED_ICE: obMaterial;
      /**BlockData: Furnace*/
      static FURNACE: obMaterial;
      static FURNACE_MINECART: obMaterial;
      static GHAST_SPAWN_EGG: obMaterial;
      static GHAST_TEAR: obMaterial;
      static GILDED_BLACKSTONE: obMaterial;
      static GLASS: obMaterial;
      static GLASS_BOTTLE: obMaterial;
      /**BlockData: Fence*/
      static GLASS_PANE: obMaterial;
      static GLISTERING_MELON_SLICE: obMaterial;
      static GLOBE_BANNER_PATTERN: obMaterial;
      static GLOWSTONE: obMaterial;
      static GLOWSTONE_DUST: obMaterial;
      static GOLD_BLOCK: obMaterial;
      static GOLD_INGOT: obMaterial;
      static GOLD_NUGGET: obMaterial;
      static GOLD_ORE: obMaterial;
      static GOLDEN_APPLE: obMaterial;
      static GOLDEN_AXE: obMaterial;
      static GOLDEN_BOOTS: obMaterial;
      static GOLDEN_CARROT: obMaterial;
      static GOLDEN_CHESTPLATE: obMaterial;
      static GOLDEN_HELMET: obMaterial;
      static GOLDEN_HOE: obMaterial;
      static GOLDEN_HORSE_ARMOR: obMaterial;
      static GOLDEN_LEGGINGS: obMaterial;
      static GOLDEN_PICKAXE: obMaterial;
      static GOLDEN_SHOVEL: obMaterial;
      static GOLDEN_SWORD: obMaterial;
      static GRANITE: obMaterial;
      /**BlockData: Slab*/
      static GRANITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static GRANITE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static GRANITE_WALL: obMaterial;
      static GRASS: obMaterial;
      /**BlockData: Snowable*/
      static GRASS_BLOCK: obMaterial;
      static GRASS_PATH: obMaterial;
      static GRAVEL: obMaterial;
      /**BlockData: Rotatable*/
      static GRAY_BANNER: obMaterial;
      /**BlockData: Bed*/
      static GRAY_BED: obMaterial;
      static GRAY_CARPET: obMaterial;
      static GRAY_CONCRETE: obMaterial;
      static GRAY_CONCRETE_POWDER: obMaterial;
      static GRAY_DYE: obMaterial;
      /**BlockData: Directional*/
      static GRAY_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static GRAY_SHULKER_BOX: obMaterial;
      static GRAY_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static GRAY_STAINED_GLASS_PANE: obMaterial;
      static GRAY_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static GRAY_WALL_BANNER: obMaterial;
      static GRAY_WOOL: obMaterial;
      /**BlockData: Rotatable*/
      static GREEN_BANNER: obMaterial;
      /**BlockData: Bed*/
      static GREEN_BED: obMaterial;
      static GREEN_CARPET: obMaterial;
      static GREEN_CONCRETE: obMaterial;
      static GREEN_CONCRETE_POWDER: obMaterial;
      static GREEN_DYE: obMaterial;
      /**BlockData: Directional*/
      static GREEN_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static GREEN_SHULKER_BOX: obMaterial;
      static GREEN_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static GREEN_STAINED_GLASS_PANE: obMaterial;
      static GREEN_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static GREEN_WALL_BANNER: obMaterial;
      static GREEN_WOOL: obMaterial;
      /**BlockData: Grindstone*/
      static GRINDSTONE: obMaterial;
      static GUARDIAN_SPAWN_EGG: obMaterial;
      static GUNPOWDER: obMaterial;
      /**BlockData: Orientable*/
      static HAY_BLOCK: obMaterial;
      static HEART_OF_THE_SEA: obMaterial;
      /**BlockData: AnaloguePowerable*/
      static HEAVY_WEIGHTED_PRESSURE_PLATE: obMaterial;
      static HOGLIN_SPAWN_EGG: obMaterial;
      static HONEY_BLOCK: obMaterial;
      static HONEY_BOTTLE: obMaterial;
      static HONEYCOMB: obMaterial;
      static HONEYCOMB_BLOCK: obMaterial;
      /**BlockData: Hopper*/
      static HOPPER: obMaterial;
      static HOPPER_MINECART: obMaterial;
      /**BlockData: Waterlogged*/
      static HORN_CORAL: obMaterial;
      static HORN_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static HORN_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static HORN_CORAL_WALL_FAN: obMaterial;
      static HORSE_SPAWN_EGG: obMaterial;
      static HUSK_SPAWN_EGG: obMaterial;
      static ICE: obMaterial;
      static INFESTED_CHISELED_STONE_BRICKS: obMaterial;
      static INFESTED_COBBLESTONE: obMaterial;
      static INFESTED_CRACKED_STONE_BRICKS: obMaterial;
      static INFESTED_MOSSY_STONE_BRICKS: obMaterial;
      static INFESTED_STONE: obMaterial;
      static INFESTED_STONE_BRICKS: obMaterial;
      static INK_SAC: obMaterial;
      static IRON_AXE: obMaterial;
      /**BlockData: Fence*/
      static IRON_BARS: obMaterial;
      static IRON_BLOCK: obMaterial;
      static IRON_BOOTS: obMaterial;
      static IRON_CHESTPLATE: obMaterial;
      /**BlockData: Door*/
      static IRON_DOOR: obMaterial;
      static IRON_HELMET: obMaterial;
      static IRON_HOE: obMaterial;
      static IRON_HORSE_ARMOR: obMaterial;
      static IRON_INGOT: obMaterial;
      static IRON_LEGGINGS: obMaterial;
      static IRON_NUGGET: obMaterial;
      static IRON_ORE: obMaterial;
      static IRON_PICKAXE: obMaterial;
      static IRON_SHOVEL: obMaterial;
      static IRON_SWORD: obMaterial;
      /**BlockData: TrapDoor*/
      static IRON_TRAPDOOR: obMaterial;
      static ITEM_FRAME: obMaterial;
      /**BlockData: Directional*/
      static JACK_O_LANTERN: obMaterial;
      /**BlockData: Jigsaw*/
      static JIGSAW: obMaterial;
      /**BlockData: Jukebox*/
      static JUKEBOX: obMaterial;
      static JUNGLE_BOAT: obMaterial;
      /**BlockData: Switch*/
      static JUNGLE_BUTTON: obMaterial;
      /**BlockData: Door*/
      static JUNGLE_DOOR: obMaterial;
      /**BlockData: Fence*/
      static JUNGLE_FENCE: obMaterial;
      /**BlockData: Gate*/
      static JUNGLE_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static JUNGLE_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static JUNGLE_LOG: obMaterial;
      static JUNGLE_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static JUNGLE_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static JUNGLE_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static JUNGLE_SIGN: obMaterial;
      /**BlockData: Slab*/
      static JUNGLE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static JUNGLE_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static JUNGLE_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static JUNGLE_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static JUNGLE_WOOD: obMaterial;
      /**BlockData: Ageable*/
      static KELP: obMaterial;
      static KELP_PLANT: obMaterial;
      static KNOWLEDGE_BOOK: obMaterial;
      /**BlockData: Ladder*/
      static LADDER: obMaterial;
      /**BlockData: Lantern*/
      static LANTERN: obMaterial;
      static LAPIS_BLOCK: obMaterial;
      static LAPIS_LAZULI: obMaterial;
      static LAPIS_ORE: obMaterial;
      /**BlockData: Bisected*/
      static LARGE_FERN: obMaterial;
      /**BlockData: Levelled*/
      static LAVA: obMaterial;
      static LAVA_BUCKET: obMaterial;
      static LEAD: obMaterial;
      static LEATHER: obMaterial;
      static LEATHER_BOOTS: obMaterial;
      static LEATHER_CHESTPLATE: obMaterial;
      static LEATHER_HELMET: obMaterial;
      static LEATHER_HORSE_ARMOR: obMaterial;
      static LEATHER_LEGGINGS: obMaterial;
      /**BlockData: Lectern*/
      static LECTERN: obMaterial;
      /**BlockData: Switch*/
      static LEVER: obMaterial;
      /**BlockData: Rotatable*/
      static LIGHT_BLUE_BANNER: obMaterial;
      /**BlockData: Bed*/
      static LIGHT_BLUE_BED: obMaterial;
      static LIGHT_BLUE_CARPET: obMaterial;
      static LIGHT_BLUE_CONCRETE: obMaterial;
      static LIGHT_BLUE_CONCRETE_POWDER: obMaterial;
      static LIGHT_BLUE_DYE: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_BLUE_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_BLUE_SHULKER_BOX: obMaterial;
      static LIGHT_BLUE_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static LIGHT_BLUE_STAINED_GLASS_PANE: obMaterial;
      static LIGHT_BLUE_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_BLUE_WALL_BANNER: obMaterial;
      static LIGHT_BLUE_WOOL: obMaterial;
      /**BlockData: Rotatable*/
      static LIGHT_GRAY_BANNER: obMaterial;
      /**BlockData: Bed*/
      static LIGHT_GRAY_BED: obMaterial;
      static LIGHT_GRAY_CARPET: obMaterial;
      static LIGHT_GRAY_CONCRETE: obMaterial;
      static LIGHT_GRAY_CONCRETE_POWDER: obMaterial;
      static LIGHT_GRAY_DYE: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_GRAY_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_GRAY_SHULKER_BOX: obMaterial;
      static LIGHT_GRAY_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static LIGHT_GRAY_STAINED_GLASS_PANE: obMaterial;
      static LIGHT_GRAY_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIGHT_GRAY_WALL_BANNER: obMaterial;
      static LIGHT_GRAY_WOOL: obMaterial;
      /**BlockData: AnaloguePowerable*/
      static LIGHT_WEIGHTED_PRESSURE_PLATE: obMaterial;
      /**BlockData: Bisected*/
      static LILAC: obMaterial;
      static LILY_OF_THE_VALLEY: obMaterial;
      static LILY_PAD: obMaterial;
      /**BlockData: Rotatable*/
      static LIME_BANNER: obMaterial;
      /**BlockData: Bed*/
      static LIME_BED: obMaterial;
      static LIME_CARPET: obMaterial;
      static LIME_CONCRETE: obMaterial;
      static LIME_CONCRETE_POWDER: obMaterial;
      static LIME_DYE: obMaterial;
      /**BlockData: Directional*/
      static LIME_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIME_SHULKER_BOX: obMaterial;
      static LIME_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static LIME_STAINED_GLASS_PANE: obMaterial;
      static LIME_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static LIME_WALL_BANNER: obMaterial;
      static LIME_WOOL: obMaterial;
      static LINGERING_POTION: obMaterial;
      static LLAMA_SPAWN_EGG: obMaterial;
      static LODESTONE: obMaterial;
      /**BlockData: Directional*/
      static LOOM: obMaterial;
      /**BlockData: Rotatable*/
      static MAGENTA_BANNER: obMaterial;
      /**BlockData: Bed*/
      static MAGENTA_BED: obMaterial;
      static MAGENTA_CARPET: obMaterial;
      static MAGENTA_CONCRETE: obMaterial;
      static MAGENTA_CONCRETE_POWDER: obMaterial;
      static MAGENTA_DYE: obMaterial;
      /**BlockData: Directional*/
      static MAGENTA_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static MAGENTA_SHULKER_BOX: obMaterial;
      static MAGENTA_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static MAGENTA_STAINED_GLASS_PANE: obMaterial;
      static MAGENTA_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static MAGENTA_WALL_BANNER: obMaterial;
      static MAGENTA_WOOL: obMaterial;
      static MAGMA_BLOCK: obMaterial;
      static MAGMA_CREAM: obMaterial;
      static MAGMA_CUBE_SPAWN_EGG: obMaterial;
      static MAP: obMaterial;
      static MELON: obMaterial;
      static MELON_SEEDS: obMaterial;
      static MELON_SLICE: obMaterial;
      /**BlockData: Ageable*/
      static MELON_STEM: obMaterial;
      static MILK_BUCKET: obMaterial;
      static MINECART: obMaterial;
      static MOJANG_BANNER_PATTERN: obMaterial;
      static MOOSHROOM_SPAWN_EGG: obMaterial;
      /**BlockData: MultipleFacing*/
      static MOSSY_COBBLESTONE: obMaterial;
      /**BlockData: Slab*/
      static MOSSY_COBBLESTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static MOSSY_COBBLESTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static MOSSY_COBBLESTONE_WALL: obMaterial;
      /**BlockData: Slab*/
      static MOSSY_STONE_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static MOSSY_STONE_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static MOSSY_STONE_BRICK_WALL: obMaterial;
      static MOSSY_STONE_BRICKS: obMaterial;
      /**BlockData: TechnicalPiston*/
      static MOVING_PISTON: obMaterial;
      static MULE_SPAWN_EGG: obMaterial;
      /**BlockData: MultipleFacing*/
      static MUSHROOM_STEM: obMaterial;
      static MUSHROOM_STEW: obMaterial;
      static MUSIC_DISC_11: obMaterial;
      static MUSIC_DISC_13: obMaterial;
      static MUSIC_DISC_BLOCKS: obMaterial;
      static MUSIC_DISC_CAT: obMaterial;
      static MUSIC_DISC_CHIRP: obMaterial;
      static MUSIC_DISC_FAR: obMaterial;
      static MUSIC_DISC_MALL: obMaterial;
      static MUSIC_DISC_MELLOHI: obMaterial;
      static MUSIC_DISC_PIGSTEP: obMaterial;
      static MUSIC_DISC_STAL: obMaterial;
      static MUSIC_DISC_STRAD: obMaterial;
      static MUSIC_DISC_WAIT: obMaterial;
      static MUSIC_DISC_WARD: obMaterial;
      static MUTTON: obMaterial;
      /**BlockData: Snowable*/
      static MYCELIUM: obMaterial;
      static NAME_TAG: obMaterial;
      static NAUTILUS_SHELL: obMaterial;
      static NETHER_BRICK: obMaterial;
      /**BlockData: Fence*/
      static NETHER_BRICK_FENCE: obMaterial;
      /**BlockData: Slab*/
      static NETHER_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static NETHER_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static NETHER_BRICK_WALL: obMaterial;
      static NETHER_BRICKS: obMaterial;
      static NETHER_GOLD_ORE: obMaterial;
      /**BlockData: Orientable*/
      static NETHER_PORTAL: obMaterial;
      static NETHER_QUARTZ_ORE: obMaterial;
      static NETHER_SPROUTS: obMaterial;
      static NETHER_STAR: obMaterial;
      /**BlockData: Ageable*/
      static NETHER_WART: obMaterial;
      static NETHER_WART_BLOCK: obMaterial;
      static NETHERITE_AXE: obMaterial;
      static NETHERITE_BLOCK: obMaterial;
      static NETHERITE_BOOTS: obMaterial;
      static NETHERITE_CHESTPLATE: obMaterial;
      static NETHERITE_HELMET: obMaterial;
      static NETHERITE_HOE: obMaterial;
      static NETHERITE_INGOT: obMaterial;
      static NETHERITE_LEGGINGS: obMaterial;
      static NETHERITE_PICKAXE: obMaterial;
      static NETHERITE_SCRAP: obMaterial;
      static NETHERITE_SHOVEL: obMaterial;
      static NETHERITE_SWORD: obMaterial;
      static NETHERRACK: obMaterial;
      /**BlockData: NoteBlock*/
      static NOTE_BLOCK: obMaterial;
      static OAK_BOAT: obMaterial;
      /**BlockData: Switch*/
      static OAK_BUTTON: obMaterial;
      /**BlockData: Door*/
      static OAK_DOOR: obMaterial;
      /**BlockData: Fence*/
      static OAK_FENCE: obMaterial;
      /**BlockData: Gate*/
      static OAK_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static OAK_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static OAK_LOG: obMaterial;
      static OAK_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static OAK_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static OAK_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static OAK_SIGN: obMaterial;
      /**BlockData: Slab*/
      static OAK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static OAK_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static OAK_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static OAK_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static OAK_WOOD: obMaterial;
      /**BlockData: Observer*/
      static OBSERVER: obMaterial;
      static OBSIDIAN: obMaterial;
      static OCELOT_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static ORANGE_BANNER: obMaterial;
      /**BlockData: Bed*/
      static ORANGE_BED: obMaterial;
      static ORANGE_CARPET: obMaterial;
      static ORANGE_CONCRETE: obMaterial;
      static ORANGE_CONCRETE_POWDER: obMaterial;
      static ORANGE_DYE: obMaterial;
      /**BlockData: Directional*/
      static ORANGE_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static ORANGE_SHULKER_BOX: obMaterial;
      static ORANGE_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static ORANGE_STAINED_GLASS_PANE: obMaterial;
      static ORANGE_TERRACOTTA: obMaterial;
      static ORANGE_TULIP: obMaterial;
      /**BlockData: Directional*/
      static ORANGE_WALL_BANNER: obMaterial;
      static ORANGE_WOOL: obMaterial;
      static OXEYE_DAISY: obMaterial;
      static PACKED_ICE: obMaterial;
      static PAINTING: obMaterial;
      static PANDA_SPAWN_EGG: obMaterial;
      static PAPER: obMaterial;
      static PARROT_SPAWN_EGG: obMaterial;
      /**BlockData: Bisected*/
      static PEONY: obMaterial;
      /**BlockData: Slab*/
      static PETRIFIED_OAK_SLAB: obMaterial;
      static PHANTOM_MEMBRANE: obMaterial;
      static PHANTOM_SPAWN_EGG: obMaterial;
      static PIG_SPAWN_EGG: obMaterial;
      static PIGLIN_BANNER_PATTERN: obMaterial;
      static PIGLIN_BRUTE_SPAWN_EGG: obMaterial;
      static PIGLIN_SPAWN_EGG: obMaterial;
      static PILLAGER_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static PINK_BANNER: obMaterial;
      /**BlockData: Bed*/
      static PINK_BED: obMaterial;
      static PINK_CARPET: obMaterial;
      static PINK_CONCRETE: obMaterial;
      static PINK_CONCRETE_POWDER: obMaterial;
      static PINK_DYE: obMaterial;
      /**BlockData: Directional*/
      static PINK_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static PINK_SHULKER_BOX: obMaterial;
      static PINK_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static PINK_STAINED_GLASS_PANE: obMaterial;
      static PINK_TERRACOTTA: obMaterial;
      static PINK_TULIP: obMaterial;
      /**BlockData: Directional*/
      static PINK_WALL_BANNER: obMaterial;
      static PINK_WOOL: obMaterial;
      /**BlockData: Piston*/
      static PISTON: obMaterial;
      /**BlockData: PistonHead*/
      static PISTON_HEAD: obMaterial;
      /**BlockData: Rotatable*/
      static PLAYER_HEAD: obMaterial;
      /**BlockData: Directional*/
      static PLAYER_WALL_HEAD: obMaterial;
      /**BlockData: Snowable*/
      static PODZOL: obMaterial;
      static POISONOUS_POTATO: obMaterial;
      static POLAR_BEAR_SPAWN_EGG: obMaterial;
      static POLISHED_ANDESITE: obMaterial;
      /**BlockData: Slab*/
      static POLISHED_ANDESITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static POLISHED_ANDESITE_STAIRS: obMaterial;
      /**BlockData: Orientable*/
      static POLISHED_BASALT: obMaterial;
      static POLISHED_BLACKSTONE: obMaterial;
      /**BlockData: Slab*/
      static POLISHED_BLACKSTONE_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static POLISHED_BLACKSTONE_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static POLISHED_BLACKSTONE_BRICK_WALL: obMaterial;
      static POLISHED_BLACKSTONE_BRICKS: obMaterial;
      /**BlockData: Switch*/
      static POLISHED_BLACKSTONE_BUTTON: obMaterial;
      /**BlockData: Powerable*/
      static POLISHED_BLACKSTONE_PRESSURE_PLATE: obMaterial;
      /**BlockData: Slab*/
      static POLISHED_BLACKSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static POLISHED_BLACKSTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static POLISHED_BLACKSTONE_WALL: obMaterial;
      static POLISHED_DIORITE: obMaterial;
      /**BlockData: Slab*/
      static POLISHED_DIORITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static POLISHED_DIORITE_STAIRS: obMaterial;
      static POLISHED_GRANITE: obMaterial;
      /**BlockData: Slab*/
      static POLISHED_GRANITE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static POLISHED_GRANITE_STAIRS: obMaterial;
      static POPPED_CHORUS_FRUIT: obMaterial;
      static POPPY: obMaterial;
      static PORKCHOP: obMaterial;
      static POTATO: obMaterial;
      /**BlockData: Ageable*/
      static POTATOES: obMaterial;
      static POTION: obMaterial;
      static POTTED_ACACIA_SAPLING: obMaterial;
      static POTTED_ALLIUM: obMaterial;
      static POTTED_AZURE_BLUET: obMaterial;
      static POTTED_BAMBOO: obMaterial;
      static POTTED_BIRCH_SAPLING: obMaterial;
      static POTTED_BLUE_ORCHID: obMaterial;
      static POTTED_BROWN_MUSHROOM: obMaterial;
      static POTTED_CACTUS: obMaterial;
      static POTTED_CORNFLOWER: obMaterial;
      static POTTED_CRIMSON_FUNGUS: obMaterial;
      static POTTED_CRIMSON_ROOTS: obMaterial;
      static POTTED_DANDELION: obMaterial;
      static POTTED_DARK_OAK_SAPLING: obMaterial;
      static POTTED_DEAD_BUSH: obMaterial;
      static POTTED_FERN: obMaterial;
      static POTTED_JUNGLE_SAPLING: obMaterial;
      static POTTED_LILY_OF_THE_VALLEY: obMaterial;
      static POTTED_OAK_SAPLING: obMaterial;
      static POTTED_ORANGE_TULIP: obMaterial;
      static POTTED_OXEYE_DAISY: obMaterial;
      static POTTED_PINK_TULIP: obMaterial;
      static POTTED_POPPY: obMaterial;
      static POTTED_RED_MUSHROOM: obMaterial;
      static POTTED_RED_TULIP: obMaterial;
      static POTTED_SPRUCE_SAPLING: obMaterial;
      static POTTED_WARPED_FUNGUS: obMaterial;
      static POTTED_WARPED_ROOTS: obMaterial;
      static POTTED_WHITE_TULIP: obMaterial;
      static POTTED_WITHER_ROSE: obMaterial;
      /**BlockData: RedstoneRail*/
      static POWERED_RAIL: obMaterial;
      static PRISMARINE: obMaterial;
      /**BlockData: Slab*/
      static PRISMARINE_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static PRISMARINE_BRICK_STAIRS: obMaterial;
      static PRISMARINE_BRICKS: obMaterial;
      static PRISMARINE_CRYSTALS: obMaterial;
      static PRISMARINE_SHARD: obMaterial;
      /**BlockData: Slab*/
      static PRISMARINE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static PRISMARINE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static PRISMARINE_WALL: obMaterial;
      static PUFFERFISH: obMaterial;
      static PUFFERFISH_BUCKET: obMaterial;
      static PUFFERFISH_SPAWN_EGG: obMaterial;
      static PUMPKIN: obMaterial;
      static PUMPKIN_PIE: obMaterial;
      static PUMPKIN_SEEDS: obMaterial;
      /**BlockData: Ageable*/
      static PUMPKIN_STEM: obMaterial;
      /**BlockData: Rotatable*/
      static PURPLE_BANNER: obMaterial;
      /**BlockData: Bed*/
      static PURPLE_BED: obMaterial;
      static PURPLE_CARPET: obMaterial;
      static PURPLE_CONCRETE: obMaterial;
      static PURPLE_CONCRETE_POWDER: obMaterial;
      static PURPLE_DYE: obMaterial;
      /**BlockData: Directional*/
      static PURPLE_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static PURPLE_SHULKER_BOX: obMaterial;
      static PURPLE_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static PURPLE_STAINED_GLASS_PANE: obMaterial;
      static PURPLE_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static PURPLE_WALL_BANNER: obMaterial;
      static PURPLE_WOOL: obMaterial;
      static PURPUR_BLOCK: obMaterial;
      /**BlockData: Orientable*/
      static PURPUR_PILLAR: obMaterial;
      /**BlockData: Slab*/
      static PURPUR_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static PURPUR_STAIRS: obMaterial;
      static QUARTZ: obMaterial;
      static QUARTZ_BLOCK: obMaterial;
      static QUARTZ_BRICKS: obMaterial;
      /**BlockData: Orientable*/
      static QUARTZ_PILLAR: obMaterial;
      /**BlockData: Slab*/
      static QUARTZ_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static QUARTZ_STAIRS: obMaterial;
      static RABBIT: obMaterial;
      static RABBIT_FOOT: obMaterial;
      static RABBIT_HIDE: obMaterial;
      static RABBIT_SPAWN_EGG: obMaterial;
      static RABBIT_STEW: obMaterial;
      /**BlockData: Rail*/
      static RAIL: obMaterial;
      static RAVAGER_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static RED_BANNER: obMaterial;
      /**BlockData: Bed*/
      static RED_BED: obMaterial;
      static RED_CARPET: obMaterial;
      static RED_CONCRETE: obMaterial;
      static RED_CONCRETE_POWDER: obMaterial;
      static RED_DYE: obMaterial;
      /**BlockData: Directional*/
      static RED_GLAZED_TERRACOTTA: obMaterial;
      static RED_MUSHROOM: obMaterial;
      /**BlockData: MultipleFacing*/
      static RED_MUSHROOM_BLOCK: obMaterial;
      /**BlockData: Slab*/
      static RED_NETHER_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static RED_NETHER_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static RED_NETHER_BRICK_WALL: obMaterial;
      static RED_NETHER_BRICKS: obMaterial;
      static RED_SAND: obMaterial;
      static RED_SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static RED_SANDSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static RED_SANDSTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static RED_SANDSTONE_WALL: obMaterial;
      /**BlockData: Directional*/
      static RED_SHULKER_BOX: obMaterial;
      static RED_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static RED_STAINED_GLASS_PANE: obMaterial;
      static RED_TERRACOTTA: obMaterial;
      static RED_TULIP: obMaterial;
      /**BlockData: Directional*/
      static RED_WALL_BANNER: obMaterial;
      static RED_WOOL: obMaterial;
      static REDSTONE: obMaterial;
      static REDSTONE_BLOCK: obMaterial;
      /**BlockData: Lightable*/
      static REDSTONE_LAMP: obMaterial;
      /**BlockData: Lightable*/
      static REDSTONE_ORE: obMaterial;
      /**BlockData: Lightable*/
      static REDSTONE_TORCH: obMaterial;
      /**BlockData: RedstoneWallTorch*/
      static REDSTONE_WALL_TORCH: obMaterial;
      /**BlockData: RedstoneWire*/
      static REDSTONE_WIRE: obMaterial;
      /**BlockData: Repeater*/
      static REPEATER: obMaterial;
      /**BlockData: CommandBlock*/
      static REPEATING_COMMAND_BLOCK: obMaterial;
      /**BlockData: RespawnAnchor*/
      static RESPAWN_ANCHOR: obMaterial;
      /**BlockData: Bisected*/
      static ROSE_BUSH: obMaterial;
      static ROTTEN_FLESH: obMaterial;
      static SADDLE: obMaterial;
      static SALMON: obMaterial;
      static SALMON_BUCKET: obMaterial;
      static SALMON_SPAWN_EGG: obMaterial;
      static SAND: obMaterial;
      static SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static SANDSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static SANDSTONE_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static SANDSTONE_WALL: obMaterial;
      /**BlockData: Scaffolding*/
      static SCAFFOLDING: obMaterial;
      static SCUTE: obMaterial;
      static SEA_LANTERN: obMaterial;
      /**BlockData: SeaPickle*/
      static SEA_PICKLE: obMaterial;
      static SEAGRASS: obMaterial;
      static SHEARS: obMaterial;
      static SHEEP_SPAWN_EGG: obMaterial;
      static SHIELD: obMaterial;
      static SHROOMLIGHT: obMaterial;
      /**BlockData: Directional*/
      static SHULKER_BOX: obMaterial;
      static SHULKER_SHELL: obMaterial;
      static SHULKER_SPAWN_EGG: obMaterial;
      static SILVERFISH_SPAWN_EGG: obMaterial;
      static SKELETON_HORSE_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static SKELETON_SKULL: obMaterial;
      static SKELETON_SPAWN_EGG: obMaterial;
      /**BlockData: Directional*/
      static SKELETON_WALL_SKULL: obMaterial;
      static SKULL_BANNER_PATTERN: obMaterial;
      static SLIME_BALL: obMaterial;
      static SLIME_BLOCK: obMaterial;
      static SLIME_SPAWN_EGG: obMaterial;
      static SMITHING_TABLE: obMaterial;
      /**BlockData: Furnace*/
      static SMOKER: obMaterial;
      static SMOOTH_QUARTZ: obMaterial;
      /**BlockData: Slab*/
      static SMOOTH_QUARTZ_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static SMOOTH_QUARTZ_STAIRS: obMaterial;
      static SMOOTH_RED_SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static SMOOTH_RED_SANDSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static SMOOTH_RED_SANDSTONE_STAIRS: obMaterial;
      static SMOOTH_SANDSTONE: obMaterial;
      /**BlockData: Slab*/
      static SMOOTH_SANDSTONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static SMOOTH_SANDSTONE_STAIRS: obMaterial;
      static SMOOTH_STONE: obMaterial;
      /**BlockData: Slab*/
      static SMOOTH_STONE_SLAB: obMaterial;
      /**BlockData: Snow*/
      static SNOW: obMaterial;
      static SNOW_BLOCK: obMaterial;
      static SNOWBALL: obMaterial;
      /**BlockData: Campfire*/
      static SOUL_CAMPFIRE: obMaterial;
      /**BlockData: Fire*/
      static SOUL_FIRE: obMaterial;
      /**BlockData: Lantern*/
      static SOUL_LANTERN: obMaterial;
      static SOUL_SAND: obMaterial;
      static SOUL_SOIL: obMaterial;
      /**BlockData: Lightable*/
      static SOUL_TORCH: obMaterial;
      /**BlockData: Directional*/
      static SOUL_WALL_TORCH: obMaterial;
      static SPAWNER: obMaterial;
      static SPECTRAL_ARROW: obMaterial;
      static SPIDER_EYE: obMaterial;
      static SPIDER_SPAWN_EGG: obMaterial;
      static SPLASH_POTION: obMaterial;
      static SPONGE: obMaterial;
      static SPRUCE_BOAT: obMaterial;
      /**BlockData: Switch*/
      static SPRUCE_BUTTON: obMaterial;
      /**BlockData: Door*/
      static SPRUCE_DOOR: obMaterial;
      /**BlockData: Fence*/
      static SPRUCE_FENCE: obMaterial;
      /**BlockData: Gate*/
      static SPRUCE_FENCE_GATE: obMaterial;
      /**BlockData: Leaves*/
      static SPRUCE_LEAVES: obMaterial;
      /**BlockData: Orientable*/
      static SPRUCE_LOG: obMaterial;
      static SPRUCE_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static SPRUCE_PRESSURE_PLATE: obMaterial;
      /**BlockData: Sapling*/
      static SPRUCE_SAPLING: obMaterial;
      /**BlockData: Sign*/
      static SPRUCE_SIGN: obMaterial;
      /**BlockData: Slab*/
      static SPRUCE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static SPRUCE_STAIRS: obMaterial;
      /**BlockData: TrapDoor*/
      static SPRUCE_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static SPRUCE_WALL_SIGN: obMaterial;
      /**BlockData: Orientable*/
      static SPRUCE_WOOD: obMaterial;
      static SQUID_SPAWN_EGG: obMaterial;
      static STICK: obMaterial;
      /**BlockData: Piston*/
      static STICKY_PISTON: obMaterial;
      static STONE: obMaterial;
      static STONE_AXE: obMaterial;
      /**BlockData: Slab*/
      static STONE_BRICK_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static STONE_BRICK_STAIRS: obMaterial;
      /**BlockData: Wall*/
      static STONE_BRICK_WALL: obMaterial;
      static STONE_BRICKS: obMaterial;
      /**BlockData: Switch*/
      static STONE_BUTTON: obMaterial;
      static STONE_HOE: obMaterial;
      static STONE_PICKAXE: obMaterial;
      /**BlockData: Powerable*/
      static STONE_PRESSURE_PLATE: obMaterial;
      static STONE_SHOVEL: obMaterial;
      /**BlockData: Slab*/
      static STONE_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static STONE_STAIRS: obMaterial;
      static STONE_SWORD: obMaterial;
      /**BlockData: Directional*/
      static STONECUTTER: obMaterial;
      static STRAY_SPAWN_EGG: obMaterial;
      static STRIDER_SPAWN_EGG: obMaterial;
      static STRING: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_ACACIA_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_ACACIA_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_BIRCH_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_BIRCH_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_CRIMSON_HYPHAE: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_CRIMSON_STEM: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_DARK_OAK_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_DARK_OAK_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_JUNGLE_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_JUNGLE_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_OAK_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_OAK_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_SPRUCE_LOG: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_SPRUCE_WOOD: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_WARPED_HYPHAE: obMaterial;
      /**BlockData: Orientable*/
      static STRIPPED_WARPED_STEM: obMaterial;
      /**BlockData: StructureBlock*/
      static STRUCTURE_BLOCK: obMaterial;
      static STRUCTURE_VOID: obMaterial;
      static SUGAR: obMaterial;
      /**BlockData: Ageable*/
      static SUGAR_CANE: obMaterial;
      /**BlockData: Bisected*/
      static SUNFLOWER: obMaterial;
      static SUSPICIOUS_STEW: obMaterial;
      static SWEET_BERRIES: obMaterial;
      /**BlockData: Ageable*/
      static SWEET_BERRY_BUSH: obMaterial;
      /**BlockData: Bisected*/
      static TALL_GRASS: obMaterial;
      /**BlockData: Bisected*/
      static TALL_SEAGRASS: obMaterial;
      /**BlockData: AnaloguePowerable*/
      static TARGET: obMaterial;
      static TERRACOTTA: obMaterial;
      static TIPPED_ARROW: obMaterial;
      /**BlockData: TNT*/
      static TNT: obMaterial;
      static TNT_MINECART: obMaterial;
      static TORCH: obMaterial;
      static TOTEM_OF_UNDYING: obMaterial;
      static TRADER_LLAMA_SPAWN_EGG: obMaterial;
      /**BlockData: Chest*/
      static TRAPPED_CHEST: obMaterial;
      static TRIDENT: obMaterial;
      /**BlockData: Tripwire*/
      static TRIPWIRE: obMaterial;
      /**BlockData: TripwireHook*/
      static TRIPWIRE_HOOK: obMaterial;
      static TROPICAL_FISH: obMaterial;
      static TROPICAL_FISH_BUCKET: obMaterial;
      static TROPICAL_FISH_SPAWN_EGG: obMaterial;
      /**BlockData: Waterlogged*/
      static TUBE_CORAL: obMaterial;
      static TUBE_CORAL_BLOCK: obMaterial;
      /**BlockData: Waterlogged*/
      static TUBE_CORAL_FAN: obMaterial;
      /**BlockData: CoralWallFan*/
      static TUBE_CORAL_WALL_FAN: obMaterial;
      /**BlockData: TurtleEgg*/
      static TURTLE_EGG: obMaterial;
      static TURTLE_HELMET: obMaterial;
      static TURTLE_SPAWN_EGG: obMaterial;
      /**BlockData: Ageable*/
      static TWISTING_VINES: obMaterial;
      static TWISTING_VINES_PLANT: obMaterial;
      static VEX_SPAWN_EGG: obMaterial;
      static VILLAGER_SPAWN_EGG: obMaterial;
      static VINDICATOR_SPAWN_EGG: obMaterial;
      /**BlockData: MultipleFacing*/
      static VINE: obMaterial;
      static VOID_AIR: obMaterial;
      /**BlockData: Directional*/
      static WALL_TORCH: obMaterial;
      static WANDERING_TRADER_SPAWN_EGG: obMaterial;
      /**BlockData: Switch*/
      static WARPED_BUTTON: obMaterial;
      /**BlockData: Door*/
      static WARPED_DOOR: obMaterial;
      /**BlockData: Fence*/
      static WARPED_FENCE: obMaterial;
      /**BlockData: Gate*/
      static WARPED_FENCE_GATE: obMaterial;
      static WARPED_FUNGUS: obMaterial;
      static WARPED_FUNGUS_ON_A_STICK: obMaterial;
      /**BlockData: Orientable*/
      static WARPED_HYPHAE: obMaterial;
      static WARPED_NYLIUM: obMaterial;
      static WARPED_PLANKS: obMaterial;
      /**BlockData: Powerable*/
      static WARPED_PRESSURE_PLATE: obMaterial;
      static WARPED_ROOTS: obMaterial;
      /**BlockData: Sign*/
      static WARPED_SIGN: obMaterial;
      /**BlockData: Slab*/
      static WARPED_SLAB: obMaterial;
      /**BlockData: Stairs*/
      static WARPED_STAIRS: obMaterial;
      /**BlockData: Orientable*/
      static WARPED_STEM: obMaterial;
      /**BlockData: TrapDoor*/
      static WARPED_TRAPDOOR: obMaterial;
      /**BlockData: WallSign*/
      static WARPED_WALL_SIGN: obMaterial;
      static WARPED_WART_BLOCK: obMaterial;
      /**BlockData: Levelled*/
      static WATER: obMaterial;
      static WATER_BUCKET: obMaterial;
      /**BlockData: Ageable*/
      static WEEPING_VINES: obMaterial;
      static WEEPING_VINES_PLANT: obMaterial;
      static WET_SPONGE: obMaterial;
      /**BlockData: Ageable*/
      static WHEAT: obMaterial;
      static WHEAT_SEEDS: obMaterial;
      /**BlockData: Rotatable*/
      static WHITE_BANNER: obMaterial;
      /**BlockData: Bed*/
      static WHITE_BED: obMaterial;
      static WHITE_CARPET: obMaterial;
      static WHITE_CONCRETE: obMaterial;
      static WHITE_CONCRETE_POWDER: obMaterial;
      static WHITE_DYE: obMaterial;
      /**BlockData: Directional*/
      static WHITE_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static WHITE_SHULKER_BOX: obMaterial;
      static WHITE_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static WHITE_STAINED_GLASS_PANE: obMaterial;
      static WHITE_TERRACOTTA: obMaterial;
      static WHITE_TULIP: obMaterial;
      /**BlockData: Directional*/
      static WHITE_WALL_BANNER: obMaterial;
      static WHITE_WOOL: obMaterial;
      static WITCH_SPAWN_EGG: obMaterial;
      static WITHER_ROSE: obMaterial;
      /**BlockData: Rotatable*/
      static WITHER_SKELETON_SKULL: obMaterial;
      static WITHER_SKELETON_SPAWN_EGG: obMaterial;
      /**BlockData: Directional*/
      static WITHER_SKELETON_WALL_SKULL: obMaterial;
      static WOLF_SPAWN_EGG: obMaterial;
      static WOODEN_AXE: obMaterial;
      static WOODEN_HOE: obMaterial;
      static WOODEN_PICKAXE: obMaterial;
      static WOODEN_SHOVEL: obMaterial;
      static WOODEN_SWORD: obMaterial;
      static WRITABLE_BOOK: obMaterial;
      static WRITTEN_BOOK: obMaterial;
      /**BlockData: Rotatable*/
      static YELLOW_BANNER: obMaterial;
      /**BlockData: Bed*/
      static YELLOW_BED: obMaterial;
      static YELLOW_CARPET: obMaterial;
      static YELLOW_CONCRETE: obMaterial;
      static YELLOW_CONCRETE_POWDER: obMaterial;
      static YELLOW_DYE: obMaterial;
      /**BlockData: Directional*/
      static YELLOW_GLAZED_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static YELLOW_SHULKER_BOX: obMaterial;
      static YELLOW_STAINED_GLASS: obMaterial;
      /**BlockData: GlassPane*/
      static YELLOW_STAINED_GLASS_PANE: obMaterial;
      static YELLOW_TERRACOTTA: obMaterial;
      /**BlockData: Directional*/
      static YELLOW_WALL_BANNER: obMaterial;
      static YELLOW_WOOL: obMaterial;
      static ZOGLIN_SPAWN_EGG: obMaterial;
      /**BlockData: Rotatable*/
      static ZOMBIE_HEAD: obMaterial;
      static ZOMBIE_HORSE_SPAWN_EGG: obMaterial;
      static ZOMBIE_SPAWN_EGG: obMaterial;
      static ZOMBIE_VILLAGER_SPAWN_EGG: obMaterial;
      /**BlockData: Directional*/
      static ZOMBIE_WALL_HEAD: obMaterial;
      static ZOMBIFIED_PIGLIN_SPAWN_EGG: obMaterial;
      /**Creates a new BlockData instance for this Material, with all  properties initialized to unspecified defaults.*/
      createBlockData (): obbdBlockData;
      /**Creates a new BlockData instance for this Material, with all  properties initialized to unspecified defaults, except for those provided  in data.*/
      createBlockData (data: string): obbdBlockData;
      /**Creates a new BlockData instance for this Material, with  all properties initialized to unspecified defaults.*/
      createBlockData (consumer: jufConsumer<obbdBlockData>): obbdBlockData;
      /**Obtains the blast resistance value (also known as block "durability").*/
      getBlastResistance (): number;
      /**Determines the remaining item in a crafting grid after crafting with this  ingredient.*/
      getCraftingRemainingItem (): obMaterial;
      /**Gets the MaterialData class associated with this Material*/
      getData (): jlClass<obmMaterialData>;
      /**Obtains the block's hardness level (also known as "strength").*/
      getHardness (): number;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Attempts to get the Material with the given name.*/
      static getMaterial (name: string): obMaterial;
      /**Attempts to get the Material with the given name.*/
      static getMaterial (name: string, legacyName: boolean): obMaterial;
      /**Gets the maximum durability of this material*/
      getMaxDurability (): number;
      /**Gets the maximum amount of this material that can be held in a stack*/
      getMaxStackSize (): number;
      /**Return the translation key for the Material, so the client can translate it into the active  locale when using a TranslatableComponent.*/
      getTranslationKey (): string;
      hasGravity (): boolean;
      /**Check if the material is an air block.*/
      isAir (): boolean;
      /**Checks if this Material is a placable block*/
      isBlock (): boolean;
      /**Check if the material is a block and can burn away*/
      isBurnable (): boolean;
      /**Checks if this Material is edible.*/
      isEdible (): boolean;
      isEmpty (): boolean;
      /**Check if the material is a block and can catch fire*/
      isFlammable (): boolean;
      /**Checks if this Material can be used as fuel in a Furnace*/
      isFuel (): boolean;
      /**Checks if this Material can be interacted with.*/
      isInteractable (): boolean;
      /**Checks if this Material is an obtainable item.*/
      isItem (): boolean;
      /**Check if the material is a block and completely blocks vision*/
      isOccluding (): boolean;
      isRecord (): boolean;
      /**Check if the material is a block and solid (can be built upon)*/
      isSolid (): boolean;
      /**Attempts to match the Material with the given name.*/
      static matchMaterial (name: string): obMaterial;
      /**Attempts to match the Material with the given name.*/
      static matchMaterial (name: string, legacyName: boolean): obMaterial;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obMaterial;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obMaterial[];
   }
   export class cdpMaterialSetTag extends ipptBaseTag<obMaterial, cdpMaterialSetTag> {
      constructor (materials: juCollection<obMaterial>);
      constructor (filter: jufPredicate<obMaterial>);
      constructor (...materials: obMaterial[]);
      constructor (key: obNamespacedKey, materials: juCollection<obMaterial>);
      constructor (
         key: obNamespacedKey,
         materials: juCollection<obMaterial>,
         ...globalPredicates: jufPredicate<obMaterial>[]
      );
      constructor (key: obNamespacedKey, filter: jufPredicate<obMaterial>);
      constructor (key: obNamespacedKey, ...materials: obMaterial[]);
      getAllPossibleValues (): juSet<obMaterial>;
      getName (value: obMaterial): string;
      isTagged (block: obbBlock): boolean;
      isTagged (block: obbBlockState): boolean;
      isTagged (block: obbdBlockData): boolean;
      isTagged (item: obiItemStack): boolean;
      /**Returns whether or not this tag has an entry for the specified item.*/
      isTagged (material: obMaterial): boolean;
   }
   /**Represents a collection tags to identify materials that share common properties.  Will map to minecraft for missing tags, as well as custom ones that may be useful.*/
   export class cdpMaterialTags extends jlObject {
      constructor ();
   }
   /**This is a Configuration implementation that does not save or load  from any source, and stores all values in memory only.  This is useful for temporary Configurations for providing defaults.*/
   export class obcMemoryConfiguration extends obcMemorySection implements obcConfiguration {
      constructor ();
      constructor (defaults: obcConfiguration);
      /**Sets the default value in the root at the given path as provided.*/
      addDefault (path: string, value: jlObject): void;
      /**Sets the default values of the given paths as provided.*/
      addDefaults (defaults: juMap<string, jlObject>): void;
      /**Sets the default values of the given paths as provided.*/
      addDefaults (defaults: obcConfiguration): void;
      /**Gets the source Configuration for this configuration.*/
      getDefaults (): obcConfiguration;
      /**Gets the parent ConfigurationSection that directly contains  this ConfigurationSection.*/
      getParent (): obcConfigurationSection;
      /**Gets the ConfigurationOptions for this Configuration.*/
      options (): obcMemoryConfigurationOptions;
      /**Sets the source of all default values for this Configuration.*/
      setDefaults (defaults: obcConfiguration): void;
   }
   /**Various settings for controlling the input and output of a MemoryConfiguration*/
   export class obcMemoryConfigurationOptions extends obcConfigurationOptions {
      constructor (configuration: obcMemoryConfiguration);
      /**Returns the Configuration that this object is responsible for.*/
      configuration (): obcMemoryConfiguration;
      /**Sets if the Configuration should copy values from its default  Configuration directly.*/
      copyDefaults (value: boolean): obcMemoryConfigurationOptions;
      /**Sets the char that will be used to separate ConfigurationSections*/
      pathSeparator (value: string): obcMemoryConfigurationOptions;
   }
   /**Represents a key used for accessing memory values of a  LivingEntity.*/
   export class obemMemoryKey<T> extends jlObject implements obKeyed {
      /**Returns a MemoryKey by a NamespacedKey.*/
      static getByKey (namespacedKey: obNamespacedKey): obemMemoryKey;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Gets the class of values associated with this memory.*/
      getMemoryClass (): jlClass<T>;
      /**Returns the set of all MemoryKeys.*/
      static values (): juSet<obemMemoryKey>;
   }
   /**A type of ConfigurationSection that is stored in memory.*/
   export class obcMemorySection extends jlObject implements obcConfigurationSection {
      constructor ();
      constructor (parent: obcConfigurationSection, path: string);
      /**Sets the default value in the root at the given path as provided.*/
      addDefault (path: string, value: jlObject): void;
      /**Checks if this ConfigurationSection contains the given path.*/
      contains (path: string): boolean;
      /**Checks if this ConfigurationSection contains the given path.*/
      contains (path: string, ignoreDefault: boolean): boolean;
      /**Creates a full path to the given ConfigurationSection from its  root Configuration.*/
      static createPath (section: obcConfigurationSection, key: string): string;
      /**Creates a relative path to the given ConfigurationSection from  the given relative section.*/
      static createPath (section: obcConfigurationSection, key: string, relativeTo: obcConfigurationSection): string;
      /**Creates an empty ConfigurationSection at the specified path.*/
      createSection (path: string): obcConfigurationSection;
      /**Creates a ConfigurationSection at the specified path, with  specified values.*/
      createSection (path: string, map: juMap<any, any>): obcConfigurationSection;
      /**Gets the requested Object by path.*/
      get (path: string): jlObject;
      /**Gets the requested Object by path, returning a default value if not  found.*/
      get (path: string, def: jlObject): jlObject;
      /**Gets the requested boolean by path.*/
      getBoolean (path: string): boolean;
      /**Gets the requested boolean by path, returning a default value if not  found.*/
      getBoolean (path: string, def: boolean): boolean;
      /**Gets the requested List of Boolean by path.*/
      getBooleanList (path: string): juList<boolean>;
      /**Gets the requested List of Byte by path.*/
      getByteList (path: string): juList<jlByte>;
      /**Gets the requested List of Character by path.*/
      getCharacterList (path: string): juList<jlCharacter>;
      /**Gets the requested Color by path.*/
      getColor (path: string): obColor;
      /**Gets the requested Color by path, returning a default value if  not found.*/
      getColor (path: string, def: obColor): obColor;
      /**Gets the requested ConfigurationSection by path.*/
      getConfigurationSection (path: string): obcConfigurationSection;
      /**Gets the path of this ConfigurationSection from its root Configuration*/
      getCurrentPath (): string;
      getDefault (path: string): jlObject;
      /**Gets the equivalent ConfigurationSection from the default  Configuration defined in ConfigurationSection.getRoot().*/
      getDefaultSection (): obcConfigurationSection;
      /**Gets the requested double by path.*/
      getDouble (path: string): number;
      /**Gets the requested double by path, returning a default value if not  found.*/
      getDouble (path: string, def: number): number;
      /**Gets the requested List of Double by path.*/
      getDoubleList (path: string): juList<number>;
      /**Gets the requested List of Float by path.*/
      getFloatList (path: string): juList<jlFloat>;
      /**Gets the requested int by path.*/
      getInt (path: string): number;
      /**Gets the requested int by path, returning a default value if not found.*/
      getInt (path: string, def: number): number;
      /**Gets the requested List of Integer by path.*/
      getIntegerList (path: string): juList<jlInteger>;
      /**Gets the requested ItemStack by path.*/
      getItemStack (path: string): obiItemStack;
      /**Gets the requested ItemStack by path, returning a default value  if not found.*/
      getItemStack (path: string, def: obiItemStack): obiItemStack;
      /**Gets a set containing all keys in this section.*/
      getKeys (deep: boolean): juSet<string>;
      /**Gets the requested List by path.*/
      getList (path: string): juList<any>;
      /**Gets the requested List by path, returning a default value if not  found.*/
      getList (path: string, def: juList<any>): juList<any>;
      /**Gets the requested Location by path.*/
      getLocation (path: string): obLocation;
      /**Gets the requested Location by path, returning a default value if  not found.*/
      getLocation (path: string, def: obLocation): obLocation;
      /**Gets the requested long by path.*/
      getLong (path: string): number;
      /**Gets the requested long by path, returning a default value if not  found.*/
      getLong (path: string, def: number): number;
      /**Gets the requested List of Long by path.*/
      getLongList (path: string): juList<jlLong>;
      /**Gets the requested List of Maps by path.*/
      getMapList (path: string): juList<juMap<any, any>>;
      /**Gets the name of this individual ConfigurationSection, in the  path.*/
      getName (): string;
      /**Gets the requested object at the given path.*/
      getObject<T> (path: string, clazz: jlClass<T>): T;
      /**Gets the requested object at the given path, returning a default value if  not found   If the Object does not exist then the specified default value will  returned regardless of if a default has been identified in the root  Configuration.*/
      getObject<T> (path: string, clazz: jlClass<T>, def: T): T;
      /**Gets the requested OfflinePlayer by path.*/
      getOfflinePlayer (path: string): obOfflinePlayer;
      /**Gets the requested OfflinePlayer by path, returning a default  value if not found.*/
      getOfflinePlayer (path: string, def: obOfflinePlayer): obOfflinePlayer;
      /**Gets the parent ConfigurationSection that directly contains  this ConfigurationSection.*/
      getParent (): obcConfigurationSection;
      /**Gets the root Configuration that contains this ConfigurationSection*/
      getRoot (): obcConfiguration;
      /**Gets the requested ConfigurationSerializable object at the given  path.*/
      getSerializable<T extends obcsConfigurationSerializable> (path: string, clazz: jlClass<T>): T;
      /**Gets the requested ConfigurationSerializable object at the given  path, returning a default value if not found   If the Object does not exist then the specified default value will  returned regardless of if a default has been identified in the root  Configuration.*/
      getSerializable<T extends obcsConfigurationSerializable> (path: string, clazz: jlClass<T>, def: T): T;
      /**Gets the requested List of Short by path.*/
      getShortList (path: string): juList<jlShort>;
      /**Gets the requested String by path.*/
      getString (path: string): string;
      /**Gets the requested String by path, returning a default value if not  found.*/
      getString (path: string, def: string): string;
      /**Gets the requested List of String by path.*/
      getStringList (path: string): juList<string>;
      /**Gets a Map containing all keys and their values for this section.*/
      getValues (deep: boolean): juMap<string, jlObject>;
      /**Gets the requested Vector by path.*/
      getVector (path: string): obuVector;
      /**Gets the requested Vector by path, returning a default value if  not found.*/
      getVector (path: string, def: obuVector): obuVector;
      /**Checks if the specified path is a boolean.*/
      isBoolean (path: string): boolean;
      /**Checks if the specified path is a Color.*/
      isColor (path: string): boolean;
      /**Checks if the specified path is a ConfigurationSection.*/
      isConfigurationSection (path: string): boolean;
      /**Checks if the specified path is a double.*/
      isDouble (path: string): boolean;
      /**Checks if the specified path is an int.*/
      isInt (path: string): boolean;
      /**Checks if the specified path is an ItemStack.*/
      isItemStack (path: string): boolean;
      /**Checks if the specified path is a List.*/
      isList (path: string): boolean;
      /**Checks if the specified path is a Location.*/
      isLocation (path: string): boolean;
      /**Checks if the specified path is a long.*/
      isLong (path: string): boolean;
      /**Checks if the specified path is an OfflinePlayer.*/
      isOfflinePlayer (path: string): boolean;
      isPrimitiveWrapper (input: jlObject): boolean;
      /**Checks if this ConfigurationSection has a value set for the  given path.*/
      isSet (path: string): boolean;
      /**Checks if the specified path is a String.*/
      isString (path: string): boolean;
      /**Checks if the specified path is a Vector.*/
      isVector (path: string): boolean;
      mapChildrenKeys (output: juSet<string>, section: obcConfigurationSection, deep: boolean): void;
      mapChildrenValues (output: juMap<string, jlObject>, section: obcConfigurationSection, deep: boolean): void;
      /**Sets the specified path to the given value.*/
      set (path: string, value: jlObject): void;
      toString (): string;
   }
   /**Represents a merchant. A merchant is a special type of inventory which can  facilitate custom trades between items.*/
   export interface obiMerchant {
      /**Get the recipe at a certain index of this merchant's trade list.*/
      getRecipe(i: number): obiMerchantRecipe;
      /**Get the number of trades this merchant currently has available.*/
      getRecipeCount(): number;
      /**Get a list of trades currently available from this merchant.*/
      getRecipes(): juList<obiMerchantRecipe>;
      /**Gets the player this merchant is trading with, or null if it is not  currently trading.*/
      getTrader(): obeHumanEntity;
      /**Gets whether this merchant is currently trading.*/
      isTrading(): boolean;
      /**Set the recipe at a certain index of this merchant's trade list.*/
      setRecipe(i: number, recipe: obiMerchantRecipe): void;
      /**Set the list of trades currently available from this merchant.*/
      setRecipes(recipes: juList<obiMerchantRecipe>): void;
   }
   /**Represents a trading inventory between a player and a merchant.    The holder of this Inventory is the owning Villager, or null if the player is  trading with a merchant created by a plugin.*/
   export interface obiMerchantInventory extends obiInventory {
      /**Gets the Merchant associated with this inventory.*/
      getMerchant(): obiMerchant;
      /**Get the currently active recipe.*/
      getSelectedRecipe(): obiMerchantRecipe;
      /**Get the index of the currently selected recipe.*/
      getSelectedRecipeIndex(): number;
   }
   /**Represents a merchant's trade.   Trades can take one or two ingredients, and provide one result. The  ingredients' ItemStack amounts are respected in the trade.    A trade has a limited number of uses, after which the trade can no longer be  used, unless the player uses a different trade, which will cause its maximum  uses to increase.    A trade may or may not reward experience for being completed.*/
   export class obiMerchantRecipe extends jlObject implements obiRecipe {
      constructor (result: obiItemStack, maxUses: number);
      constructor (result: obiItemStack, uses: number, maxUses: number, experienceReward: boolean);
      constructor (
         result: obiItemStack,
         uses: number,
         maxUses: number,
         experienceReward: boolean,
         villagerExperience: number,
         priceMultiplier: number
      );
      constructor (
         result: obiItemStack,
         uses: number,
         maxUses: number,
         experienceReward: boolean,
         villagerExperience: number,
         priceMultiplier: number,
         ignoreDiscounts: boolean
      );
      addIngredient (item: obiItemStack): void;
      getIngredients (): juList<obiItemStack>;
      /**Get the maximum number of uses this trade has.*/
      getMaxUses (): number;
      /**Gets the additive price multiplier for the cost of this trade.*/
      getPriceMultiplier (): number;
      /**Get the result of this recipe.*/
      getResult (): obiItemStack;
      /**Get the number of times this trade has been used.*/
      getUses (): number;
      /**Gets the amount of experience the villager earns from this trade.*/
      getVillagerExperience (): number;
      /**Whether to reward experience to the player for the trade.*/
      hasExperienceReward (): boolean;
      removeIngredient (index: number): void;
      /**Set whether to reward experience to the player for the trade.*/
      setExperienceReward (flag: boolean): void;
      setIgnoreDiscounts (ignoreDiscounts: boolean): void;
      setIngredients (ingredients: juList<obiItemStack>): void;
      /**Set the maximum number of uses this trade has.*/
      setMaxUses (maxUses: number): void;
      /**Sets the additive price multiplier for the cost of this trade.*/
      setPriceMultiplier (priceMultiplier: number): void;
      /**Set the number of times this trade has been used.*/
      setUses (uses: number): void;
      /**Sets the amount of experience the villager earns from this trade.*/
      setVillagerExperience (villagerExperience: number): void;
      shouldIgnoreDiscounts (): boolean;
   }
   /**For when all you care about is just messaging*/
   export interface obcMessageCommandSender extends obcCommandSender {
      /**Adds a new empty PermissionAttachment to this object*/
      addAttachment(plugin: obpPlugin): obpPermissionAttachment;
      /**Temporarily adds a new empty PermissionAttachment to this  object*/
      addAttachment(plugin: obpPlugin, ticks: number): obpPermissionAttachment;
      /**Adds a new PermissionAttachment with a single permission by  name and value*/
      addAttachment(plugin: obpPlugin, name: string, value: boolean): obpPermissionAttachment;
      /**Temporarily adds a new PermissionAttachment with a single  permission by name and value*/
      addAttachment(plugin: obpPlugin, name: string, value: boolean, ticks: number): obpPermissionAttachment;
      /**Gets a set containing all of the permissions currently in effect by  this object*/
      getEffectivePermissions(): juSet<obpPermissionAttachmentInfo>;
      /**Gets the name of this command sender*/
      getName(): string;
      /**Returns the server instance that this command is running on*/
      getServer(): obServer;
      /**Gets the value of the specified permission, if set.*/
      hasPermission(name: string): boolean;
      /**Gets the value of the specified permission, if set.*/
      hasPermission(perm: obpPermission): boolean;
      /**Checks if this object is a server operator*/
      isOp(): boolean;
      /**Checks if this object contains an override for the specified  permission, by fully qualified name*/
      isPermissionSet(name: string): boolean;
      /**Checks if this object contains an override for the specified Permission*/
      isPermissionSet(perm: obpPermission): boolean;
      /**Recalculates the permissions for this object, if the attachments have  changed values.*/
      recalculatePermissions(): void;
      /**Removes the given PermissionAttachment from this object*/
      removeAttachment(attachment: obpPermissionAttachment): void;
      /**Sends this sender multiple messages*/
      sendMessage(messages: string[]): void;
      /**Sends this sender a message*/
      sendMessage(sender: juUUID, message: string): void;
      /**Sends this sender multiple messages*/
      sendMessage(sender: juUUID, messages: string[]): void;
      /**Sets the operator status of this object*/
      setOp(value: boolean): void;
      spigot(): obcCSpigot;
   }
   /**MessagePrompt is the base class for any prompt that only displays a message  to the user and requires no input.*/
   export class obcMessagePrompt extends jlObject implements obcPrompt {
      constructor ();
      /**Accepts and ignores any user input, returning the next prompt in the  prompt graph instead.*/
      acceptInput (context: obcConversationContext, input: string): obcPrompt;
      /**Message prompts never wait for user input before continuing.*/
      blocksForInput (context: obcConversationContext): boolean;
      /**Override this method to return the next prompt in the prompt graph.*/
      getNextPrompt (context: obcConversationContext): obcPrompt;
   }
   /**Thrown if a Plugin Message is sent that is too large to be sent.*/
   export class obpmMessageTooLargeException extends jlRuntimeException {
      constructor ();
      constructor (message: number[]);
      constructor (length: number);
      constructor (msg: string);
   }
   /**A class responsible for managing the registrations of plugin channels and  their listeners.   Channel names must contain a colon separator and consist of only [a-z0-9\/._-]  - i.e. they MUST be valid NamespacedKey. The "BungeeCord" channel is  an exception and may only take this form.*/
   export interface obpmMessenger {
      /**Dispatches the specified incoming message to any registered listeners.*/
      dispatchIncomingMessage(source: obePlayer, channel: string, message: number[]): void;
      /**Gets a set containing all the incoming plugin channel registrations  that are on the requested channel.*/
      getIncomingChannelRegistrations(channel: string): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channel registrations  that the specified plugin has.*/
      getIncomingChannelRegistrations(plugin: obpPlugin): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channel registrations  that the specified plugin has on the requested channel.*/
      getIncomingChannelRegistrations(plugin: obpPlugin, channel: string): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channels.*/
      getIncomingChannels(): juSet<string>;
      /**Gets a set containing all the incoming plugin channels that the  specified plugin is registered for.*/
      getIncomingChannels(plugin: obpPlugin): juSet<string>;
      /**Gets a set containing all the outgoing plugin channels.*/
      getOutgoingChannels(): juSet<string>;
      /**Gets a set containing all the outgoing plugin channels that the  specified plugin is registered to.*/
      getOutgoingChannels(plugin: obpPlugin): juSet<string>;
      /**Checks if the specified plugin has registered to receive incoming  messages through the requested channel.*/
      isIncomingChannelRegistered(plugin: obpPlugin, channel: string): boolean;
      /**Checks if the specified plugin has registered to send outgoing messages  through the requested channel.*/
      isOutgoingChannelRegistered(plugin: obpPlugin, channel: string): boolean;
      /**Checks if the specified plugin message listener registration is valid.*/
      isRegistrationValid(registration: obpmPluginMessageListenerRegistration): boolean;
      /**Checks if the specified channel is a reserved name.*/
      isReservedChannel(channel: string): boolean;
      /**Registers the specific plugin for listening on the requested incoming  plugin channel, allowing it to act upon any plugin messages.*/
      registerIncomingPluginChannel(
         plugin: obpPlugin,
         channel: string,
         listener: obpmPluginMessageListener
      ): obpmPluginMessageListenerRegistration;
      /**Registers the specific plugin to the requested outgoing plugin channel,  allowing it to send messages through that channel to any clients.*/
      registerOutgoingPluginChannel(plugin: obpPlugin, channel: string): void;
      /**Unregisters the specific plugin from listening on all plugin channels  through all listeners.*/
      unregisterIncomingPluginChannel(plugin: obpPlugin): void;
      /**Unregisters the specific plugin from listening on the requested  incoming plugin channel, no longer allowing it to act upon any plugin  messages.*/
      unregisterIncomingPluginChannel(plugin: obpPlugin, channel: string): void;
      /**Unregisters the specific plugin's listener from listening on the  requested incoming plugin channel, no longer allowing it to act upon  any plugin messages.*/
      unregisterIncomingPluginChannel(plugin: obpPlugin, channel: string, listener: obpmPluginMessageListener): void;
      /**Unregisters the specific plugin from all outgoing plugin channels, no  longer allowing it to send any plugin messages.*/
      unregisterOutgoingPluginChannel(plugin: obpPlugin): void;
      /**Unregisters the specific plugin from the requested outgoing plugin  channel, no longer allowing it to send messages through that channel to  any clients.*/
      unregisterOutgoingPluginChannel(plugin: obpPlugin, channel: string): void;
   }
   /**This interface is implemented by all objects that can provide metadata  about themselves.*/
   export interface obmMetadatable {
      /**Returns a list of previously set metadata values from the implementing  object's metadata store.*/
      getMetadata(metadataKey: string): juList<obmMetadataValue>;
      /**Tests to see whether the implementing object contains the given  metadata value in its metadata store.*/
      hasMetadata(metadataKey: string): boolean;
      /**Removes the given metadata value from the implementing object's  metadata store.*/
      removeMetadata(metadataKey: string, owningPlugin: obpPlugin): void;
      /**Sets a metadata value in the implementing object's metadata store.*/
      setMetadata(metadataKey: string, newMetadataValue: obmMetadataValue): void;
   }
   /**A MetadataConversionException is thrown any time a LazyMetadataValue attempts to convert a metadata value to an inappropriate  data type.*/
   export class obmMetadataConversionException extends jlRuntimeException {}
   /**A MetadataEvaluationException is thrown any time a LazyMetadataValue fails to evaluate its value due to an exception. The  originating exception will be included as this exception's cause.*/
   export class obmMetadataEvaluationException extends jlRuntimeException {}
   export interface obmMetadataStore<T> {
      /**Returns all metadata values attached to an object.*/
      getMetadata(subject: T, metadataKey: string): juList<obmMetadataValue>;
      /**Tests to see if a metadata attribute has been set on an object.*/
      hasMetadata(subject: T, metadataKey: string): boolean;
      /**Invalidates all metadata in the metadata store that originates from the  given plugin.*/
      invalidateAll(owningPlugin: obpPlugin): void;
      /**Removes a metadata item owned by a plugin from a subject.*/
      removeMetadata(subject: T, metadataKey: string, owningPlugin: obpPlugin): void;
      /**Adds a metadata value to an object.*/
      setMetadata(subject: T, metadataKey: string, newMetadataValue: obmMetadataValue): void;
   }
   export class obmMetadataStoreBase<T> extends jlObject {
      constructor ();
      /**Creates a unique name for the object receiving metadata by combining  unique data from the subject with a metadataKey.*/
      disambiguate (subject: T, metadataKey: string): string;
      /**Returns all metadata values attached to an object.*/
      getMetadata (subject: T, metadataKey: string): juList<obmMetadataValue>;
      /**Tests to see if a metadata attribute has been set on an object.*/
      hasMetadata (subject: T, metadataKey: string): boolean;
      /**Invalidates all metadata in the metadata store that originates from the  given plugin.*/
      invalidateAll (owningPlugin: obpPlugin): void;
      /**Removes all metadata in the metadata store that originates from the  given plugin.*/
      removeAll (owningPlugin: obpPlugin): void;
      /**Removes a metadata item owned by a plugin from a subject.*/
      removeMetadata (subject: T, metadataKey: string, owningPlugin: obpPlugin): void;
      /**Adds a metadata value to an object.*/
      setMetadata (subject: T, metadataKey: string, newMetadataValue: obmMetadataValue): void;
   }
   export interface obmMetadataValue {
      /**Attempts to convert the value of this metadata item into a boolean.*/
      asBoolean(): boolean;
      /**Attempts to convert the value of this metadata item into a byte.*/
      asByte(): number;
      /**Attempts to convert the value of this metadata item into a double.*/
      asDouble(): number;
      /**Attempts to convert the value of this metadata item into a float.*/
      asFloat(): number;
      /**Attempts to convert the value of this metadata item into an int.*/
      asInt(): number;
      /**Attempts to convert the value of this metadata item into a long.*/
      asLong(): number;
      /**Attempts to convert the value of this metadata item into a short.*/
      asShort(): number;
      /**Attempts to convert the value of this metadata item into a string.*/
      asString(): string;
      /**Returns the Plugin that created this metadata item.*/
      getOwningPlugin(): obpPlugin;
      /**Invalidates this metadata item, forcing it to recompute when next  accessed.*/
      invalidate(): void;
      /**Fetches the value of this metadata item.*/
      value(): jlObject;
   }
   /**Optional base class for facilitating MetadataValue implementations.    This provides all the conversion functions for MetadataValue so that  writing an implementation of MetadataValue is as simple as implementing  value() and invalidate().*/
   export class obmMetadataValueAdapter extends jlObject implements obmMetadataValue {
      constructor (owningPlugin: obpPlugin);
      /**Attempts to convert the value of this metadata item into a boolean.*/
      asBoolean (): boolean;
      /**Attempts to convert the value of this metadata item into a byte.*/
      asByte (): number;
      /**Attempts to convert the value of this metadata item into a double.*/
      asDouble (): number;
      /**Attempts to convert the value of this metadata item into a float.*/
      asFloat (): number;
      /**Attempts to convert the value of this metadata item into an int.*/
      asInt (): number;
      /**Attempts to convert the value of this metadata item into a long.*/
      asLong (): number;
      /**Attempts to convert the value of this metadata item into a short.*/
      asShort (): number;
      /**Attempts to convert the value of this metadata item into a string.*/
      asString (): string;
      /**Returns the Plugin that created this metadata item.*/
      getOwningPlugin (): obpPlugin;
   }
   export class cdpeeMethodHandleEventExecutor extends jlObject implements obpEventExecutor {
      constructor (eventClass: jlClass<obeEvent>, handle: jliMethodHandle);
      constructor (eventClass: jlClass<obeEvent>, m: jlrMethod);
      execute (listener: obeListener, event: obeEvent): void;
   }
   /**Represents a minecart entity.*/
   export interface obeMinecart extends obeVehicle {
      /**Gets a minecart's damage.*/
      getDamage(): number;
      /**Gets the derailed velocity modifier.*/
      getDerailedVelocityMod(): obuVector;
      /**Gets the display block for this minecart.*/
      getDisplayBlock(): obmMaterialData;
      /**Gets the display block for this minecart.*/
      getDisplayBlockData(): obbdBlockData;
      /**Gets the offset of the display block.*/
      getDisplayBlockOffset(): number;
      /**Gets the flying velocity modifier.*/
      getFlyingVelocityMod(): obuVector;
      /**Gets the maximum speed of a minecart.*/
      getMaxSpeed(): number;
      /**Gets the Material that represents this Minecart type.*/
      getMinecartMaterial(): obMaterial;
      /**Returns whether this minecart will slow down faster without a passenger  occupying it*/
      isSlowWhenEmpty(): boolean;
      /**Sets a minecart's damage.*/
      setDamage(damage: number): void;
      /**Sets the derailed velocity modifier.*/
      setDerailedVelocityMod(derailed: obuVector): void;
      /**Sets the display block for this minecart.*/
      setDisplayBlock(material: obmMaterialData): void;
      /**Sets the display block for this minecart.*/
      setDisplayBlockData(blockData: obbdBlockData): void;
      /**Sets the offset of the display block.*/
      setDisplayBlockOffset(offset: number): void;
      /**Sets the flying velocity modifier.*/
      setFlyingVelocityMod(flying: obuVector): void;
      /**Sets the maximum speed of a minecart.*/
      setMaxSpeed(speed: number): void;
      /**Sets whether this minecart will slow down faster without a passenger  occupying it*/
      setSlowWhenEmpty(slow: boolean): void;
   }
   /**Represents the built-in Minecraft font.*/
   export class obmMinecraftFont extends obmMapFont {
      constructor ();
   }
   /**Represents how a Structure can be mirrored upon  being loaded.*/
   export class obbsMirror extends jlEnum<obbsMirror> {
      /**Structure is mirrored front to back.*/
      static FRONT_BACK: obbsMirror;
      /**Structure is mirrored left to right.*/
      static LEFT_RIGHT: obbsMirror;
      /**No mirroring.*/
      static NONE: obbsMirror;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbsMirror;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbsMirror[];
   }
   /**Represents a Mob. Mobs are living entities with simple AI.*/
   export interface obeMob extends obeLivingEntity, oblLootable {
      /**Enables access to control the pathing of an Entity*/
      getPathfinder(): cdpePathfinder;
      /**Gets the current target of this Mob*/
      getTarget(): obeLivingEntity;
      /**Gets whether this mob is aware of its surroundings.*/
      isAware(): boolean;
      /**Check if this mob is exposed to daylight*/
      isInDaylight(): boolean;
      /**Sets whether this mob is aware of its surroundings.*/
      setAware(aware: boolean): void;
      /**Instructs this Mob to set the specified LivingEntity as its target.*/
      setTarget(target: obeLivingEntity): void;
   }
   /**Represents a part of the "brain" of a mob. It tracks all tasks (running or not), allows adding and removing goals*/
   export interface cdpeaMobGoals {
      addGoal<T extends obeMob>(mob: T, priority: number, goal: cdpeaGoal<T>): void;
      getAllGoals<T extends obeMob>(mob: T): juCollection<cdpeaGoal<T>>;
      getAllGoals<T extends obeMob>(mob: T, type: cdpeaGoalType): juCollection<cdpeaGoal<T>>;
      getAllGoalsWithout<T extends obeMob>(mob: T, type: cdpeaGoalType): juCollection<cdpeaGoal<T>>;
      getGoal<T extends obeMob>(mob: T, key: cdpeaGoalKey<T>): cdpeaGoal<T>;
      getGoals<T extends obeMob>(mob: T, key: cdpeaGoalKey<T>): juCollection<cdpeaGoal<T>>;
      getRunningGoals<T extends obeMob>(mob: T): juCollection<cdpeaGoal<T>>;
      getRunningGoals<T extends obeMob>(mob: T, type: cdpeaGoalType): juCollection<cdpeaGoal<T>>;
      getRunningGoalsWithout<T extends obeMob>(mob: T, type: cdpeaGoalType): juCollection<cdpeaGoal<T>>;
      hasGoal<T extends obeMob>(mob: T, key: cdpeaGoalKey<T>): boolean;
      removeAllGoals<T extends obeMob>(mob: T): void;
      removeAllGoals<T extends obeMob>(mob: T, type: cdpeaGoalType): void;
      removeGoal<T extends obeMob>(mob: T, goal: cdpeaGoal<T>): void;
      removeGoal<T extends obeMob>(mob: T, key: cdpeaGoalKey<T>): void;
   }
   /**Called when the moisture level of a soil block changes.*/
   export class obebMoistureChangeEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, newState: obbBlockState);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new state of the affected block.*/
      getNewState (): obbBlockState;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a Monster.*/
   export interface obeMonster extends obeCreature {}
   export class ippwMoonPhase extends jlEnum<ippwMoonPhase> {
      static FIRST_QUARTER: ippwMoonPhase;
      static FULL_MOON: ippwMoonPhase;
      static LAST_QUARTER: ippwMoonPhase;
      static NEW_MOON: ippwMoonPhase;
      static WANING_CRESCENT: ippwMoonPhase;
      static WANING_GIBBOUS: ippwMoonPhase;
      static WAXING_CRESCENT: ippwMoonPhase;
      static WAXING_GIBBOUS: ippwMoonPhase;
      static getPhase (day: number): ippwMoonPhase;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): ippwMoonPhase;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): ippwMoonPhase[];
   }
   /**Implements a Most Recently Used cache in front of a backing map, to quickly access the last accessed result.*/
   export class cauMRUMapCache<K, V> extends juAbstractMap<K, V> {
      constructor (backingMap: juMap<K, V>);
      clear (): void;
      containsKey (key: jlObject): boolean;
      containsValue (value: jlObject): boolean;
      entrySet (): juSet<juMEntry<K, V>>;
      get (key: jlObject): V;
      isEmpty (): boolean;
      keySet (): juSet<K>;
      /**Wraps the specified map with a most recently used cache*/
      static of<K, V> (map: juMap<K, V>): juMap<K, V>;
      put (key: K, value: V): V;
      putAll (m: juMap<K, V>): void;
      remove (key: jlObject): V;
      size (): number;
      values (): juCollection<V>;
   }
   /**Represents a Mule - variant of ChestedHorse.*/
   export interface obeMule extends obeChestedHorse {}
   /**Represents a command that delegates to one or more other commands*/
   export class obcMultipleCommandAlias extends obcCommand {
      constructor (name: string, commands: obcCommand[]);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, commandLabel: string, args: string[]): boolean;
      /**Gets the commands associated with the multi-command alias.*/
      getCommands (): obcCommand[];
   }
   /**This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'  boolean flags which are used to set which faces of the block textures are  displayed on.    Some blocks may not be able to have faces on all directions, use  getAllowedFaces() to get all possible faces for this block. It is  not valid to call any methods on non-allowed faces.*/
   export interface obbdMultipleFacing extends obbdBlockData {
      /**Gets all of this faces which may be set on this block.*/
      getAllowedFaces(): juSet<obbBlockFace>;
      /**Get all of the faces which are enabled on this block.*/
      getFaces(): juSet<obbBlockFace>;
      /**Checks if this block has the specified face enabled.*/
      hasFace(face: obbBlockFace): boolean;
      /**Set whether this block has the specified face enabled.*/
      setFace(face: obbBlockFace, has: boolean): void;
   }
   /**Represents the different textured blocks of mushroom.*/
   export class obmtMushroomBlockTexture extends jlEnum<obmtMushroomBlockTexture> {
      /**Cap texture on all faces.*/
      static ALL_CAP: obmtMushroomBlockTexture;
      /**Pores on all faces.*/
      static ALL_PORES: obmtMushroomBlockTexture;
      /**Stem texture on all faces.*/
      static ALL_STEM: obmtMushroomBlockTexture;
      /**Cap texture on the top and east faces, pores on remaining sides.*/
      static CAP_EAST: obmtMushroomBlockTexture;
      /**Cap texture on the top and north faces, pores on remaining sides.*/
      static CAP_NORTH: obmtMushroomBlockTexture;
      /**Cap texture on the top, north and east faces, pores on remaining sides.*/
      static CAP_NORTH_EAST: obmtMushroomBlockTexture;
      /**Cap texture on the top, north and west faces, pores on remaining sides.*/
      static CAP_NORTH_WEST: obmtMushroomBlockTexture;
      /**Cap texture on the top and south faces, pores on remaining sides.*/
      static CAP_SOUTH: obmtMushroomBlockTexture;
      /**Cap texture on the top, south and east faces, pores on remaining sides.*/
      static CAP_SOUTH_EAST: obmtMushroomBlockTexture;
      /**Cap texture on the top, south and west faces, pores on remaining sides.*/
      static CAP_SOUTH_WEST: obmtMushroomBlockTexture;
      /**Cap texture on the top face, pores on remaining sides.*/
      static CAP_TOP: obmtMushroomBlockTexture;
      /**Cap texture on the top and west faces, pores on remaining sides.*/
      static CAP_WEST: obmtMushroomBlockTexture;
      /**Stem texture on the north, east, south and west faces, pores on top and  bottom.*/
      static STEM_SIDES: obmtMushroomBlockTexture;
      /**Gets the MushroomBlockType with cap texture on the given block face.*/
      static getCapByFace (face: obbBlockFace): obmtMushroomBlockTexture;
      /**Gets the face that has cap texture.*/
      getCapFace (): obbBlockFace;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obmtMushroomBlockTexture;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obmtMushroomBlockTexture[];
   }
   /**Represents a mushroom Cow*/
   export interface obeMushroomCow extends obeCow {
      /**Get the variant of this cow.*/
      getVariant(): obeMVariant;
      /**Set the variant of this cow.*/
      setVariant(variant: obeMVariant): void;
   }
   /**Represents the variant of a cow - ie its color.*/
   export class obeMVariant extends jlEnum<obeMVariant> {
      /**Brown mushroom cow.*/
      static BROWN: obeMVariant;
      /**Red mushroom cow.*/
      static RED: obeMVariant;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeMVariant;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeMVariant[];
   }
   export interface obNameable {
      /**Gets the custom name on a mob or block.*/
      getCustomName(): string;
      /**Sets a custom name on a mob or block.*/
      setCustomName(name: string): void;
   }
   /**Represents a namespaced resource, see NamespacedKey for single elements  or NamespacedTag for a collection of elements   Namespaces may only contain lowercase alphanumeric characters, periods,  underscores, and hyphens.    Keys may only contain lowercase alphanumeric characters, periods,  underscores, hyphens, and forward slashes.    You should not be implementing this interface yourself, use NamespacedKey  or NamespacedTag as needed instead.*/
   export interface cdpNamespaced {
      /**Gets the key corresponding to this resource*/
      getKey(): string;
      /**Gets the namespace this resource is a part of*/
      getNamespace(): string;
   }
   /**Represents a String based key which consists of two components - a namespace  and a key.   Namespaces may only contain lowercase alphanumeric characters, periods,  underscores, and hyphens.    Keys may only contain lowercase alphanumeric characters, periods,  underscores, hyphens, and forward slashes.*/
   export class obNamespacedKey extends jlObject implements cdpNamespaced {
      constructor (namespace: string, key: string);
      constructor (plugin: obpPlugin, key: string);
      equals (obj: jlObject): boolean;
      /**Gets the key corresponding to this resource*/
      getKey (): string;
      /**Gets the namespace this resource is a part of*/
      getNamespace (): string;
      hashCode (): number;
      /**Get a key in the Minecraft namespace.*/
      static minecraft (key: string): obNamespacedKey;
      toString (): string;
   }
   /**Represents a String based key pertaining to a tagged entry. Consists of two components - a namespace  and a key.    Namespaces may only contain lowercase alphanumeric characters, periods,  underscores, and hyphens.    Keys may only contain lowercase alphanumeric characters, periods,  underscores, hyphens, and forward slashes.*/
   export class cdpNamespacedTag extends jlObject implements cdpNamespaced {
      constructor (namespace: string, key: string);
      constructor (plugin: obpPlugin, key: string);
      equals (obj: jlObject): boolean;
      /**Gets the key corresponding to this resource*/
      getKey (): string;
      /**Gets the namespace this resource is a part of*/
      getNamespace (): string;
      hashCode (): number;
      /**Get a key in the Minecraft namespace.*/
      static minecraft (key: string): cdpNamespacedTag;
      toString (): string;
   }
   export class obNetherWartsState extends jlEnum<obNetherWartsState> {
      /**Ready to harvest*/
      static RIPE: obNetherWartsState;
      /**State when first seeded*/
      static SEEDED: obNetherWartsState;
      /**First growth stage*/
      static STAGE_ONE: obNetherWartsState;
      /**Second growth stage*/
      static STAGE_TWO: obNetherWartsState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obNetherWartsState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obNetherWartsState[];
   }
   /**Represents a client connected to the server.*/
   export interface cdpnNetworkClient {
      /**Returns the socket address of the client.*/
      getAddress(): jnInetSocketAddress;
      /**Returns the protocol version of the client.*/
      getProtocolVersion(): number;
      /**Returns the virtual host the client is connected to.*/
      getVirtualHost(): jnInetSocketAddress;
   }
   /**Base class for all noise generators*/
   export class obunNoiseGenerator extends jlObject {
      constructor ();
      static fade (x: number): number;
      /**Speedy floor, faster than (int)Math.floor(x)*/
      static floor (x: number): number;
      static grad (hash: number, x: number, y: number, z: number): number;
      static lerp (x: number, y: number, z: number): number;
      /**Computes and returns the 1D noise for the given coordinate in 1D space*/
      noise (x: number): number;
      /**Computes and returns the 2D noise for the given coordinates in 2D space*/
      noise (x: number, y: number): number;
      /**Computes and returns the 3D noise for the given coordinates in 3D space*/
      noise (x: number, y: number, z: number): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, z: number, octaves: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (
         x: number,
         y: number,
         z: number,
         octaves: number,
         frequency: number,
         amplitude: number,
         normalized: boolean
      ): number;
      /**Generates noise for the 2D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, octaves: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 2D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, octaves: number, frequency: number, amplitude: number, normalized: boolean): number;
      /**Generates noise for the 1D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, octaves: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 1D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, octaves: number, frequency: number, amplitude: number, normalized: boolean): number;
   }
   /**A note class to store a specific note.*/
   export class obNote extends jlObject {
      constructor (note: number);
      constructor (octave: number, tone: obNTone, sharped: boolean);
      equals (obj: jlObject): boolean;
      /**Creates a new note for a flat tone, such as A-flat.*/
      static flat (octave: number, tone: obNTone): obNote;
      flattened (): obNote;
      /**Returns the octave of this note.*/
      getOctave (): number;
      /**Returns the tone of this note.*/
      getTone (): obNTone;
      hashCode (): number;
      /**Returns if this note is sharped.*/
      isSharped (): boolean;
      /**Creates a new note for a natural tone, such as A-natural.*/
      static natural (octave: number, tone: obNTone): obNote;
      /**Creates a new note for a sharp tone, such as A-sharp.*/
      static sharp (octave: number, tone: obNTone): obNote;
      sharped (): obNote;
      toString (): string;
   }
   /**An enum holding tones.*/
   export class obNTone extends jlEnum<obNTone> {
      static A: obNTone;
      static B: obNTone;
      static C: obNTone;
      static D: obNTone;
      static E: obNTone;
      static F: obNTone;
      static G: obNTone;
      /**Returns if this tone could be sharped.*/
      isSharpable (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obNTone;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obNTone[];
   }
   /**'instrument' is the type of sound made when this note block is activated.    'note' is the specified tuned pitch that the instrument will be played in.*/
   export interface obbdtNoteBlock extends obbdPowerable {
      /**Gets the value of the 'instrument' property.*/
      getInstrument(): obInstrument;
      /**Gets the value of the 'note' property.*/
      getNote(): obNote;
      /**Sets the value of the 'instrument' property.*/
      setInstrument(instrument: obInstrument): void;
      /**Sets the value of the 'note' property.*/
      setNote(note: obNote): void;
   }
   /**Called when a note block is being played through player interaction or a  redstone current.*/
   export class obebNotePlayEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, instrument: obInstrument, note: obNote);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Instrument to be used.*/
      getInstrument (): obInstrument;
      /**Gets the Note to be played.*/
      getNote (): obNote;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a non-player character*/
   export interface obeNPC extends obeCreature {}
   /**NullConversationPrefix is a ConversationPrefix implementation that  displays nothing in front of conversation output.*/
   export class obcNullConversationPrefix extends jlObject implements obcConversationPrefix {
      constructor ();
      /**Prepends each conversation message with an empty string.*/
      getPrefix (context: obcConversationContext): string;
   }
   export class catNullTimingHandler extends jlObject implements catTiming {
      constructor ();
      abort (): void;
      close (): void;
      /**Used internally to get the actual backing Handler in the case of delegated Handlers*/
      getTimingHandler (): catTimingHandler;
      /**Starts timing the execution until Timing.stopTiming() is called.*/
      startTiming (): catTiming;
      /**Starts timing the execution until Timing.stopTiming() is called.*/
      startTimingIfSync (): catTiming;
      /**Stops timing and records the data.*/
      stopTiming (): void;
      /**Stops timing and records the data.*/
      stopTimingIfSync (): void;
   }
   /**Utils for casting number types to other number types*/
   export class obuNumberConversions extends jlObject {
      static ceil (num: number): number;
      static checkFinite (d: number, message: string): void;
      static checkFinite (d: number, message: string): void;
      static floor (num: number): number;
      static isFinite (d: number): boolean;
      static isFinite (f: number): boolean;
      static round (num: number): number;
      static square (num: number): number;
      static toByte (object: jlObject): number;
      static toDouble (object: jlObject): number;
      static toFloat (object: jlObject): number;
      static toInt (object: jlObject): number;
      static toLong (object: jlObject): number;
      static toShort (object: jlObject): number;
   }
   /**NumericPrompt is the base class for any prompt that requires a Number response from the user.*/
   export class obcNumericPrompt extends obcValidatingPrompt {
      constructor ();
      /**Override this method to perform some action with the user's integer  response.*/
      acceptValidatedInput (context: obcConversationContext, input: jlNumber): obcPrompt;
      /**Override this method to accept and processes the validated input from  the user.*/
      acceptValidatedInput (context: obcConversationContext, input: string): obcPrompt;
      /**Optionally override this method to display an additional message if the  user enters an invalid numeric input.*/
      getFailedValidationText (context: obcConversationContext, invalidInput: jlNumber): string;
      /**Optionally override this method to display an additional message if the  user enters an invalid input.*/
      getFailedValidationText (context: obcConversationContext, invalidInput: string): string;
      /**Optionally override this method to display an additional message if the  user enters an invalid number.*/
      getInputNotNumericText (context: obcConversationContext, invalidInput: string): string;
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
      /**Override this method to do further validation on the numeric player  input after the input has been determined to actually be a number.*/
      isNumberValid (context: obcConversationContext, input: jlNumber): boolean;
   }
   /**An objective on a scoreboard that can show scores specific to entries. This  objective is only relevant to the display of the associated scoreboard.*/
   export interface obsObjective {
      /**Gets the criteria this objective tracks.*/
      getCriteria(): string;
      /**Gets the name displayed to players for this objective*/
      getDisplayName(): string;
      /**Gets the display slot this objective is displayed at.*/
      getDisplaySlot(): obsDisplaySlot;
      /**Gets the name of this Objective*/
      getName(): string;
      /**Sets manner in which this objective will be rendered.*/
      getRenderType(): obsRenderType;
      /**Gets an entry's Score for an Objective on this Scoreboard.*/
      getScore(entry: string): obsScore;
      /**Gets the scoreboard to which this objective is attached.*/
      getScoreboard(): obsScoreboard;
      /**Gets if the objective's scores can be modified directly by a plugin.*/
      isModifiable(): boolean;
      /**Sets the name displayed to players for this objective.*/
      setDisplayName(displayName: string): void;
      /**Sets this objective to display on the specified slot for the  scoreboard, removing it from any other display slot.*/
      setDisplaySlot(slot: obsDisplaySlot): void;
      /**Sets manner in which this objective will be rendered.*/
      setRenderType(renderType: obsRenderType): void;
      /**Unregisters this objective from the scoreboard.*/
      unregister(): void;
   }
   export interface obbdtObserver extends obbdDirectional, obbdPowerable {}
   /**A wild tameable cat*/
   export interface obeOcelot extends obeAnimals {
      /**Gets the current type of this cat.*/
      getCatType(): obeOType;
      /**Sets the current type of this cat.*/
      setCatType(type: obeOType): void;
   }
   /**Creates noise using unbiased octaves*/
   export class obunOctaveGenerator extends jlObject {
      constructor (octaves: obunNoiseGenerator[]);
      /**Gets a clone of the individual octaves used within this generator*/
      getOctaves (): obunNoiseGenerator[];
      /**Gets the scale used for each X-coordinates passed*/
      getXScale (): number;
      /**Gets the scale used for each Y-coordinates passed*/
      getYScale (): number;
      /**Gets the scale used for each Z-coordinates passed*/
      getZScale (): number;
      /**Generates noise for the 1D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 1D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, frequency: number, amplitude: number, normalized: boolean): number;
      /**Generates noise for the 2D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 2D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, frequency: number, amplitude: number, normalized: boolean): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, z: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, z: number, frequency: number, amplitude: number, normalized: boolean): number;
      /**Sets the scale used for all coordinates passed to this generator.*/
      setScale (scale: number): void;
      /**Sets the scale used for each X-coordinates passed*/
      setXScale (scale: number): void;
      /**Sets the scale used for each Y-coordinates passed*/
      setYScale (scale: number): void;
      /**Sets the scale used for each Z-coordinates passed*/
      setZScale (scale: number): void;
   }
   export interface obOfflinePlayer extends obpServerOperator, obeAnimalTamer, obcsConfigurationSerializable {
      /**Permanently Bans this player from the server*/
      banPlayer(reason: string): obBanEntry;
      /**Permanently Bans this player from the server*/
      banPlayer(reason: string, source: string): obBanEntry;
      /**Bans this player from the server*/
      banPlayer(reason: string, expires: juDate): obBanEntry;
      /**Bans this player from the server*/
      banPlayer(reason: string, expires: juDate, source: string): obBanEntry;
      banPlayer(reason: string, expires: juDate, source: string, kickIfOnline: boolean): obBanEntry;
      /**Decrements the given statistic for this player.*/
      decrementStatistic(statistic: obStatistic): void;
      /**Decrements the given statistic for this player.*/
      decrementStatistic(statistic: obStatistic, amount: number): void;
      /**Decrements the given statistic for this player for the given entity.*/
      decrementStatistic(statistic: obStatistic, entityType: obeEntityType): void;
      /**Decrements the given statistic for this player for the given entity.*/
      decrementStatistic(statistic: obStatistic, entityType: obeEntityType, amount: number): void;
      /**Decrements the given statistic for this player for the given material.*/
      decrementStatistic(statistic: obStatistic, material: obMaterial): void;
      /**Decrements the given statistic for this player for the given material.*/
      decrementStatistic(statistic: obStatistic, material: obMaterial, amount: number): void;
      /**Gets the Location where the player will spawn at their bed, null if  they have not slept in one or their current bed spawn is invalid.*/
      getBedSpawnLocation(): obLocation;
      /**Gets the first date and time that this player was witnessed on this  server.*/
      getFirstPlayed(): number;
      /**Gets the last date and time that this player logged into the server.*/
      getLastLogin(): number;
      /**Gets the last date and time that this player was seen on the server.*/
      getLastSeen(): number;
      /**Returns the name of this player*/
      getName(): string;
      /**Gets a Player object that this represents, if there is one*/
      getPlayer(): obePlayer;
      /**Gets the value of the given statistic for this player.*/
      getStatistic(statistic: obStatistic): number;
      /**Gets the value of the given statistic for this player.*/
      getStatistic(statistic: obStatistic, entityType: obeEntityType): number;
      /**Gets the value of the given statistic for this player.*/
      getStatistic(statistic: obStatistic, material: obMaterial): number;
      /**Returns the UUID of this player*/
      getUniqueId(): juUUID;
      /**Checks if this player has played on this server before.*/
      hasPlayedBefore(): boolean;
      /**Increments the given statistic for this player.*/
      incrementStatistic(statistic: obStatistic): void;
      /**Increments the given statistic for this player.*/
      incrementStatistic(statistic: obStatistic, amount: number): void;
      /**Increments the given statistic for this player for the given entity.*/
      incrementStatistic(statistic: obStatistic, entityType: obeEntityType): void;
      /**Increments the given statistic for this player for the given entity.*/
      incrementStatistic(statistic: obStatistic, entityType: obeEntityType, amount: number): void;
      /**Increments the given statistic for this player for the given material.*/
      incrementStatistic(statistic: obStatistic, material: obMaterial): void;
      /**Increments the given statistic for this player for the given material.*/
      incrementStatistic(statistic: obStatistic, material: obMaterial, amount: number): void;
      /**Checks if this player is banned or not*/
      isBanned(): boolean;
      /**Checks if this player is currently online*/
      isOnline(): boolean;
      /**Checks if this player is whitelisted or not*/
      isWhitelisted(): boolean;
      /**Sets the given statistic for this player.*/
      setStatistic(statistic: obStatistic, newValue: number): void;
      /**Sets the given statistic for this player for the given entity.*/
      setStatistic(statistic: obStatistic, entityType: obeEntityType, newValue: number): void;
      /**Sets the given statistic for this player for the given material.*/
      setStatistic(statistic: obStatistic, material: obMaterial, newValue: number): void;
      /**Sets if this player is whitelisted or not*/
      setWhitelisted(value: boolean): void;
   }
   /**'open' denotes whether this door-like block is currently opened.*/
   export interface obbdOpenable extends obbdBlockData {
      /**Gets the value of the 'open' property.*/
      isOpen(): boolean;
      /**Sets the value of the 'open' property.*/
      setOpen(open: boolean): void;
   }
   export interface obmOpenable {
      /**Check to see if the door is open.*/
      isOpen(): boolean;
      /**Configure this door to be either open or closed;*/
      setOpen(isOpen: boolean): void;
   }
   /**'axis' represents the axis along whilst this block is oriented.    Some blocks such as the portal block may not be able to be placed in all  orientations, use getAxes() to retrieve all possible such  orientations.*/
   export interface obbdOrientable extends obbdBlockData {
      /**Gets the axes which are applicable to this block.*/
      getAxes(): juSet<obAxis>;
      /**Gets the value of the 'axis' property.*/
      getAxis(): obAxis;
      /**Sets the value of the 'axis' property.*/
      setAxis(axis: obAxis): void;
   }
   /**Represents a Painting.*/
   export interface obePainting extends obeHanging {
      /**Get the art on this painting*/
      getArt(): obArt;
      /**Set the art on this painting*/
      setArt(art: obArt): boolean;
      /**Set the art on this painting*/
      setArt(art: obArt, force: boolean): boolean;
   }
   /**Panda entity.*/
   export interface obePanda extends obeAnimals {
      /**Gets this Panda's hidden gene.*/
      getHiddenGene(): obePGene;
      /**Gets this Panda's main gene.*/
      getMainGene(): obePGene;
      /**Sets this Panda's hidden gene.*/
      setHiddenGene(gene: obePGene): void;
      /**Sets this Panda's main gene.*/
      setMainGene(gene: obePGene): void;
   }
   export class obePGene extends jlEnum<obePGene> {
      static AGGRESSIVE: obePGene;
      static BROWN: obePGene;
      static LAZY: obePGene;
      static NORMAL: obePGene;
      static PLAYFUL: obePGene;
      static WEAK: obePGene;
      static WORRIED: obePGene;
      /**Gets whether this gene is recessive, i.e.*/
      isRecessive (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obePGene;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obePGene[];
   }
   /**Prevents plugins (e.g. Essentials) from changing the parent of the plugin logger.*/
   export class cdpuPaperPluginLogger extends julLogger {
      static getLogger (description: obpPluginDescriptionFile): julLogger;
      setParent (parent: julLogger): void;
   }
   /**Extended version of ServerListPingEvent that allows full control  of the response sent to the client.*/
   export class cdpesPaperServerListPingEvent extends obesServerListPingEvent implements obeCancellable {
      constructor (
         client: cdpnStatusClient,
         motd: string,
         numPlayers: number,
         maxPlayers: number,
         version: string,
         protocolVersion: number,
         favicon: obuCachedServerIcon
      );
      getBukkitPlayer (player: jlObject): obePlayer;
      /**Returns the StatusClient pinging the server.*/
      getClient (): cdpnStatusClient;
      /**Get the maximum number of players sent.*/
      getMaxPlayers (): number;
      /**Get the number of players sent.*/
      getNumPlayers (): number;
      getOnlinePlayers (): jlObject[];
      /**Returns a mutable list of PlayerProfile that will be displayed  as online players on the client.*/
      getPlayerSample (): juList<cdppPlayerProfile>;
      /**Returns the protocol version that will be sent as the protocol version  of the server to the client.*/
      getProtocolVersion (): number;
      /**Gets the server icon sent to the client.*/
      getServerIcon (): obuCachedServerIcon;
      /**Returns the version that will be sent as server version on the client.*/
      getVersion (): string;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      iterator (): juIterator<obePlayer>;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether all player related information is hidden in the server  list.*/
      setHidePlayers (hidePlayers: boolean): void;
      /**Sets the number of players displayed in the server list.*/
      setNumPlayers (numPlayers: number): void;
      /**Sets the protocol version that will be sent as the protocol version  of the server to the client.*/
      setProtocolVersion (protocolVersion: number): void;
      /**Sets the server icon sent to the client.*/
      setServerIcon (icon: obuCachedServerIcon): void;
      /**Sets the version that will be sent as server version to the client.*/
      setVersion (version: string): void;
      /**Returns whether all player related information is hidden in the server  list.*/
      shouldHidePlayers (): boolean;
   }
   /**Represents a Parrot.*/
   export interface obeParrot extends obeTameable, obeSittable {
      /**Get the variant of this parrot.*/
      getVariant(): obePVariant;
      /**Set the variant of this parrot.*/
      setVariant(variant: obePVariant): void;
   }
   /**Represents the variant of a parrot - ie its color.*/
   export class obePVariant extends jlEnum<obePVariant> {
      /**Royal blue colored parrot.*/
      static BLUE: obePVariant;
      /**Cyan colored parrot.*/
      static CYAN: obePVariant;
      /**Gray colored parrot.*/
      static GRAY: obePVariant;
      /**Green colored parrot.*/
      static GREEN: obePVariant;
      /**Classic parrot - red with colored wingtips.*/
      static RED: obePVariant;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obePVariant;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obePVariant[];
   }
   export class obParticle extends jlEnum<obParticle> {
      static ASH: obParticle;
      static BARRIER: obParticle;
      static BLOCK_CRACK: obParticle;
      static BLOCK_DUST: obParticle;
      static BUBBLE_COLUMN_UP: obParticle;
      static BUBBLE_POP: obParticle;
      static CAMPFIRE_COSY_SMOKE: obParticle;
      static CAMPFIRE_SIGNAL_SMOKE: obParticle;
      static CLOUD: obParticle;
      static COMPOSTER: obParticle;
      static CRIMSON_SPORE: obParticle;
      static CRIT: obParticle;
      static CRIT_MAGIC: obParticle;
      static CURRENT_DOWN: obParticle;
      static DAMAGE_INDICATOR: obParticle;
      static DOLPHIN: obParticle;
      static DRAGON_BREATH: obParticle;
      static DRIP_LAVA: obParticle;
      static DRIP_WATER: obParticle;
      static DRIPPING_HONEY: obParticle;
      static DRIPPING_OBSIDIAN_TEAR: obParticle;
      static ENCHANTMENT_TABLE: obParticle;
      static END_ROD: obParticle;
      static EXPLOSION_HUGE: obParticle;
      static EXPLOSION_LARGE: obParticle;
      static EXPLOSION_NORMAL: obParticle;
      static FALLING_DUST: obParticle;
      static FALLING_HONEY: obParticle;
      static FALLING_LAVA: obParticle;
      static FALLING_NECTAR: obParticle;
      static FALLING_OBSIDIAN_TEAR: obParticle;
      static FALLING_WATER: obParticle;
      static FIREWORKS_SPARK: obParticle;
      static FLAME: obParticle;
      static FLASH: obParticle;
      static HEART: obParticle;
      static ITEM_CRACK: obParticle;
      static LANDING_HONEY: obParticle;
      static LANDING_LAVA: obParticle;
      static LANDING_OBSIDIAN_TEAR: obParticle;
      static LAVA: obParticle;
      static LEGACY_BLOCK_CRACK: obParticle;
      static LEGACY_BLOCK_DUST: obParticle;
      static LEGACY_FALLING_DUST: obParticle;
      static MOB_APPEARANCE: obParticle;
      static NAUTILUS: obParticle;
      static NOTE: obParticle;
      static PORTAL: obParticle;
      static REDSTONE: obParticle;
      static REVERSE_PORTAL: obParticle;
      static SLIME: obParticle;
      static SMOKE_LARGE: obParticle;
      static SMOKE_NORMAL: obParticle;
      static SNEEZE: obParticle;
      static SNOW_SHOVEL: obParticle;
      static SNOWBALL: obParticle;
      static SOUL: obParticle;
      static SOUL_FIRE_FLAME: obParticle;
      static SPELL: obParticle;
      static SPELL_INSTANT: obParticle;
      static SPELL_MOB: obParticle;
      static SPELL_MOB_AMBIENT: obParticle;
      static SPELL_WITCH: obParticle;
      static SPIT: obParticle;
      static SQUID_INK: obParticle;
      static SUSPENDED: obParticle;
      static SUSPENDED_DEPTH: obParticle;
      static SWEEP_ATTACK: obParticle;
      static TOTEM: obParticle;
      static TOWN_AURA: obParticle;
      static VILLAGER_ANGRY: obParticle;
      static VILLAGER_HAPPY: obParticle;
      static WARPED_SPORE: obParticle;
      static WATER_BUBBLE: obParticle;
      static WATER_DROP: obParticle;
      static WATER_SPLASH: obParticle;
      static WATER_WAKE: obParticle;
      static WHITE_ASH: obParticle;
      /**Creates a ParticleBuilder*/
      builder (): cdpParticleBuilder;
      /**Returns the required data type for the particle*/
      getDataType (): jlClass<any>;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obParticle;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obParticle[];
   }
   /**Options which can be applied to redstone dust particles - a particle  color and size.*/
   export class obPDustOptions extends jlObject {
      constructor (color: obColor, size: number);
      /**The color of the particles to be displayed.*/
      getColor (): obColor;
      /**Relative size of the particle.*/
      getSize (): number;
   }
   /**Helps prepare a particle to be sent to players.   Usage of the builder is preferred over the super long World.spawnParticle(Particle, Location, int, double, double, double, double, Object) API*/
   export class cdpParticleBuilder extends jlObject {
      constructor (particle: obParticle);
      /**Sends this particle to all players in the world.*/
      allPlayers (): cdpParticleBuilder;
      /**Sets the particle Color.*/
      color (r: number, g: number, b: number): cdpParticleBuilder;
      /**Sets the particle Color.*/
      color (color: obColor): cdpParticleBuilder;
      /**Sets the particle Color and size.*/
      color (color: obColor, size: number): cdpParticleBuilder;
      count (): number;
      /**Sets the number of particles to spawn*/
      count (count: number): cdpParticleBuilder;
      /**Gets the particle custom data.*/
      data<T> (): T;
      /**Sets the particle custom data.*/
      data<T> (data: T): cdpParticleBuilder;
      /**Gets the Particle extra data.*/
      extra (): number;
      /**Sets the particle extra data.*/
      extra (extra: number): cdpParticleBuilder;
      /**Sets whether the particle is forcefully shown to the player.*/
      force (force: boolean): cdpParticleBuilder;
      /**Example use:   builder.receivers(16); if (builder.hasReceivers()) { sendParticleAsync(builder); }*/
      hasReceivers (): boolean;
      location (): obLocation;
      /**Sets the location of where to spawn the particle*/
      location (location: obLocation): cdpParticleBuilder;
      /**Sets the location of where to spawn the particle*/
      location (world: obWorld, x: number, y: number, z: number): cdpParticleBuilder;
      /**Sets the particle offset.*/
      offset (offsetX: number, offsetY: number, offsetZ: number): cdpParticleBuilder;
      /**Particle offset X.*/
      offsetX (): number;
      /**Particle offset Y.*/
      offsetY (): number;
      /**Particle offset Z.*/
      offsetZ (): number;
      particle (): obParticle;
      /**Changes what particle will be sent*/
      particle (particle: obParticle): cdpParticleBuilder;
      receivers (): juList<obePlayer>;
      /**Selects all players within a cuboid selection around the particle location, within the  specified bounding box.*/
      receivers (radius: number): cdpParticleBuilder;
      /**Selects all players within the specified radius around the particle location.*/
      receivers (radius: number, byDistance: boolean): cdpParticleBuilder;
      /**Selects all players within a cuboid selection around the particle location, within the  specified bounding box.*/
      receivers (xzRadius: number, yRadius: number): cdpParticleBuilder;
      /**Selects all players within the specified radius around the particle location.*/
      receivers (xzRadius: number, yRadius: number, byDistance: boolean): cdpParticleBuilder;
      /**Selects all players within a cuboid selection around the particle location, within the  specified bounding box.*/
      receivers (xRadius: number, yRadius: number, zRadius: number): cdpParticleBuilder;
      receivers (receivers: juCollection<obePlayer>): cdpParticleBuilder;
      receivers (receivers: juList<obePlayer>): cdpParticleBuilder;
      receivers (...receivers: obePlayer[]): cdpParticleBuilder;
      source (): obePlayer;
      /**Sets the source of this particle for visibility concerns (Vanish API)*/
      source (source: obePlayer): cdpParticleBuilder;
      /**Sends the particle to all receiving players (or all).*/
      spawn (): cdpParticleBuilder;
   }
   /**Handles pathfinding operations for an Entity*/
   export interface cdpePathfinder {
      /**Checks if this pathfinder assumes that the mob can float*/
      canFloat(): boolean;
      /**Checks if this pathfinder allows passing through closed doors.*/
      canOpenDoors(): boolean;
      /**Checks if this pathfinder allows passing through open doors.*/
      canPassDoors(): boolean;
      /**Calculates a destination for the Entity to navigate to to reach the target entity,  but does not set it as the current target.*/
      findPath(target: obeLivingEntity): cdpePPathResult;
      /**Calculates a destination for the Entity to navigate to, but does not set it  as the current target.*/
      findPath(loc: obLocation): cdpePPathResult;
      getCurrentPath(): cdpePPathResult;
      getEntity(): obeMob;
      /**If the entity is currently trying to navigate to a destination, this will return true*/
      hasPath(): boolean;
      /**Takes the result of a previous pathfinding calculation and sets it  as the active pathfinding with default speed.*/
      moveTo(path: cdpePPathResult): boolean;
      /**Takes the result of a previous pathfinding calculation and sets it  as the active pathfinding,*/
      moveTo(path: cdpePPathResult, speed: number): boolean;
      /**Calculates a destination for the Entity to navigate to to reach the target entity,  and sets it with default speed.*/
      moveTo(target: obeLivingEntity): boolean;
      /**Calculates a destination for the Entity to navigate to to reach the target entity,  and sets it with specified speed.*/
      moveTo(target: obeLivingEntity, speed: number): boolean;
      /**Calculates a destination for the Entity to navigate to, and sets it with default speed  as the current target.*/
      moveTo(loc: obLocation): boolean;
      /**Calculates a destination for the Entity to navigate to, with desired speed  as the current target.*/
      moveTo(loc: obLocation, speed: number): boolean;
      /**Makes this pathfinder assume that the mob can float, or not*/
      setCanFloat(canFloat: boolean): void;
      /**Allows this pathfinder to pass through closed doors, or not*/
      setCanOpenDoors(canOpenDoors: boolean): void;
      /**Allows this pathfinder to pass through open doors, or not*/
      setCanPassDoors(canPassDoors: boolean): void;
      /**Instructs the Entity to stop trying to navigate to its current desired location*/
      stopPathfinding(): void;
   }
   /**Represents the result of a pathfinding calculation*/
   export interface cdpePPathResult {
      getFinalPoint(): obLocation;
      getNextPoint(): obLocation;
      getNextPointIndex(): number;
      /**All currently calculated points to follow along the path to reach the destination location   Will return points the entity has already moved past, see getNextPointIndex()*/
      getPoints(): juList<obLocation>;
   }
   export class obbbPattern extends jlObject implements obcsConfigurationSerializable {
      constructor (map: juMap<string, jlObject>);
      constructor (color: obDyeColor, pattern: obbbPatternType);
      equals (obj: jlObject): boolean;
      /**Returns the color of the pattern*/
      getColor (): obDyeColor;
      /**Returns the type of pattern*/
      getPattern (): obbbPatternType;
      hashCode (): number;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
   }
   export class obbbPatternType extends jlEnum<obbbPatternType> {
      static BASE: obbbPatternType;
      static BORDER: obbbPatternType;
      static BRICKS: obbbPatternType;
      static CIRCLE_MIDDLE: obbbPatternType;
      static CREEPER: obbbPatternType;
      static CROSS: obbbPatternType;
      static CURLY_BORDER: obbbPatternType;
      static DIAGONAL_LEFT: obbbPatternType;
      static DIAGONAL_LEFT_MIRROR: obbbPatternType;
      static DIAGONAL_RIGHT: obbbPatternType;
      static DIAGONAL_RIGHT_MIRROR: obbbPatternType;
      static FLOWER: obbbPatternType;
      static GLOBE: obbbPatternType;
      static GRADIENT: obbbPatternType;
      static GRADIENT_UP: obbbPatternType;
      static HALF_HORIZONTAL: obbbPatternType;
      static HALF_HORIZONTAL_MIRROR: obbbPatternType;
      static HALF_VERTICAL: obbbPatternType;
      static HALF_VERTICAL_MIRROR: obbbPatternType;
      static MOJANG: obbbPatternType;
      static PIGLIN: obbbPatternType;
      static RHOMBUS_MIDDLE: obbbPatternType;
      static SKULL: obbbPatternType;
      static SQUARE_BOTTOM_LEFT: obbbPatternType;
      static SQUARE_BOTTOM_RIGHT: obbbPatternType;
      static SQUARE_TOP_LEFT: obbbPatternType;
      static SQUARE_TOP_RIGHT: obbbPatternType;
      static STRAIGHT_CROSS: obbbPatternType;
      static STRIPE_BOTTOM: obbbPatternType;
      static STRIPE_CENTER: obbbPatternType;
      static STRIPE_DOWNLEFT: obbbPatternType;
      static STRIPE_DOWNRIGHT: obbbPatternType;
      static STRIPE_LEFT: obbbPatternType;
      static STRIPE_MIDDLE: obbbPatternType;
      static STRIPE_RIGHT: obbbPatternType;
      static STRIPE_SMALL: obbbPatternType;
      static STRIPE_TOP: obbbPatternType;
      static TRIANGLE_BOTTOM: obbbPatternType;
      static TRIANGLE_TOP: obbbPatternType;
      static TRIANGLES_BOTTOM: obbbPatternType;
      static TRIANGLES_TOP: obbbPatternType;
      /**Returns the pattern type which matches the passed  identifier or null if no matches are found*/
      static getByIdentifier (identifier: string): obbbPatternType;
      /**Returns the identifier used to represent  this pattern type*/
      getIdentifier (): string;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbbPatternType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbbPatternType[];
   }
   /**Generates noise using the "classic" perlin generator*/
   export class obunPerlinNoiseGenerator extends obunNoiseGenerator {
      constructor ();
      constructor (seed: number);
      constructor (rand: juRandom);
      constructor (world: obWorld);
      /**Gets the singleton unseeded instance of this generator*/
      static getInstance (): obunPerlinNoiseGenerator;
      /**Computes and returns the 1D unseeded perlin noise for the given  coordinates in 1D space*/
      static getNoise (x: number): number;
      /**Computes and returns the 2D unseeded perlin noise for the given  coordinates in 2D space*/
      static getNoise (x: number, y: number): number;
      /**Computes and returns the 3D unseeded perlin noise for the given  coordinates in 3D space*/
      static getNoise (x: number, y: number, z: number): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      static getNoise (x: number, y: number, z: number, octaves: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 2D coordinates using the specified number of  octaves and parameters*/
      static getNoise (x: number, y: number, octaves: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 1D coordinates using the specified number of  octaves and parameters*/
      static getNoise (x: number, octaves: number, frequency: number, amplitude: number): number;
      /**Computes and returns the 3D noise for the given coordinates in 3D space*/
      noise (x: number, y: number, z: number): number;
   }
   /**Creates perlin noise through unbiased octaves*/
   export class obunPerlinOctaveGenerator extends obunOctaveGenerator {
      constructor (seed: number, octaves: number);
      constructor (rand: juRandom, octaves: number);
      constructor (world: obWorld, octaves: number);
   }
   /**Represents an object that may be assigned permissions*/
   export interface obpPermissible extends obpServerOperator {
      /**Adds a new empty PermissionAttachment to this object*/
      addAttachment(plugin: obpPlugin): obpPermissionAttachment;
      /**Temporarily adds a new empty PermissionAttachment to this  object*/
      addAttachment(plugin: obpPlugin, ticks: number): obpPermissionAttachment;
      /**Adds a new PermissionAttachment with a single permission by  name and value*/
      addAttachment(plugin: obpPlugin, name: string, value: boolean): obpPermissionAttachment;
      /**Temporarily adds a new PermissionAttachment with a single  permission by name and value*/
      addAttachment(plugin: obpPlugin, name: string, value: boolean, ticks: number): obpPermissionAttachment;
      /**Gets a set containing all of the permissions currently in effect by  this object*/
      getEffectivePermissions(): juSet<obpPermissionAttachmentInfo>;
      /**Gets the value of the specified permission, if set.*/
      hasPermission(name: string): boolean;
      /**Gets the value of the specified permission, if set.*/
      hasPermission(perm: obpPermission): boolean;
      /**Checks if this object contains an override for the specified  permission, by fully qualified name*/
      isPermissionSet(name: string): boolean;
      /**Checks if this object contains an override for the specified Permission*/
      isPermissionSet(perm: obpPermission): boolean;
      /**Recalculates the permissions for this object, if the attachments have  changed values.*/
      recalculatePermissions(): void;
      /**Removes the given PermissionAttachment from this object*/
      removeAttachment(attachment: obpPermissionAttachment): void;
   }
   /**Base Permissible for use in any Permissible object via proxy or extension*/
   export class obpPermissibleBase extends jlObject implements obpPermissible {
      constructor (opable: obpServerOperator);
      /**Adds a new empty PermissionAttachment to this object*/
      addAttachment (plugin: obpPlugin): obpPermissionAttachment;
      /**Temporarily adds a new empty PermissionAttachment to this  object*/
      addAttachment (plugin: obpPlugin, ticks: number): obpPermissionAttachment;
      /**Adds a new PermissionAttachment with a single permission by  name and value*/
      addAttachment (plugin: obpPlugin, name: string, value: boolean): obpPermissionAttachment;
      /**Temporarily adds a new PermissionAttachment with a single  permission by name and value*/
      addAttachment (plugin: obpPlugin, name: string, value: boolean, ticks: number): obpPermissionAttachment;
      clearPermissions (): void;
      /**Gets a set containing all of the permissions currently in effect by  this object*/
      getEffectivePermissions (): juSet<obpPermissionAttachmentInfo>;
      /**Gets the value of the specified permission, if set.*/
      hasPermission (inName: string): boolean;
      /**Gets the value of the specified permission, if set.*/
      hasPermission (perm: obpPermission): boolean;
      /**Checks if this object is a server operator*/
      isOp (): boolean;
      /**Checks if this object contains an override for the specified  permission, by fully qualified name*/
      isPermissionSet (name: string): boolean;
      /**Checks if this object contains an override for the specified Permission*/
      isPermissionSet (perm: obpPermission): boolean;
      /**Recalculates the permissions for this object, if the attachments have  changed values.*/
      recalculatePermissions (): void;
      /**Removes the given PermissionAttachment from this object*/
      removeAttachment (attachment: obpPermissionAttachment): void;
      /**Sets the operator status of this object*/
      setOp (value: boolean): void;
   }
   /**Represents a unique permission that may be attached to a Permissible*/
   export class obpPermission extends jlObject {
      constructor (name: string);
      constructor (name: string, description: string);
      constructor (name: string, description: string, children: juMap<string, boolean>);
      constructor (name: string, description: string, defaultValue: obpPermissionDefault);
      constructor (
         name: string,
         description: string,
         defaultValue: obpPermissionDefault,
         children: juMap<string, boolean>
      );
      constructor (name: string, children: juMap<string, boolean>);
      constructor (name: string, defaultValue: obpPermissionDefault);
      constructor (name: string, defaultValue: obpPermissionDefault, children: juMap<string, boolean>);
      /**Adds this permission to the specified parent permission.*/
      addParent (name: string, value: boolean): obpPermission;
      /**Adds this permission to the specified parent permission.*/
      addParent (perm: obpPermission, value: boolean): void;
      /**Gets the children of this permission.*/
      getChildren (): juMap<string, boolean>;
      /**Gets the default value of this permission.*/
      getDefault (): obpPermissionDefault;
      /**Gets a brief description of this permission, may be empty*/
      getDescription (): string;
      /**Returns the unique fully qualified name of this Permission*/
      getName (): string;
      /**Gets a set containing every Permissible that has this  permission.*/
      getPermissibles (): juSet<obpPermissible>;
      /**Loads a Permission from a map of data, usually used from retrieval from  a yaml file.*/
      static loadPermission (
         name: string,
         data: juMap<any, any>,
         def: obpPermissionDefault,
         output: juList<obpPermission>
      ): obpPermission;
      /**Loads a Permission from a map of data, usually used from retrieval from  a yaml file.*/
      static loadPermission (name: string, data: juMap<string, jlObject>): obpPermission;
      /**Loads a list of Permissions from a map of data, usually used from  retrieval from a yaml file.*/
      static loadPermissions (data: juMap<any, any>, error: string, def: obpPermissionDefault): juList<obpPermission>;
      /**Recalculates all Permissibles that contain this permission.*/
      recalculatePermissibles (): void;
      /**Sets the default value of this permission.*/
      setDefault (value: obpPermissionDefault): void;
      /**Sets the description of this permission.*/
      setDescription (value: string): void;
   }
   /**Holds information about a permission attachment on a Permissible  object*/
   export class obpPermissionAttachment extends jlObject {
      constructor (plugin: obpPlugin, permissible: obpPermissible);
      /**Gets the Permissible that this is attached to*/
      getPermissible (): obpPermissible;
      /**Gets a copy of all set permissions and values contained within this  attachment.*/
      getPermissions (): juMap<string, boolean>;
      /**Gets the plugin responsible for this attachment*/
      getPlugin (): obpPlugin;
      /**Gets the class that was previously set to be called when this  attachment was removed from a Permissible.*/
      getRemovalCallback (): obpPermissionRemovedExecutor;
      /**Removes this attachment from its registered Permissible*/
      remove (): boolean;
      /**Sets a permission to the given value, by its fully qualified name*/
      setPermission (name: string, value: boolean): void;
      /**Sets a permission to the given value*/
      setPermission (perm: obpPermission, value: boolean): void;
      /**Sets an object to be called for when this attachment is removed from a  Permissible.*/
      setRemovalCallback (ex: obpPermissionRemovedExecutor): void;
      /**Removes the specified permission from this attachment.*/
      unsetPermission (name: string): void;
      /**Removes the specified permission from this attachment.*/
      unsetPermission (perm: obpPermission): void;
   }
   /**Holds information on a permission and which PermissionAttachment  provides it*/
   export class obpPermissionAttachmentInfo extends jlObject {
      constructor (permissible: obpPermissible, permission: string, attachment: obpPermissionAttachment, value: boolean);
      /**Gets the attachment providing this permission.*/
      getAttachment (): obpPermissionAttachment;
      /**Gets the permissible this is attached to*/
      getPermissible (): obpPermissible;
      /**Gets the permission being set*/
      getPermission (): string;
      /**Gets the value of this permission*/
      getValue (): boolean;
   }
   /**Represents the possible default values for permissions*/
   export class obpPermissionDefault extends jlEnum<obpPermissionDefault> {
      static FALSE: obpPermissionDefault;
      static NOT_OP: obpPermissionDefault;
      static OP: obpPermissionDefault;
      static TRUE: obpPermissionDefault;
      /**Looks up a PermissionDefault by name*/
      static getByName (name: string): obpPermissionDefault;
      /**Calculates the value of this PermissionDefault for the given operator  value*/
      getValue (op: boolean): boolean;
      toString (): string;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpPermissionDefault;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpPermissionDefault[];
   }
   /**Represents a class which is to be notified when a PermissionAttachment is removed from a Permissible*/
   export interface obpPermissionRemovedExecutor {
      /**Called when a PermissionAttachment is removed from a Permissible*/
      attachmentRemoved(attachment: obpPermissionAttachment): void;
   }
   /**This interface represents the context in which the PersistentDataType can  serialize and deserialize the passed values.*/
   export interface obpPersistentDataAdapterContext {
      /**Creates a new and empty meta container instance.*/
      newPersistentDataContainer(): obpPersistentDataContainer;
   }
   /**This interface represents a map like object, capable of storing custom tags  in it.*/
   export interface obpPersistentDataContainer {
      /**Returns the metadata value that is stored on the  PersistentDataHolder instance.*/
      get<T, Z>(key: obNamespacedKey, type: obpPersistentDataType<T, Z>): Z;
      /**Returns the adapter context this tag container uses.*/
      getAdapterContext(): obpPersistentDataAdapterContext;
      /**Get a set of keys present on this PersistentDataContainer  instance.*/
      getKeys(): juSet<obNamespacedKey>;
      /**Returns the metadata value that is stored on the  PersistentDataHolder instance.*/
      getOrDefault<T, Z>(key: obNamespacedKey, type: obpPersistentDataType<T, Z>, defaultValue: Z): Z;
      /**Returns if the persistent metadata provider has metadata registered  matching the provided parameters.*/
      has<T, Z>(key: obNamespacedKey, type: obpPersistentDataType<T, Z>): boolean;
      /**Returns if the container instance is empty, therefore has no entries  inside it.*/
      isEmpty(): boolean;
      /**Removes a custom key from the PersistentDataHolder instance.*/
      remove(key: obNamespacedKey): void;
      /**Stores a metadata value on the PersistentDataHolder instance.*/
      set<T, Z>(key: obNamespacedKey, type: obpPersistentDataType<T, Z>, value: Z): void;
   }
   /**The PersistentDataHolder interface defines an object that can store  custom persistent meta data on it.*/
   export interface obpPersistentDataHolder {
      /**Returns a custom tag container capable of storing tags on the object.*/
      getPersistentDataContainer(): obpPersistentDataContainer;
   }
   /**This class represents an enum with a generic content type. It defines the  types a custom tag can have.    This interface can be used to create your own custom  PersistentDataType with different complex types. This may be useful  for the likes of a UUIDTagType:     public class UUIDTagType implements PersistentDataType<byte[], UUID> {           {@literal @Override}          public Class<byte[]> getPrimitiveType() {              return byte[].class;          }           {@literal @Override}          public Class<UUID> getComplexType() {              return UUID.class;          }           {@literal @Override}          public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {              ByteBuffer bb = ByteBuffer.wrap(new byte[16]);              bb.putLong(complex.getMostSignificantBits());              bb.putLong(complex.getLeastSignificantBits());              return bb.array();          }           {@literal @Override}          public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {              ByteBuffer bb = ByteBuffer.wrap(primitive);              long firstLong = bb.getLong();              long secondLong = bb.getLong();              return new UUID(firstLong, secondLong);          }      }*/
   export interface obpPersistentDataType<T, Z> {
      /**Creates a complex object based of the passed primitive value*/
      fromPrimitive(primitive: T, context: obpPersistentDataAdapterContext): Z;
      /**Returns the complex object type the primitive value resembles.*/
      getComplexType(): jlClass<Z>;
      /**Returns the primitive data type of this tag.*/
      getPrimitiveType(): jlClass<T>;
      /**Returns the primitive data that resembles the complex object passed to  this method.*/
      toPrimitive(complex: Z, context: obpPersistentDataAdapterContext): T;
   }
   /**A default implementation that simply exists to pass on the retrieved or  inserted value to the next layer.    This implementation does not add any kind of logic, but is used to  provide default implementations for the primitive types.*/
   export class obpPPrimitivePersistentDataType<T> extends jlObject implements obpPersistentDataType<T, T> {
      /**Creates a complex object based of the passed primitive value*/
      fromPrimitive (primitive: T, context: obpPersistentDataAdapterContext): T;
      /**Returns the complex object type the primitive value resembles.*/
      getComplexType (): jlClass<T>;
      /**Returns the primitive data type of this tag.*/
      getPrimitiveType (): jlClass<T>;
      /**Returns the primitive data that resembles the complex object passed to  this method.*/
      toPrimitive (complex: T, context: obpPersistentDataAdapterContext): T;
   }
   /**Represents a phantom.*/
   export interface obePhantom extends obeFlying {
      getSize(): number;
      /**Get the UUID of the entity that caused this phantom to spawn*/
      getSpawningEntity(): juUUID;
      setSize(sz: number): void;
   }
   /**Called when a phantom is spawned for an exhausted player*/
   export class cdpeePhantomPreSpawnEvent extends cdpeePreCreatureSpawnEvent {
      constructor (location: obLocation, entity: obeEntity, reason: obeeCSpawnReason);
      /**Get the entity this phantom is spawning for*/
      getSpawningEntity (): obeEntity;
   }
   /**Represents a Pig.*/
   export interface obePig extends obeSteerable, obeVehicle {}
   /**Represents a Piglin.*/
   export interface obePiglin extends obePiglinAbstract, cdpeRangedEntity {
      /**Get whether the piglin is able to hunt hoglins.*/
      isAbleToHunt(): boolean;
      /**Sets whether the piglin is able to hunt hoglins.*/
      setIsAbleToHunt(flag: boolean): void;
   }
   /**Piglin \/ Piglin Brute.*/
   export interface obePiglinAbstract extends obeMonster, obeAgeable {
      /**Gets the amount of ticks until this entity will be converted to a  Zombified Piglin.*/
      getConversionTime(): number;
      /**Get if this entity is in the process of converting to a Zombified Piglin.*/
      isConverting(): boolean;
      /**Gets whether the piglin is immune to zombification.*/
      isImmuneToZombification(): boolean;
      /**Sets the amount of ticks until this entity will be converted to a  Zombified Piglin.*/
      setConversionTime(time: number): void;
      /**Sets whether the piglin is immune to zombification.*/
      setImmuneToZombification(flag: boolean): void;
   }
   /**Represents a Piglin Brute.*/
   export interface obePiglinBrute extends obePiglinAbstract {}
   /**Stores data for pigs being zapped*/
   export class obeePigZapEvent extends cdpeeEntityZapEvent implements obeCancellable {
      constructor (pig: obePig, bolt: obeLightningStrike, pigzombie: obePigZombie);
      /**Returns the Entity involved in this event*/
      getEntity (): obePig;
      /**Gets the bolt which is striking the pig.*/
      getLightning (): obeLightningStrike;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a Pig Zombie.*/
   export interface obePigZombie extends obeZombie {
      /**Get the pig zombie's current anger level.*/
      getAnger(): number;
      /**Not applicable to this entity*/
      getConversionTime(): number;
      /**Shorthand; gets whether the zombie is angry.*/
      isAngry(): boolean;
      /**Not applicable to this entity*/
      isConverting(): boolean;
      /**Set the pig zombie's current anger level.*/
      setAnger(level: number): void;
      /**Shorthand; sets to either 0 or the default level.*/
      setAngry(angry: boolean): void;
      /**Not applicable to this entity*/
      setConversionTime(time: number): void;
   }
   /**Called when a Pig Zombie is angered by another entity.    If the event is cancelled, the pig zombie will not be angered.*/
   export class obeePigZombieAngerEvent extends obeeEntityEvent implements obeCancellable {
      constructor (pigZombie: obePigZombie, target: obeEntity, newAnger: number);
      /**Returns the Entity involved in this event*/
      getEntity (): obePigZombie;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new anger resulting from this event.*/
      getNewAnger (): number;
      /**Gets the entity (if any) which triggered this anger update.*/
      getTarget (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the new anger resulting from this event.*/
      setNewAnger (newAnger: number): void;
   }
   /**Illager entity.*/
   export interface obePillager extends obeIllager, obiInventoryHolder, cdpeRangedEntity {}
   /**'extended' denotes whether the piston head is currently extended or not.*/
   export interface obbdtPiston extends obbdDirectional {
      /**Gets the value of the 'extended' property.*/
      isExtended(): boolean;
      /**Sets the value of the 'extended' property.*/
      setExtended(extended: boolean): void;
   }
   /**'short' denotes this piston head is shorter than the usual amount because it  is currently retracting.*/
   export interface obbdtPistonHead extends obbdtTechnicalPiston {
      /**Gets the value of the 'short' property.*/
      isShort(): boolean;
      /**Sets the value of the 'short' property.*/
      setShort(_short: boolean): void;
   }
   /**Represents how a block or entity will react when interacting with a piston  when it is extending or retracting.*/
   export class obbPistonMoveReaction extends jlEnum<obbPistonMoveReaction> {
      /**Indicates that the block will resist being pushed or pulled.*/
      static BLOCK: obbPistonMoveReaction;
      /**Indicates the block is fragile and will break if pushed on.*/
      static BREAK: obbPistonMoveReaction;
      /**Indicates that the entity will ignore any interaction(s) with  pistons.*/
      static IGNORE: obbPistonMoveReaction;
      /**Indicates that the block can be pushed or pulled.*/
      static MOVE: obbPistonMoveReaction;
      /**Indicates that the block can only be pushed by pistons, not pulled.*/
      static PUSH_ONLY: obbPistonMoveReaction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbPistonMoveReaction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbPistonMoveReaction[];
   }
   /**Represents a player, connected or not*/
   export interface obePlayer
      extends obeHumanEntity,
         obcConversable,
         obOfflinePlayer,
         obpmPluginMessageRecipient,
         cdpnNetworkClient {
      /**Applies the mending effect to any items just as picking up an orb would.*/
      applyMending(amount: number): number;
      /**Permanently Bans the Profile and IP address currently used by the player.*/
      banPlayerFull(reason: string): obBanEntry;
      /**Permanently Bans the Profile and IP address currently used by the player.*/
      banPlayerFull(reason: string, source: string): obBanEntry;
      /**Bans the Profile and IP address currently used by the player.*/
      banPlayerFull(reason: string, expires: juDate): obBanEntry;
      /**Bans the Profile and IP address currently used by the player.*/
      banPlayerFull(reason: string, expires: juDate, source: string): obBanEntry;
      /**Permanently Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string): obBanEntry;
      /**Permanently Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, kickPlayer: boolean): obBanEntry;
      /**Permanently Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, source: string): obBanEntry;
      /**Permanently Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, source: string, kickPlayer: boolean): obBanEntry;
      /**Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, expires: juDate): obBanEntry;
      /**Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, expires: juDate, kickPlayer: boolean): obBanEntry;
      /**Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, expires: juDate, source: string): obBanEntry;
      /**Bans the IP address currently used by the player.*/
      banPlayerIP(reason: string, expires: juDate, source: string, kickPlayer: boolean): obBanEntry;
      /**Boost a Player that's LivingEntity.isGliding() using a Firework.*/
      boostElytra(firework: obiItemStack): obeFirework;
      /**Checks to see if a player has been hidden from this player*/
      canSee(player: obePlayer): boolean;
      /**Says a message (or runs a command).*/
      chat(msg: string): void;
      /**Gets the socket address of this player*/
      getAddress(): jnInetSocketAddress;
      /**Return the player's progression on the specified advancement.*/
      getAdvancementProgress(advancement: obaAdvancement): obaAdvancementProgress;
      /**Get whether the player can affect mob spawning*/
      getAffectsSpawning(): boolean;
      /**Determines if the Player is allowed to fly via jump key double-tap like  in creative mode.*/
      getAllowFlight(): boolean;
      /**Gets the Location where the player will spawn at their bed, null if  they have not slept in one or their current bed spawn is invalid.*/
      getBedSpawnLocation(): obLocation;
      /**Returns player's client brand name.*/
      getClientBrandName(): string;
      getClientOption<T>(option: cdpClientOption<T>): T;
      /**Get the player's current client side view distance.*/
      getClientViewDistance(): number;
      /**Get the previously set compass target.*/
      getCompassTarget(): obLocation;
      /**Returns the amount of ticks the current cooldown lasts*/
      getCooldownPeriod(): number;
      /**Returns the percentage of attack power available based on the cooldown (zero to one).*/
      getCooledAttackStrength(adjustTicks: number): number;
      /**Gets the "friendly" name to display of this player.*/
      getDisplayName(): string;
      /**Gets the players current exhaustion level.*/
      getExhaustion(): number;
      /**Gets the players current experience points towards the next level.*/
      getExp(): number;
      /**Gets the current allowed speed that a client can fly.*/
      getFlySpeed(): number;
      /**Gets the players current food level*/
      getFoodLevel(): number;
      /**Gets the number that health is scaled to for the client.*/
      getHealthScale(): number;
      /**Gets the players current experience level*/
      getLevel(): number;
      /**Gets the player's current locale.*/
      getLocale(): string;
      /**Gets the currently displayed player list footer for this player.*/
      getPlayerListFooter(): string;
      /**Gets the currently displayed player list header for this player.*/
      getPlayerListHeader(): string;
      /**Gets the name that is shown on the player list.*/
      getPlayerListName(): string;
      /**Gets a copy of this players profile*/
      getPlayerProfile(): cdppPlayerProfile;
      /**Returns the player's current timestamp.*/
      getPlayerTime(): number;
      /**Returns the player's current time offset relative to server time, or  the current player's fixed time if the player's time is absolute.*/
      getPlayerTimeOffset(): number;
      /**Returns the type of weather the player is currently experiencing.*/
      getPlayerWeather(): obWeatherType;
      getResourcePackStatus(): obepPStatus;
      /**Gets the players current saturation level.*/
      getSaturation(): number;
      /**Gets the Scoreboard displayed to this player*/
      getScoreboard(): obsScoreboard;
      /**Gets the entity which is followed by the camera when in  GameMode.SPECTATOR.*/
      getSpectatorTarget(): obeEntity;
      /**Gets the players total experience points.*/
      getTotalExperience(): number;
      /**Gets the current allowed speed that a client can walk.*/
      getWalkSpeed(): number;
      /**Gives the player the amount of experience specified.*/
      giveExp(amount: number): void;
      /**Gives the player the amount of experience specified.*/
      giveExp(amount: number, applyMending: boolean): void;
      /**Gives the player the amount of experience levels specified.*/
      giveExpLevels(amount: number): void;
      hasResourcePack(): boolean;
      /**Hides a player from this player*/
      hidePlayer(plugin: obpPlugin, player: obePlayer): void;
      /**Hide any title that is currently visible to the player*/
      hideTitle(): void;
      /**Checks to see if this player is currently flying or not.*/
      isFlying(): boolean;
      /**Gets if the client is displayed a 'scaled' health, that is, health on a  scale from 0-getHealthScale().*/
      isHealthScaled(): boolean;
      /**Returns true if the player's time is relative to the server time,  otherwise the player's time is absolute and will not change its current  time unless done so with setPlayerTime().*/
      isPlayerTimeRelative(): boolean;
      /**Returns whether the player is sleeping ignored.*/
      isSleepingIgnored(): boolean;
      /**Returns if the player is in sneak mode*/
      isSneaking(): boolean;
      /**Gets whether the player is sprinting or not.*/
      isSprinting(): boolean;
      /**Kicks player with custom kick message.*/
      kickPlayer(message: string): void;
      /**Loads the players current location, health, inventory, motion, and  other information from the username.dat file, in the world\/player  folder.*/
      loadData(): void;
      /**Open a Material.WRITTEN_BOOK for a Player*/
      openBook(book: obiItemStack): void;
      /**Makes the player perform the given command*/
      performCommand(command: string): boolean;
      /**Plays an effect to just this player.*/
      playEffect<T>(loc: obLocation, effect: obEffect, data: T): void;
      /**Play a note for a player at a location.*/
      playNote(loc: obLocation, instrument: obInstrument, note: obNote): void;
      /**Play a sound for a player at the location.*/
      playSound(location: obLocation, sound: string, volume: number, pitch: number): void;
      /**Play a sound for a player at the location.*/
      playSound(location: obLocation, sound: string, category: obSoundCategory, volume: number, pitch: number): void;
      /**Play a sound for a player at the location.*/
      playSound(location: obLocation, sound: obSound, volume: number, pitch: number): void;
      /**Play a sound for a player at the location.*/
      playSound(location: obLocation, sound: obSound, category: obSoundCategory, volume: number, pitch: number): void;
      /**Reset the cooldown counter to 0, effectively starting the cooldown period.*/
      resetCooldown(): void;
      /**Restores the normal condition where the player's time is synchronized  with the server time.*/
      resetPlayerTime(): void;
      /**Restores the normal condition where the player's weather is controlled  by server conditions.*/
      resetPlayerWeather(): void;
      /**Resets the title displayed to the player.*/
      resetTitle(): void;
      /**Saves the players current location, health, inventory, motion, and  other information into the username.dat file, in the world\/player  folder*/
      saveData(): void;
      /**Sends an Action Bar message to the client.*/
      sendActionBar(alternateChar: string, message: string): void;
      /**Sends an Action Bar message to the client.*/
      sendActionBar(message: string): void;
      /**Sends an Action Bar message to the client.*/
      sendActionBar(...message: nmbacBaseComponent[]): void;
      /**Send a block change.*/
      sendBlockChange(loc: obLocation, block: obbdBlockData): void;
      /**Send an experience change.*/
      sendExperienceChange(progress: number): void;
      /**Send an experience change.*/
      sendExperienceChange(progress: number, level: number): void;
      /**Render a map and send it to the player in its entirety.*/
      sendMap(map: obmMapView): void;
      /**Sends the component to the player*/
      sendMessage(component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the player*/
      sendMessage(...components: nmbacBaseComponent[]): void;
      /**Send a packet to the player indicating its operator status level.*/
      sendOpLevel(level: number): void;
      /**Sends this sender a message raw*/
      sendRawMessage(message: string): void;
      /**Send a sign change.*/
      sendSignChange(loc: obLocation, lines: string[]): void;
      /**Send a sign change.*/
      sendSignChange(loc: obLocation, lines: string[], dyeColor: obDyeColor): void;
      /**Show the title to the player, overriding any previously displayed title.*/
      sendTitle(title: cdpTitle): void;
      /**Sends a title and a subtitle message to the player.*/
      sendTitle(title: string, subtitle: string, fadeIn: number, stay: number, fadeOut: number): void;
      /**Set whether the player can affect mob spawning*/
      setAffectsSpawning(affects: boolean): void;
      /**Sets if the Player is allowed to fly via jump key double-tap like in  creative mode.*/
      setAllowFlight(flight: boolean): void;
      /**Sets the Location where the player will spawn at their bed.*/
      setBedSpawnLocation(location: obLocation): void;
      /**Sets the Location where the player will spawn at their bed.*/
      setBedSpawnLocation(location: obLocation, force: boolean): void;
      /**Set the target of the player's compass.*/
      setCompassTarget(loc: obLocation): void;
      /**Sets the "friendly" name to display of this player.*/
      setDisplayName(name: string): void;
      /**Sets the players current exhaustion level*/
      setExhaustion(value: number): void;
      /**Sets the players current experience points towards the next level*/
      setExp(exp: number): void;
      /**Makes this player start or stop flying.*/
      setFlying(value: boolean): void;
      /**Sets the speed at which a client will fly.*/
      setFlySpeed(value: number): void;
      /**Sets the players current food level*/
      setFoodLevel(value: number): void;
      /**Sets the number to scale health to for the client; this will also  setHealthScaled(true).*/
      setHealthScale(scale: number): void;
      /**Sets if the client is displayed a 'scaled' health, that is, health on a  scale from 0-getHealthScale().*/
      setHealthScaled(scale: boolean): void;
      /**Sets the players current experience level*/
      setLevel(level: number): void;
      /**Sets the currently displayed player list footer for this player.*/
      setPlayerListFooter(footer: string): void;
      /**Sets the currently displayed player list header for this player.*/
      setPlayerListHeader(header: string): void;
      /**Sets the currently displayed player list header and footer for this  player.*/
      setPlayerListHeaderFooter(header: string, footer: string): void;
      /**Set the text displayed in the player list header and footer for this player*/
      setPlayerListHeaderFooter(header: nmbacBaseComponent[], footer: nmbacBaseComponent[]): void;
      /**Set the text displayed in the player list header and footer for this player*/
      setPlayerListHeaderFooter(header: nmbacBaseComponent, footer: nmbacBaseComponent): void;
      /**Sets the name that is shown on the in-game player list.*/
      setPlayerListName(name: string): void;
      /**Changes the PlayerProfile for this player.*/
      setPlayerProfile(profile: cdppPlayerProfile): void;
      /**Sets the current time on the player's client.*/
      setPlayerTime(time: number, relative: boolean): void;
      /**Sets the type of weather the player will see.*/
      setPlayerWeather(type: obWeatherType): void;
      /**Request that the player's client download and switch resource packs.*/
      setResourcePack(url: string, hash: number[]): void;
      /**Request that the player's client download and switch resource packs.*/
      setResourcePack(url: string, hash: string): void;
      /**Sets the players current saturation level*/
      setSaturation(value: number): void;
      /**Sets the player's visible Scoreboard.*/
      setScoreboard(scoreboard: obsScoreboard): void;
      /**Sets whether the player is ignored as not sleeping.*/
      setSleepingIgnored(isSleeping: boolean): void;
      /**Sets the sneak mode the player*/
      setSneaking(sneak: boolean): void;
      /**Sets the entity which is followed by the camera when in  GameMode.SPECTATOR.*/
      setSpectatorTarget(entity: obeEntity): void;
      /**Sets whether the player is sprinting or not.*/
      setSprinting(sprinting: boolean): void;
      /**Sets the players current experience points.*/
      setTotalExperience(exp: number): void;
      /**Sets the speed at which a client will walk.*/
      setWalkSpeed(value: number): void;
      /**Allows this player to see a player that was previously hidden.*/
      showPlayer(plugin: obpPlugin, player: obePlayer): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(particle: obParticle, x: number, y: number, z: number, count: number): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(particle: obParticle, x: number, y: number, z: number, count: number, data: T): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(particle: obParticle, location: obLocation, count: number): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(particle: obParticle, location: obLocation, count: number, data: T): void;
      spigot(): obePSpigot;
      /**Stop the specified sound from playing.*/
      stopSound(sound: string): void;
      /**Stop the specified sound from playing.*/
      stopSound(sound: string, category: obSoundCategory): void;
      /**Stop the specified sound from playing.*/
      stopSound(sound: obSound): void;
      /**Stop the specified sound from playing.*/
      stopSound(sound: obSound, category: obSoundCategory): void;
      /**Update the list of commands sent to the client.*/
      updateCommands(): void;
      /**Forces an update of the player's entire inventory.*/
      updateInventory(): void;
      /**Show the title to the player, overriding any previously displayed title.*/
      updateTitle(title: cdpTitle): void;
   }
   export class obePSpigot extends obeESpigot {
      constructor ();
      /**Gets all players hidden with Player.hidePlayer(org.bukkit.entity.Player).*/
      getHiddenPlayers (): juSet<obePlayer>;
      getPing (): number;
      /**Gets the connection address of this player, regardless of whether it  has been spoofed or not.*/
      getRawAddress (): jnInetSocketAddress;
      /**Respawns the player if dead.*/
      respawn (): void;
      /**Sends this sender a chat component.*/
      sendMessage (component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the sender.*/
      sendMessage (...components: nmbacBaseComponent[]): void;
      /**Sends the component to the specified screen position of this player*/
      sendMessage (position: nmbaChatMessageType, sender: juUUID, component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the specified screen position of this player*/
      sendMessage (position: nmbaChatMessageType, sender: juUUID, ...components: nmbacBaseComponent[]): void;
   }
   /**Called when a player is granted a criteria in an advancement.*/
   export class cdpepPlayerAdvancementCriterionGrantEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, advancement: obaAdvancement, criterion: string);
      /**Get the advancement which has been affected.*/
      getAdvancement (): obaAdvancement;
      /**Get the criterion which has been granted.*/
      getCriterion (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player has completed all criteria in an advancement.*/
   export class obepPlayerAdvancementDoneEvent extends obepPlayerEvent {
      constructor (who: obePlayer, advancement: obaAdvancement);
      /**Get the advancement which has been completed.*/
      getAdvancement (): obaAdvancement;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents a player animation event*/
   export class obepPlayerAnimationEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer);
      /**Get the type of this animation event*/
      getAnimationType (): obepPlayerAnimationType;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Different types of player animations*/
   export class obepPlayerAnimationType extends jlEnum<obepPlayerAnimationType> {
      static ARM_SWING: obepPlayerAnimationType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPlayerAnimationType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPlayerAnimationType[];
   }
   /**Called when the player themselves change their armor items    Not currently called for environmental factors though it MAY BE IN THE FUTURE*/
   export class cdpepPlayerArmorChangeEvent extends obepPlayerEvent {
      constructor (player: obePlayer, slotType: cdpepPSlotType, oldItem: obiItemStack, newItem: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new item that's replacing the old*/
      getNewItem (): obiItemStack;
      /**Gets the existing item that's being replaced*/
      getOldItem (): obiItemStack;
      /**Gets the type of slot being altered.*/
      getSlotType (): cdpepPSlotType;
      toString (): string;
   }
   export class cdpepPSlotType extends jlEnum<cdpepPSlotType> {
      static CHEST: cdpepPSlotType;
      static FEET: cdpepPSlotType;
      static HEAD: cdpepPSlotType;
      static LEGS: cdpepPSlotType;
      /**Gets the type of slot via the specified material*/
      static getByMaterial (material: obMaterial): cdpepPSlotType;
      /**Gets an immutable set of all allowed material types that can be placed in an  armor slot.*/
      getTypes (): juSet<obMaterial>;
      /**Gets whether or not this material can be equipped to a slot*/
      static isEquipable (material: obMaterial): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpepPSlotType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpepPSlotType[];
   }
   /**Called when a player interacts with an armor stand and will either swap, retrieve or place an item.*/
   export class obepPlayerArmorStandManipulateEvent extends obepPlayerInteractEntityEvent {
      constructor (
         who: obePlayer,
         clickedEntity: obeArmorStand,
         playerItem: obiItemStack,
         armorStandItem: obiItemStack,
         slot: obiEquipmentSlot
      );
      /**Returns the item held by the armor stand.*/
      getArmorStandItem (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the item held by the player.*/
      getPlayerItem (): obiItemStack;
      /**Gets the entity that was right-clicked by the player.*/
      getRightClicked (): obeArmorStand;
      /**Returns the raw item slot of the armor stand in this event.*/
      getSlot (): obiEquipmentSlot;
   }
   /**Called when processing a player's attack on an entity when the player's attack strength cooldown is reset*/
   export class cdpepPlayerAttackEntityCooldownResetEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, attackedEntity: obeEntity, cooledAttackStrength: number);
      /**Returns the entity attacked by the player*/
      getAttackedEntity (): obeEntity;
      /**Get the value of the players cooldown attack strength when they initiated the attack*/
      getCooledAttackStrength (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Cancelling this event will prevent the target player from having their cooldown reset from attacking this entity*/
      setCancelled (cancel: boolean): void;
   }
   /**Thrown when a player attempts to pick an item up from the ground*/
   export class obepPlayerAttemptPickupItemEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, item: obeItem);
      constructor (player: obePlayer, item: obeItem, remaining: number);
      /**Gets if the item will fly at the player*/
      getFlyAtPlayer (): boolean;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Item attempted by the player.*/
      getItem (): obeItem;
      /**Gets the amount that will remain on the ground, if any*/
      getRemaining (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set if the item will fly at the player*/
      setFlyAtPlayer (flyAtPlayer: boolean): void;
   }
   /**This event is fired when the player is almost about to enter the bed.*/
   export class obepPlayerBedEnterEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, bed: obbBlock);
      constructor (who: obePlayer, bed: obbBlock, bedEnterResult: obepPBedEnterResult);
      /**Returns the bed block involved in this event.*/
      getBed (): obbBlock;
      /**This describes the default outcome of this event.*/
      getBedEnterResult (): obepPBedEnterResult;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the action to take with the interacted bed.*/
      setUseBed (useBed: obeEResult): void;
      /**This controls the action to take with the bed that was clicked on.*/
      useBed (): obeEResult;
   }
   /**Represents the default possible outcomes of this event.*/
   export class obepPBedEnterResult extends jlEnum<obepPBedEnterResult> {
      /**The world doesn't allow sleeping (ex.*/
      static NOT_POSSIBLE_HERE: obepPBedEnterResult;
      /**Entering the bed is prevented due to it not being night nor  thundering currently.*/
      static NOT_POSSIBLE_NOW: obepPBedEnterResult;
      /**Entering the bed is prevented due to there being monsters nearby.*/
      static NOT_SAFE: obepPBedEnterResult;
      /**Bed was obstructed.*/
      static OBSTRUCTED: obepPBedEnterResult;
      /**The player will enter the bed.*/
      static OK: obepPBedEnterResult;
      /**Entering the bed is prevented due to there being some other problem.*/
      static OTHER_PROBLEM: obepPBedEnterResult;
      /**Entering the bed is prevented due to the player being too far away.*/
      static TOO_FAR_AWAY: obepPBedEnterResult;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPBedEnterResult;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPBedEnterResult[];
   }
   /**This event is fired when the player is leaving a bed.*/
   export class obepPlayerBedLeaveEvent extends obepPlayerEvent {
      constructor (who: obePlayer, bed: obbBlock, setBedSpawn: boolean);
      /**Returns the bed block involved in this event.*/
      getBed (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Set if this event should set the new spawn location for the  Player.*/
      setSpawnLocation (setBedSpawn: boolean): void;
      /**Get if this event should set the new spawn location for the  Player.*/
      shouldSetSpawnLocation (): boolean;
   }
   /**Called when a player empties a bucket*/
   export class obepPlayerBucketEmptyEvent extends obepPlayerBucketEvent {
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a player interacts with a Bucket*/
   export class obepPlayerBucketEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      /**Gets the block involved in this event.*/
      getBlock (): obbBlock;
      /**Return the block clicked*/
      getBlockClicked (): obbBlock;
      /**Get the face on the clicked block*/
      getBlockFace (): obbBlockFace;
      /**Returns the bucket used in this event*/
      getBucket (): obMaterial;
      /**The hand used to perform this action.*/
      getHand (): obiEquipmentSlot;
      /**Get the resulting item in hand after the bucket event*/
      getItemStack (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the item in hand after the event*/
      setItemStack (itemStack: obiItemStack): void;
   }
   /**Called when a player fills a bucket*/
   export class obepPlayerBucketFillEvent extends obepPlayerBucketEvent {
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack
      );
      constructor (
         who: obePlayer,
         block: obbBlock,
         blockClicked: obbBlock,
         blockFace: obbBlockFace,
         bucket: obMaterial,
         itemInHand: obiItemStack,
         hand: obiEquipmentSlot
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a player sets the effect for a beacon*/
   export class ippepPlayerChangeBeaconEffectEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, primary: obpPotionEffectType, secondary: obpPotionEffectType, beacon: obbBlock);
      getBeacon (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPrimary (): obpPotionEffectType;
      getSecondary (): obpPotionEffectType;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets if the item used to change the beacon should be consumed.*/
      setConsumeItem (consumeItem: boolean): void;
      /**Sets the primary effect*/
      setPrimary (primary: obpPotionEffectType): void;
      /**Sets the secondary effect*/
      setSecondary (secondary: obpPotionEffectType): void;
      /**Gets if the item used to change the beacon will be consume.*/
      willConsumeItem (): boolean;
   }
   /**Called when a player changes their main hand in the client settings.*/
   export class obepPlayerChangedMainHandEvent extends obepPlayerEvent {
      constructor (who: obePlayer, mainHand: obiMainHand);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new main hand of the player.*/
      getMainHand (): obiMainHand;
   }
   /**Called when a player switches to another world.*/
   export class obepPlayerChangedWorldEvent extends obepPlayerEvent {
      constructor (player: obePlayer, from: obWorld);
      /**Gets the world the player is switching from.*/
      getFrom (): obWorld;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**This event is called after a player registers or unregisters a new plugin  channel.*/
   export class obepPlayerChannelEvent extends obepPlayerEvent {
      constructor (player: obePlayer, channel: string);
      getChannel (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Is called when a Player receives a Chunk    Can for example be used for spawning a fake entity when the player receives a chunk.   Should only be used for packet\/clientside related stuff.  Not intended for modifying server side state.*/
   export class ippepPlayerChunkLoadEvent extends obewChunkEvent {
      constructor (chunk: obChunk, player: obePlayer);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPlayer (): obePlayer;
   }
   /**Is called when a Player receives a chunk unload packet.   Should only be used for packet\/clientside related stuff.  Not intended for modifying server side.*/
   export class ippepPlayerChunkUnloadEvent extends obewChunkEvent {
      constructor (chunk: obChunk, player: obePlayer);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPlayer (): obePlayer;
   }
   /**Called when the player changes his client settings*/
   export class cdpepPlayerClientOptionsChangeEvent extends obepPlayerEvent {
      constructor (
         player: obePlayer,
         locale: string,
         viewDistance: number,
         chatVisibility: cdpCChatVisibility,
         chatColors: boolean,
         skinParts: cdpSkinParts,
         mainHand: obiMainHand
      );
      getChatVisibility (): cdpCChatVisibility;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getLocale (): string;
      getMainHand (): obiMainHand;
      getSkinParts (): cdpSkinParts;
      getViewDistance (): number;
      hasChatColorsEnabled (): boolean;
      hasChatColorsEnabledChanged (): boolean;
      hasChatVisibilityChanged (): boolean;
      hasLocaleChanged (): boolean;
      hasMainHandChanged (): boolean;
      hasSkinPartsChanged (): boolean;
      hasViewDistanceChanged (): boolean;
   }
   /**This event is called whenever a player runs a command (by placing a slash  at the start of their message). It is called early in the command handling  process, and modifications in this event (via setMessage(String))  will be shown in the behavior.    Many plugins will have no use for this event, and you should  attempt to avoid using it if it is not necessary.    Some examples of valid uses for this event are:    Logging executed commands to a separate file  Variable substitution. For example, replacing      ${nearbyPlayer} with the name of the nearest other      player, or simulating the @a and @p      decorators used by Command Blocks in plugins that do not handle it.  Conditionally blocking commands belonging to other plugins. For      example, blocking the use of the \/home command in a      combat arena.  Per-sender command aliases. For example, after a player runs the      command \/calias cr gamemode creative, the next time they      run \/cr, it gets replaced into      \/gamemode creative. (Global command aliases should be      done by registering the alias.)      Examples of incorrect uses are:    Using this event to run command logic      If the event is cancelled, processing of the command will halt.    The state of whether or not there is a slash (\/) at the  beginning of the message should be preserved. If a slash is added or  removed, unexpected behavior may result.*/
   export class obepPlayerCommandPreprocessEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, message: string);
      constructor (player: obePlayer, message: string, recipients: juSet<obePlayer>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the command that the player is attempting to send.*/
      getMessage (): string;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the command that the player will send.*/
      setMessage (command: string): void;
      /**Sets the player that this command will be executed as.*/
      setPlayer (player: obePlayer): void;
   }
   /**This event is called when the list of available server commands is sent to  the player.    Commands may be removed from display using this event, but implementations  are not required to securely remove all traces of the command. If secure  removal of commands is required, then the command should be assigned a  permission which is not granted to the player.*/
   export class obepPlayerCommandSendEvent extends obepPlayerEvent {
      constructor (player: obePlayer, commands: juCollection<string>);
      /**Returns a mutable collection of all top level commands to be sent.*/
      getCommands (): juCollection<string>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**This event is invoked when a player has disconnected. It is guaranteed that,  if the server is in online-mode, that the provided uuid and username have been  validated.       The event is invoked for players who have not yet logged into the world, whereas  PlayerQuitEvent is only invoked on players who have logged into the world.       The event is invoked for players who have already logged into the world,  although whether or not the player exists in the world at the time of  firing is undefined. (That is, whether the plugin can retrieve a Player object  using the event parameters is undefined). However, it is guaranteed that this  event is invoked AFTER PlayerQuitEvent, if the player has already logged into the world.       This event is guaranteed to never fire unless AsyncPlayerPreLoginEvent has  been fired beforehand, and this event may not be called in parallel with  AsyncPlayerPreLoginEvent for the same connection.       Cancelling the AsyncPlayerPreLoginEvent guarantees the corresponding  PlayerConnectionCloseEvent is never called.       The event may be invoked asynchronously or synchronously. Plugins should check  Event.isAsynchronous() and handle accordingly.*/
   export class cdpepPlayerConnectionCloseEvent extends obeEvent {
      constructor (playerUniqueId: juUUID, playerName: string, ipAddress: jnInetAddress, async: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the player's IP address.*/
      getIpAddress (): jnInetAddress;
      /**Returns the name of the player disconnecting.*/
      getPlayerName (): string;
      /**Returns the UUID of the player disconnecting.*/
      getPlayerUniqueId (): juUUID;
   }
   /**Thrown whenever a Player dies*/
   export class obeePlayerDeathEvent extends obeeEntityDeathEvent {
      constructor (
         player: obePlayer,
         drops: juList<obiItemStack>,
         droppedExp: number,
         newExp: number,
         newTotalExp: number,
         newLevel: number,
         deathMessage: string
      );
      constructor (
         player: obePlayer,
         drops: juList<obiItemStack>,
         droppedExp: number,
         newExp: number,
         newTotalExp: number,
         newLevel: number,
         deathMessage: string,
         doExpDrop: boolean
      );
      constructor (
         player: obePlayer,
         drops: juList<obiItemStack>,
         droppedExp: number,
         newExp: number,
         deathMessage: string
      );
      constructor (player: obePlayer, drops: juList<obiItemStack>, droppedExp: number, deathMessage: string);
      /**Get the death message that will appear to everyone on the server.*/
      getDeathMessage (): string;
      /**Returns the Entity involved in this event*/
      getEntity (): obePlayer;
      /**A mutable collection to add items that the player should retain in their inventory on death (Similar to KeepInventory game rule)   You MUST remove the item from the .getDrops() collection too or it will duplicate!*/
      getItemsToKeep (): juList<obiItemStack>;
      /**Gets if the Player keeps inventory on death.*/
      getKeepInventory (): boolean;
      /**Gets if the Player should keep all EXP at respawn.*/
      getKeepLevel (): boolean;
      /**Gets how much EXP the Player should have at respawn.*/
      getNewExp (): number;
      /**Gets the Level the Player should have at respawn.*/
      getNewLevel (): number;
      /**Gets the Total EXP the Player should have at respawn.*/
      getNewTotalExp (): number;
      /**Set the death message that will appear to everyone on the server.*/
      setDeathMessage (deathMessage: string): void;
      /**Sets if the Player keeps inventory on death.*/
      setKeepInventory (keepInventory: boolean): void;
      /**Sets if the Player should keep all EXP at respawn.*/
      setKeepLevel (keepLevel: boolean): void;
      /**Sets how much EXP the Player should have at respawn.*/
      setNewExp (exp: number): void;
      /**Sets the Level the Player should have at respawn.*/
      setNewLevel (level: number): void;
      /**Sets the Total EXP the Player should have at respawn.*/
      setNewTotalExp (totalExp: number): void;
      setShouldDropExperience (doExpDrop: boolean): void;
      shouldDropExperience (): boolean;
   }
   /**Thrown when a player drops an item from their inventory*/
   export class obepPlayerDropItemEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, drop: obeItem);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the ItemDrop created by the player*/
      getItemDrop (): obeItem;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player edits or signs a book and quill item. If the event is  cancelled, no changes are made to the BookMeta*/
   export class obepPlayerEditBookEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         who: obePlayer,
         slot: number,
         previousBookMeta: obimBookMeta,
         newBookMeta: obimBookMeta,
         isSigning: boolean
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the book meta that the player is attempting to add to the book.*/
      getNewBookMeta (): obimBookMeta;
      /**Gets the book meta currently on the book.*/
      getPreviousBookMeta (): obimBookMeta;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets whether or not the book is being signed.*/
      isSigning (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the book meta that will actually be added to the book.*/
      setNewBookMeta (newBookMeta: obimBookMeta): void;
      /**Sets whether or not the book is being signed.*/
      setSigning (signing: boolean): void;
   }
   /**Called when a player throws an egg and it might hatch*/
   export class obepPlayerEggThrowEvent extends obepPlayerEvent {
      constructor (player: obePlayer, egg: obeEgg, hatching: boolean, numHatches: number, hatchingType: obeEntityType);
      /**Gets the egg involved in this event.*/
      getEgg (): obeEgg;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the type of the mob being hatched (EntityType.CHICKEN by default)*/
      getHatchingType (): obeEntityType;
      /**Get the number of mob hatches from the egg.*/
      getNumHatches (): number;
      /**Gets whether the egg is hatching or not.*/
      isHatching (): boolean;
      /**Sets whether the egg will hatch or not.*/
      setHatching (hatching: boolean): void;
      /**Change the type of mob being hatched by the egg*/
      setHatchingType (hatchType: obeEntityType): void;
      /**Change the number of mobs coming out of the hatched egg*/
      setNumHatches (numHatches: number): void;
   }
   /**Fired when a player boosts elytra flight with a firework*/
   export class cdpepPlayerElytraBoostEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, itemStack: obiItemStack, firework: obeFirework);
      /**Get the firework entity that was spawned*/
      getFirework (): obeFirework;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the firework itemstack used*/
      getItemStack (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set whether to consume the firework or not*/
      setShouldConsume (consume: boolean): void;
      /**Get whether to consume the firework or not*/
      shouldConsume (): boolean;
   }
   /**Represents a player related event*/
   export class obepPlayerEvent extends obeEvent {
      constructor (who: obePlayer);
      constructor (who: obePlayer, async: boolean);
      /**Returns the player involved in this event*/
      getPlayer (): obePlayer;
   }
   /**Called when a players experience changes naturally*/
   export class obepPlayerExpChangeEvent extends obepPlayerEvent {
      constructor (player: obePlayer, expAmount: number);
      constructor (player: obePlayer, sourceEntity: obeEntity, expAmount: number);
      /**Get the amount of experience the player will receive*/
      getAmount (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the source that provided the experience.*/
      getSource (): obeEntity;
      /**Set the amount of experience the player will receive*/
      setAmount (amount: number): void;
   }
   /**Thrown when a player is fishing*/
   export class obepPlayerFishEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, entity: obeEntity, hookEntity: obeFishHook, state: obepPState);
      /**Gets the entity caught by the player.*/
      getCaught (): obeEntity;
      /**Gets the amount of experience received when fishing.*/
      getExpToDrop (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the fishing hook.*/
      getHook (): obeFishHook;
      /**Gets the state of the fishing*/
      getState (): obepPState;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the amount of experience received when fishing.*/
      setExpToDrop (amount: number): void;
   }
   /**An enum to specify the state of the fishing*/
   export class obepPState extends jlEnum<obepPState> {
      /**Called when there is a bite on the hook and it is ready to be reeled  in.*/
      static BITE: obepPState;
      /**When a player has successfully caught an entity.*/
      static CAUGHT_ENTITY: obepPState;
      /**When a player has successfully caught a fish and is reeling it in.*/
      static CAUGHT_FISH: obepPState;
      /**When a player fails to catch a bite while fishing usually due to  poor timing.*/
      static FAILED_ATTEMPT: obepPState;
      /**When a player is fishing, ie casting the line out.*/
      static FISHING: obepPState;
      /**When a bobber is stuck in the ground.*/
      static IN_GROUND: obepPState;
      /**When a player reels in their hook without receiving any bites.*/
      static REEL_IN: obepPState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPState[];
   }
   /**Called when a player places an item in or takes an item out of a flowerpot.*/
   export class ippepPlayerFlowerPotManipulateEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, flowerpot: obbBlock, item: obiItemStack, placing: boolean);
      /**Gets the flowerpot that is involved in this event.*/
      getFlowerpot (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item being placed, or taken from, the flower pot.*/
      getItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets if the item is being placed into the flowerpot.*/
      isPlacing (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when the GameMode of the player is changed.*/
   export class obepPlayerGameModeChangeEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, newGameMode: obGameMode);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the GameMode the player is switched to.*/
      getNewGameMode (): obGameMode;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**This event is fired during a player handshake.   If there are no listeners listening to this event, the logic default  to your server platform will be ran.   WARNING: TAMPERING WITH THIS EVENT CAN BE DANGEROUS*/
   export class cdpepPlayerHandshakeEvent extends obeEvent implements obeCancellable {
      constructor (originalHandshake: string, cancelled: boolean);
      /**Gets the message to display to the client when authentication fails.*/
      getFailMessage (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the original handshake string.*/
      getOriginalHandshake (): string;
      /**Gets the profile properties.*/
      getPropertiesJson (): string;
      /**Gets the server hostname string.*/
      getServerHostname (): string;
      /**Gets the socket address hostname string.*/
      getSocketAddressHostname (): string;
      /**Gets the unique id.*/
      getUniqueId (): juUUID;
      /**Determines if this event is cancelled.*/
      isCancelled (): boolean;
      /**Determines if authentication failed.*/
      isFailed (): boolean;
      /**Sets if this event is cancelled.*/
      setCancelled (cancelled: boolean): void;
      /**Sets if authentication failed and the client should be disconnected.*/
      setFailed (failed: boolean): void;
      /**Sets the message to display to the client when authentication fails.*/
      setFailMessage (failMessage: string): void;
      /**Sets the profile properties.*/
      setPropertiesJson (propertiesJson: string): void;
      /**Sets the server hostname string.*/
      setServerHostname (serverHostname: string): void;
      /**Sets the socket address hostname string.*/
      setSocketAddressHostname (socketAddressHostname: string): void;
      /**Sets the unique id.*/
      setUniqueId (uniqueId: juUUID): void;
   }
   /**This event is called whenever a player harvests a block.    A 'harvest' is when a block drops an item (usually some sort of crop) and  changes state, but is not broken in order to drop the item.    This event is not called for when a block is broken, to handle that, listen  for BlockBreakEvent and  BlockDropItemEvent.*/
   export class obepPlayerHarvestBlockEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, harvestedBlock: obbBlock, itemsHarvested: juList<obiItemStack>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the block that is being harvested.*/
      getHarvestedBlock (): obbBlock;
      /**Gets a list of items that are being harvested from this block.*/
      getItemsHarvested (): juList<obiItemStack>;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents an event that is called when a player right clicks an entity that  also contains the location where the entity was clicked.    Note that the client may sometimes spuriously send this packet in addition to PlayerInteractEntityEvent.  Users are advised to listen to this (parent) class unless specifically required.    Note that interacting with Armor Stands fires this event only and not its parent and as such users are expressly required  to listen to this event for that scenario.*/
   export class obepPlayerInteractAtEntityEvent extends obepPlayerInteractEntityEvent {
      constructor (who: obePlayer, clickedEntity: obeEntity, position: obuVector);
      constructor (who: obePlayer, clickedEntity: obeEntity, position: obuVector, hand: obiEquipmentSlot);
      getClickedPosition (): obuVector;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents an event that is called when a player right clicks an entity.*/
   export class obepPlayerInteractEntityEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, clickedEntity: obeEntity);
      constructor (who: obePlayer, clickedEntity: obeEntity, hand: obiEquipmentSlot);
      /**The hand used to perform this interaction.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the entity that was right-clicked by the player.*/
      getRightClicked (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents an event that is called when a player interacts with an object or  air, potentially fired once for each hand. The hand can be determined using  getHand().    This event will fire as cancelled if the vanilla behavior is to do nothing  (e.g interacting with air). For the purpose of avoiding doubt, this means  that the event will only be in the cancelled state if it is fired as a result  of some prediction made by the server where no subsequent code will run,  rather than when the subsequent interaction activity (e.g. placing a block in  an illegal position (BlockCanBuildEvent) will fail.*/
   export class obepPlayerInteractEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         who: obePlayer,
         action: obebAction,
         item: obiItemStack,
         clickedBlock: obbBlock,
         clickedFace: obbBlockFace
      );
      constructor (
         who: obePlayer,
         action: obebAction,
         item: obiItemStack,
         clickedBlock: obbBlock,
         clickedFace: obbBlockFace,
         hand: obiEquipmentSlot
      );
      constructor (
         who: obePlayer,
         action: obebAction,
         item: obiItemStack,
         clickedBlock: obbBlock,
         clickedFace: obbBlockFace,
         hand: obiEquipmentSlot,
         interactionPoint: obLocation
      );
      /**Returns the action type*/
      getAction (): obebAction;
      /**Returns the face of the block that was clicked*/
      getBlockFace (): obbBlockFace;
      /**Returns the clicked block*/
      getClickedBlock (): obbBlock;
      /**The hand used to perform this interaction.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**The exact point at which the interaction occurred.*/
      getInteractionPoint (): obLocation;
      /**Returns the item in hand represented by this event*/
      getItem (): obiItemStack;
      /**Convenience method.*/
      getMaterial (): obMaterial;
      /**Check if this event involved a block*/
      hasBlock (): boolean;
      /**Check if this event involved an item*/
      hasItem (): boolean;
      /**Convenience method to inform the user whether this was a block  placement event.*/
      isBlockInHand (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      setUseInteractedBlock (useInteractedBlock: obeEResult): void;
      setUseItemInHand (useItemInHand: obeEResult): void;
      /**This controls the action to take with the block (if any) that was  clicked on.*/
      useInteractedBlock (): obeEResult;
      /**This controls the action to take with the item the player is holding.*/
      useItemInHand (): obeEResult;
   }
   /**Interface to the inventory of a Player, including the four armor slots and any extra slots.*/
   export interface obiPlayerInventory extends obiInventory {
      /**Get all ItemStacks from the armor slots*/
      getArmorContents(): obiItemStack[];
      /**Return the ItemStack from the boots slot*/
      getBoots(): obiItemStack;
      /**Return the ItemStack from the chestplate slot*/
      getChestplate(): obiItemStack;
      /**Get all additional ItemStacks stored in this inventory.*/
      getExtraContents(): obiItemStack[];
      /**Get the slot number of the currently held item*/
      getHeldItemSlot(): number;
      /**Return the ItemStack from the helmet slot*/
      getHelmet(): obiItemStack;
      /**Gets the block or entity belonging to the open inventory*/
      getHolder(): obeHumanEntity;
      /**Gets the ItemStack at the given equipment slot in the inventory.*/
      getItem(slot: obiEquipmentSlot): obiItemStack;
      /**Gets a copy of the item the player is currently holding  in their main hand.*/
      getItemInMainHand(): obiItemStack;
      /**Gets a copy of the item the player is currently holding  in their off hand.*/
      getItemInOffHand(): obiItemStack;
      /**Return the ItemStack from the leg slot*/
      getLeggings(): obiItemStack;
      /**Put the given ItemStacks into the armor slots*/
      setArmorContents(items: obiItemStack[]): void;
      /**Put the given ItemStack into the boots slot.*/
      setBoots(boots: obiItemStack): void;
      /**Put the given ItemStack into the chestplate slot.*/
      setChestplate(chestplate: obiItemStack): void;
      /**Put the given ItemStacks into the extra slots    See getExtraContents() for an explanation of extra slots.*/
      setExtraContents(items: obiItemStack[]): void;
      /**Set the slot number of the currently held item.*/
      setHeldItemSlot(slot: number): void;
      /**Put the given ItemStack into the helmet slot.*/
      setHelmet(helmet: obiItemStack): void;
      /**Stores the ItemStack at the given index of the inventory.*/
      setItem(index: number, item: obiItemStack): void;
      /**Stores the ItemStack at the given equipment slot in the inventory.*/
      setItem(slot: obiEquipmentSlot, item: obiItemStack): void;
      /**Sets the item the player is holding in their main hand.*/
      setItemInMainHand(item: obiItemStack): void;
      /**Sets the item the player is holding in their off hand.*/
      setItemInOffHand(item: obiItemStack): void;
      /**Put the given ItemStack into the leg slot.*/
      setLeggings(leggings: obiItemStack): void;
   }
   /**Fired when a player's item breaks (such as a shovel or flint and steel).    After this event, the item's amount will be set to item amount - 1  and its durability will be reset to 0.*/
   export class obepPlayerItemBreakEvent extends obepPlayerEvent {
      constructor (player: obePlayer, brokenItem: obiItemStack);
      /**Gets the item that broke*/
      getBrokenItem (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**This event will fire when a player is finishing consuming an item (food,  potion, milk bucket).    If the ItemStack is modified the server will use the effects of the new  item and not remove the original one from the player's inventory.    If the event is cancelled the effect will not be applied and the item will  not be removed from the player's inventory.*/
   export class obepPlayerItemConsumeEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, item: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item that is being consumed.*/
      getItem (): obiItemStack;
      /**Return the custom item stack that will replace the consumed item, or null if no  custom replacement has been set (which means the default replacement will be used).*/
      getReplacement (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the item being consumed*/
      setItem (item: obiItemStack): void;
      /**Set a custom item stack to replace the consumed item.*/
      setReplacement (replacement: obiItemStack): void;
   }
   /**Fired when a player receives an item cooldown.*/
   export class ippepPlayerItemCooldownEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, type: obMaterial, cooldown: number);
      /**Gets the cooldown in ticks.*/
      getCooldown (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the material affected by the cooldown.*/
      getType (): obMaterial;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the cooldown of the material in ticks.*/
      setCooldown (cooldown: number): void;
   }
   /**Called when an item used by the player takes durability damage as a result of  being used.*/
   export class obepPlayerItemDamageEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, what: obiItemStack, damage: number);
      /**Gets the amount of durability damage this item will be taking.*/
      getDamage (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item being damaged.*/
      getItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      setDamage (damage: number): void;
   }
   /**Fired when a player changes their currently held item*/
   export class obepPlayerItemHeldEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, previous: number, current: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new held slot index*/
      getNewSlot (): number;
      /**Gets the previous held slot index*/
      getPreviousSlot (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents when a player has an item repaired via the Mending enchantment.    This event is fired directly before the PlayerExpChangeEvent, and the  results of this event directly affect the PlayerExpChangeEvent.*/
   export class obepPlayerItemMendEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, item: obiItemStack, experienceOrb: obeExperienceOrb, repairAmount: number);
      /**Get the experience orb triggering the event.*/
      getExperienceOrb (): obeExperienceOrb;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the ItemStack to be repaired.*/
      getItem (): obiItemStack;
      /**Get the amount the item is to be repaired.*/
      getRepairAmount (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      /**Set the amount the item will be repaired.*/
      setRepairAmount (amount: number): void;
   }
   /**Called when a player joins a server*/
   export class obepPlayerJoinEvent extends obepPlayerEvent {
      constructor (playerJoined: obePlayer, joinMessage: string);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the join message to send to all online players*/
      getJoinMessage (): string;
      /**Sets the join message to send to all online players*/
      setJoinMessage (joinMessage: string): void;
   }
   /**Called when the server detects the player is jumping.    Added to avoid the overhead and special case logic that many plugins use  when checking for jumps via PlayerMoveEvent, this event is fired whenever  the server detects that the player is jumping.*/
   export class cdpepPlayerJumpEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, from: obLocation, to: obLocation);
      /**Gets the location this player jumped from*/
      getFrom (): obLocation;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location this player jumped to   This information is based on what the client sends, it typically  has little relation to the arc of the jump at any given point.*/
      getTo (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the location to mark as where the player jumped from*/
      setFrom (from: obLocation): void;
   }
   /**Called when a player gets kicked from the server*/
   export class obepPlayerKickEvent extends obepPlayerEvent implements obeCancellable {
      constructor (playerKicked: obePlayer, kickReason: string, leaveMessage: string);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the leave message send to all online players*/
      getLeaveMessage (): string;
      /**Gets the reason why the player is getting kicked*/
      getReason (): string;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the leave message send to all online players*/
      setLeaveMessage (leaveMessage: string): void;
      /**Sets the reason why the player is getting kicked*/
      setReason (kickReason: string): void;
   }
   /**Called when a player shoots a projectile*/
   export class cdpepPlayerLaunchProjectileEvent extends obepPlayerEvent implements obeCancellable {
      constructor (shooter: obePlayer, itemStack: obiItemStack, projectile: obeProjectile);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the ItemStack used to fire the projectile*/
      getItemStack (): obiItemStack;
      /**Gets the projectile which will be launched by this event*/
      getProjectile (): obeProjectile;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set whether to consume the ItemStack or not*/
      setShouldConsume (consumeItem: boolean): void;
      /**Get whether to consume the ItemStack or not*/
      shouldConsume (): boolean;
   }
   /**Called immediately prior to a creature being leashed by a player.*/
   export class obeePlayerLeashEntityEvent extends obeEvent implements obeCancellable {
      constructor (what: obeEntity, leashHolder: obeEntity, leasher: obePlayer);
      /**Returns the entity being leashed.*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the entity that is holding the leash.*/
      getLeashHolder (): obeEntity;
      /**Returns the player involved in this event*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export class ippepPlayerLecternPageChangeEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         player: obePlayer,
         lectern: obbLectern,
         book: obiItemStack,
         pageChangeDirection: ippepPPageChangeDirection,
         oldPage: number,
         newPage: number
      );
      /**Gets the current ItemStack on the lectern.*/
      getBook (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the lectern involved.*/
      getLectern (): obbLectern;
      /**Gets the page changed to.*/
      getNewPage (): number;
      /**Gets the page changed from.*/
      getOldPage (): number;
      /**Gets the page change direction.*/
      getPageChangeDirection (): ippepPPageChangeDirection;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the page changed to.*/
      setNewPage (newPage: number): void;
   }
   export class ippepPPageChangeDirection extends jlEnum<ippepPPageChangeDirection> {
      static LEFT: ippepPPageChangeDirection;
      static RIGHT: ippepPPageChangeDirection;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): ippepPPageChangeDirection;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): ippepPPageChangeDirection[];
   }
   /**Called when a players level changes*/
   export class obepPlayerLevelChangeEvent extends obepPlayerEvent {
      constructor (player: obePlayer, oldLevel: number, newLevel: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new level of the player*/
      getNewLevel (): number;
      /**Gets the old level of the player*/
      getOldLevel (): number;
   }
   /**Called when a player changes their locale in the client settings.*/
   export class obepPlayerLocaleChangeEvent extends obepPlayerEvent {
      constructor (who: obePlayer, locale: string);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getLocale (): string;
   }
   /**Stores details for players attempting to log in.    Note that this event is called early in the player initialization  process. It is recommended that most options involving the Player  entity be postponed to the PlayerJoinEvent instead.*/
   export class obepPlayerLoginEvent extends obepPlayerEvent {
      constructor (player: obePlayer, hostname: string, address: jnInetAddress);
      constructor (player: obePlayer, hostname: string, address: jnInetAddress, realAddress: jnInetAddress);
      constructor (
         player: obePlayer,
         hostname: string,
         address: jnInetAddress,
         result: obepPResult,
         message: string,
         realAddress: jnInetAddress
      );
      /**Allows the player to log in*/
      allow (): void;
      /**Disallows the player from logging in, with the given reason*/
      disallow (result: obepPResult, message: string): void;
      /**Gets the InetAddress for the Player associated with this event.*/
      getAddress (): jnInetAddress;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the hostname that the player used to connect to the server, or  blank if unknown*/
      getHostname (): string;
      /**Gets the current kick message that will be used if getResult() !=  Result.ALLOWED*/
      getKickMessage (): string;
      /**Gets the connection address of this player, regardless of whether it has been spoofed or not.*/
      getRealAddress (): jnInetAddress;
      /**Gets the current result of the login, as an enum*/
      getResult (): obepPResult;
      /**Sets the kick message to display if getResult() != Result.ALLOWED*/
      setKickMessage (message: string): void;
      /**Sets the new result of the login, as an enum*/
      setResult (result: obepPResult): void;
   }
   /**Basic kick reasons for communicating to plugins*/
   export class obepPResult extends jlEnum<obepPResult> {
      /**The player is allowed to log in*/
      static ALLOWED: obepPResult;
      /**The player is not allowed to log in, due to them being banned*/
      static KICK_BANNED: obepPResult;
      /**The player is not allowed to log in, due to the server being full*/
      static KICK_FULL: obepPResult;
      /**The player is not allowed to log in, for reasons undefined*/
      static KICK_OTHER: obepPResult;
      /**The player is not allowed to log in, due to them not being on the  white list*/
      static KICK_WHITELIST: obepPResult;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPResult;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPResult[];
   }
   /**Called when a player selects a banner patten in a loom inventory.*/
   export class ippepPlayerLoomPatternSelectEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, loomInventory: obiLoomInventory, patternType: obbbPatternType);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the loom inventory involved.*/
      getLoomInventory (): obiLoomInventory;
      /**Gets the pattern type selected.*/
      getPatternType (): obbbPatternType;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the pattern type selected.*/
      setPatternType (patternType: obbbPatternType): void;
   }
   /**Holds information for player movement events*/
   export class obepPlayerMoveEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, from: obLocation, to: obLocation);
      /**Gets the location this player moved from*/
      getFrom (): obLocation;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location this player moved to*/
      getTo (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the location to mark as where the player moved from*/
      setFrom (from: obLocation): void;
      /**Sets the location that this player will move to*/
      setTo (to: obLocation): void;
   }
   /**PlayerNamePrompt is the base class for any prompt that requires the player  to enter another player's name.*/
   export class obcPlayerNamePrompt extends obcValidatingPrompt {
      constructor (plugin: obpPlugin);
      /**Override this method to accept and processes the validated input from  the user.*/
      acceptValidatedInput (context: obcConversationContext, input: string): obcPrompt;
      /**Override this method to perform some action with the user's player name  response.*/
      acceptValidatedInput (context: obcConversationContext, input: obePlayer): obcPrompt;
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
   }
   /**Fired when the server is calculating what chunks to try to spawn monsters in every Monster Spawn Tick event*/
   export class cdpeePlayerNaturallySpawnCreaturesEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, radius: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getSpawnRadius (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      setSpawnRadius (radius: number): void;
   }
   /**Thrown when a player picks up an arrow from the ground.*/
   export class obepPlayerPickupArrowEvent extends obepPlayerPickupItemEvent {
      constructor (player: obePlayer, item: obeItem, arrow: obeAbstractArrow);
      /**Get the arrow being picked up by the player*/
      getArrow (): obeAbstractArrow;
   }
   /**Fired when a player is attempting to pick up an experience orb*/
   export class cdpepPlayerPickupExperienceEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, experienceOrb: obeExperienceOrb);
      getExperienceOrb (): obeExperienceOrb;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**If true, Cancels picking up the experience orb, leaving it in the world*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player is about to teleport because it is in contact with a  portal.    For other entities see EntityPortalEvent*/
   export class obepPlayerPortalEvent extends obepPlayerTeleportEvent {
      constructor (player: obePlayer, from: obLocation, to: obLocation);
      constructor (player: obePlayer, from: obLocation, to: obLocation, cause: obepPTeleportCause);
      constructor (
         player: obePlayer,
         from: obLocation,
         to: obLocation,
         cause: obepPTeleportCause,
         getSearchRadius: number,
         canCreatePortal: boolean,
         creationRadius: number
      );
      /**Returns whether the server will attempt to create a destination portal or  not.*/
      getCanCreatePortal (): boolean;
      /**Gets the maximum radius the world is searched for a free space from the  given location.*/
      getCreationRadius (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the search radius value for finding an available portal.*/
      getSearchRadius (): number;
      /**Sets whether the server should attempt to create a destination portal or  not.*/
      setCanCreatePortal (canCreatePortal: boolean): void;
      /**Sets the maximum radius the world is searched for a free space from the  given location.*/
      setCreationRadius (creationRadius: number): void;
      /**Set the Block radius to search in for available portals.*/
      setSearchRadius (searchRadius: number): void;
   }
   /**Fired after a player has respawned*/
   export class cdpepPlayerPostRespawnEvent extends obepPlayerEvent {
      constructor (respawnPlayer: obePlayer, respawnedLocation: obLocation, isBedSpawn: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the location of the respawned player*/
      getRespawnedLocation (): obLocation;
      /**Checks if the player respawned to their bed*/
      isBedSpawn (): boolean;
   }
   /**Basic kick reasons for communicating to plugins*/
   export class obepPResult extends jlEnum<obepPResult> {
      /**The player is allowed to log in*/
      static ALLOWED: obepPResult;
      /**The player is not allowed to log in, due to them being banned*/
      static KICK_BANNED: obepPResult;
      /**The player is not allowed to log in, due to the server being full*/
      static KICK_FULL: obepPResult;
      /**The player is not allowed to log in, for reasons undefined*/
      static KICK_OTHER: obepPResult;
      /**The player is not allowed to log in, due to them not being on the  white list*/
      static KICK_WHITELIST: obepPResult;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPResult;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPResult[];
   }
   /**Represents a players profile for the game, such as UUID, Name, and textures.*/
   export interface cdppPlayerProfile {
      /**Clears all properties on this profile*/
      clearProperties(): void;
      /**If this profile is not complete, then make the API call to complete it.*/
      complete(): boolean;
      /**If this profile is not complete, then make the API call to complete it.*/
      complete(textures: boolean): boolean;
      /**If this profile is not complete, then make the API call to complete it.*/
      complete(textures: boolean, onlineMode: boolean): boolean;
      /**Like complete(boolean) but will try only from cache, and not make network calls  Does not account for textures.*/
      completeFromCache(): boolean;
      /**Like complete(boolean) but will try only from cache, and not make network calls  Does not account for textures.*/
      completeFromCache(onlineMode: boolean): boolean;
      /**Like complete(boolean) but will try only from cache, and not make network calls  Does not account for textures.*/
      completeFromCache(lookupUUID: boolean, onlineMode: boolean): boolean;
      getId(): juUUID;
      getName(): string;
      getProperties(): juSet<cdppProfileProperty>;
      /**Check if the Profile has the specified property*/
      hasProperty(property: string): boolean;
      /**Whether or not this Profile has textures associated to it*/
      hasTextures(): boolean;
      isComplete(): boolean;
      /**Removes all properties in the collection*/
      removeProperties(properties: juCollection<cdppProfileProperty>): boolean;
      /**Removes a specific property from this profile*/
      removeProperty(property: cdppProfileProperty): boolean;
      /**Removes a specific property from this profile*/
      removeProperty(property: string): boolean;
      /**Sets this profiles UUID*/
      setId(uuid: juUUID): juUUID;
      /**Sets this profiles Name*/
      setName(name: string): string;
      /**Sets multiple properties.*/
      setProperties(properties: juCollection<cdppProfileProperty>): void;
      /**Sets a property.*/
      setProperty(property: cdppProfileProperty): void;
   }
   /**Called when a player leaves a server*/
   export class obepPlayerQuitEvent extends obepPlayerEvent {
      constructor (who: obePlayer, quitMessage: string);
      constructor (who: obePlayer, quitMessage: string, quitReason: obepPQuitReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the quit message to send to all online players*/
      getQuitMessage (): string;
      getReason (): obepPQuitReason;
      /**Sets the quit message to send to all online players*/
      setQuitMessage (quitMessage: string): void;
   }
   export class obepPQuitReason extends jlEnum<obepPQuitReason> {
      /**The player left on their own behalf.*/
      static DISCONNECTED: obepPQuitReason;
      /**The player's connection has entered an erroneous state.*/
      static ERRONEOUS_STATE: obepPQuitReason;
      /**The player was kicked from the server.*/
      static KICKED: obepPQuitReason;
      /**The player has timed out.*/
      static TIMED_OUT: obepPQuitReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPQuitReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPQuitReason[];
   }
   /**Called when a player is firing a bow and the server is choosing an arrow to use.*/
   export class cdpepPlayerReadyArrowEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, bow: obiItemStack, arrow: obiItemStack);
      getArrow (): obiItemStack;
      getBow (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Whether or not use of this arrow is cancelled.*/
      isCancelled (): boolean;
      /**Cancel use of this arrow.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player clicks a recipe in the recipe book*/
   export class cdpepPlayerRecipeBookClickEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, recipe: obNamespacedKey, makeAll: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the namespaced key of the recipe that was clicked by the player*/
      getRecipe (): obNamespacedKey;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets a boolean which indicates whether or not the player requested to make the maximum amount of results.*/
      isMakeAll (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether or not the maximum amount of results should be made.*/
      setMakeAll (makeAll: boolean): void;
      /**Changes what recipe is requested.*/
      setRecipe (recipe: obNamespacedKey): void;
   }
   /**Called when a player discovers a new recipe in the recipe book.*/
   export class obepPlayerRecipeDiscoverEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, recipe: obNamespacedKey);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the namespaced key of the discovered recipe.*/
      getRecipe (): obNamespacedKey;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**This is called immediately after a player registers for a plugin channel.*/
   export class obepPlayerRegisterChannelEvent extends obepPlayerChannelEvent {
      constructor (player: obePlayer, channel: string);
   }
   /**Called when a player takes action on a resource pack request sent via  Player.setResourcePack(java.lang.String).*/
   export class obepPlayerResourcePackStatusEvent extends obepPlayerEvent {
      constructor (who: obePlayer, resourcePackStatus: obepPStatus);
      constructor (who: obePlayer, resourcePackStatus: obepPStatus, hash: string);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the status of this pack.*/
      getStatus (): obepPStatus;
   }
   /**Status of the resource pack.*/
   export class obepPStatus extends jlEnum<obepPStatus> {
      /**The client accepted the pack and is beginning a download of it.*/
      static ACCEPTED: obepPStatus;
      /**The client refused to accept the resource pack.*/
      static DECLINED: obepPStatus;
      /**The client accepted the pack, but download failed.*/
      static FAILED_DOWNLOAD: obepPStatus;
      /**The resource pack has been successfully downloaded and applied to the  client.*/
      static SUCCESSFULLY_LOADED: obepPStatus;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPStatus;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPStatus[];
   }
   /**Called when a player respawns.*/
   export class obepPlayerRespawnEvent extends obepPlayerEvent {
      constructor (respawnPlayer: obePlayer, respawnLocation: obLocation, isBedSpawn: boolean);
      constructor (respawnPlayer: obePlayer, respawnLocation: obLocation, isBedSpawn: boolean, isAnchorSpawn: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the current respawn location*/
      getRespawnLocation (): obLocation;
      /**Gets whether the respawn location is the player's respawn anchor.*/
      isAnchorSpawn (): boolean;
      /**Gets whether the respawn location is the player's bed.*/
      isBedSpawn (): boolean;
      /**Sets the new respawn location*/
      setRespawnLocation (respawnLocation: obLocation): void;
   }
   /**This event is fired when the player activates the riptide enchantment, using  their trident to propel them through the air.    N.B. the riptide action is currently performed client side, so manipulating  the player in this event may have undesired effects.*/
   export class obepPlayerRiptideEvent extends obepPlayerEvent {
      constructor (who: obePlayer, item: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item containing the used enchantment.*/
      getItem (): obiItemStack;
   }
   /**Called when a player uses sheers on a block.    This event is not called when breaking blocks with shears but instead only when a  player uses the sheer item on a block to garner drops from said block and\/or change its state.    Examples include shearing a pumpkin to turn it into a carved pumpkin or shearing a beehive to get honeycomb.*/
   export class ippebPlayerShearBlockEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         who: obePlayer,
         block: obbBlock,
         item: obiItemStack,
         hand: obiEquipmentSlot,
         drops: juList<obiItemStack>
      );
      /**Gets the block being sheared in this event.*/
      getBlock (): obbBlock;
      /**Gets the resulting drops of this event.*/
      getDrops (): juList<obiItemStack>;
      /**Gets the hand used to shear the block.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item used to shear the block.*/
      getItem (): obiItemStack;
      /**Gets whether the shearing of the block should be cancelled or not.*/
      isCancelled (): boolean;
      /**Sets whether the shearing of the block should be cancelled or not.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player shears an entity*/
   export class obepPlayerShearEntityEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, what: obeEntity);
      constructor (who: obePlayer, what: obeEntity, item: obiItemStack, hand: obiEquipmentSlot);
      /**Gets the entity the player is shearing*/
      getEntity (): obeEntity;
      /**Gets the hand used to shear the entity.*/
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item used to shear the entity.*/
      getItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when player is about to spawn in a world after joining the server.*/
   export class osepPlayerSpawnLocationEvent extends obepPlayerEvent {
      constructor (who: obePlayer, spawnLocation: obLocation);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets player's spawn location.*/
      getSpawnLocation (): obLocation;
      /**Sets player's spawn location.*/
      setSpawnLocation (location: obLocation): void;
   }
   /**Triggered when a player starts spectating an entity in spectator mode.*/
   export class cdpepPlayerStartSpectatingEntityEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, currentSpectatorTarget: obeEntity, newSpectatorTarget: obeEntity);
      /**Gets the entity that the player is currently spectating or themselves if they weren't spectating anything*/
      getCurrentSpectatorTarget (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new entity that the player will now be spectating*/
      getNewSpectatorTarget (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player statistic is incremented.    This event is not called for some high frequency statistics, e.g. movement  based statistics.*/
   export class obepPlayerStatisticIncrementEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, statistic: obStatistic, initialValue: number, newValue: number);
      constructor (
         player: obePlayer,
         statistic: obStatistic,
         initialValue: number,
         newValue: number,
         entityType: obeEntityType
      );
      constructor (
         player: obePlayer,
         statistic: obStatistic,
         initialValue: number,
         newValue: number,
         material: obMaterial
      );
      /**Gets the EntityType if getStatistic() is an  entity statistic otherwise returns null.*/
      getEntityType (): obeEntityType;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Material if getStatistic() is a block  or item statistic otherwise returns null.*/
      getMaterial (): obMaterial;
      /**Gets the new value of the statistic.*/
      getNewValue (): number;
      /**Gets the previous value of the statistic.*/
      getPreviousValue (): number;
      /**Gets the statistic that is being incremented.*/
      getStatistic (): obStatistic;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Triggered when a player stops spectating an entity in spectator mode.*/
   export class cdpepPlayerStopSpectatingEntityEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, spectatorTarget: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the entity that the player is spectating*/
      getSpectatorTarget (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player swap items between main hand and off hand using the  hotkey.*/
   export class obepPlayerSwapHandItemsEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, mainHandItem: obiItemStack, offHandItem: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item switched to the main hand.*/
      getMainHandItem (): obiItemStack;
      /**Gets the item switched to the off hand.*/
      getOffHandItem (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the item in the main hand.*/
      setMainHandItem (mainHandItem: obiItemStack): void;
      /**Sets the item in the off hand.*/
      setOffHandItem (offHandItem: obiItemStack): void;
   }
   /**This event is called when a player clicks the button to take a book of a  Lectern. If this event is cancelled the book remains on the lectern.*/
   export class obepPlayerTakeLecternBookEvent extends obepPlayerEvent implements obeCancellable {
      constructor (who: obePlayer, lectern: obbLectern);
      /**Gets the current ItemStack on the lectern.*/
      getBook (): obiItemStack;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the lectern involved.*/
      getLectern (): obbLectern;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Fired when a teleport is triggered for an End Gateway*/
   export class cdpepPlayerTeleportEndGatewayEvent extends obepPlayerTeleportEvent {
      constructor (player: obePlayer, from: obLocation, to: obLocation, gateway: obbEndGateway);
      /**The gateway triggering the teleport*/
      getGateway (): obbEndGateway;
   }
   /**Holds information for player teleport events*/
   export class obepPlayerTeleportEvent extends obepPlayerMoveEvent {
      constructor (player: obePlayer, from: obLocation, to: obLocation);
      constructor (player: obePlayer, from: obLocation, to: obLocation, cause: obepPTeleportCause);
      /**Gets the cause of this teleportation event*/
      getCause (): obepPTeleportCause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   export class obepPTeleportCause extends jlEnum<obepPTeleportCause> {
      /**Indicates the teleportation was caused by a player consuming chorus  fruit*/
      static CHORUS_FRUIT: obepPTeleportCause;
      /**Indicates the teleportation was caused by a player executing a  command*/
      static COMMAND: obepPTeleportCause;
      /**Indicates the teleportation was caused by a player entering an End  gateway*/
      static END_GATEWAY: obepPTeleportCause;
      /**Indicates the teleportation was caused by a player entering an End  portal*/
      static END_PORTAL: obepPTeleportCause;
      /**Indicates the teleporation was caused by a player throwing an Ender  Pearl*/
      static ENDER_PEARL: obepPTeleportCause;
      /**Indicates the teleportation was caused by a player entering a  Nether portal*/
      static NETHER_PORTAL: obepPTeleportCause;
      /**Indicates the teleportation was caused by a plugin*/
      static PLUGIN: obepPTeleportCause;
      /**Indicates the teleportation was caused by a player teleporting to a  Entity\/Player via the spectator menu*/
      static SPECTATE: obepPTeleportCause;
      /**Indicates the teleportation was caused by an event not covered by  this enum*/
      static UNKNOWN: obepPTeleportCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obepPTeleportCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obepPTeleportCause[];
   }
   /**Called when a player toggles their flying state*/
   export class obepPlayerToggleFlightEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, isFlying: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Returns whether the player is trying to start or stop flying.*/
      isFlying (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player toggles their sneaking state*/
   export class obepPlayerToggleSneakEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, isSneaking: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Returns whether the player is now sneaking or not.*/
      isSneaking (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player toggles their sprinting state*/
   export class obepPlayerToggleSprintEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, isSprinting: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Gets whether the player is now sprinting or not.*/
      isSprinting (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a player trades with a villager or wandering trader*/
   export class ippepPlayerTradeEvent extends obepPlayerEvent implements obeCancellable {
      constructor (
         player: obePlayer,
         villager: obeAbstractVillager,
         trade: obiMerchantRecipe,
         rewardExp: boolean,
         increaseTradeUses: boolean
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the associated trade with this event*/
      getTrade (): obiMerchantRecipe;
      /**Gets the Villager or Wandering trader associated with this event*/
      getVillager (): obeAbstractVillager;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isRewardingExp (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether or not the trade will count as a use*/
      setIncreaseTradeUses (increaseTradeUses: boolean): void;
      /**Sets whether the trade will try to reward exp*/
      setRewardExp (rewardExp: boolean): void;
      /**Sets the trade.*/
      setTrade (trade: obiMerchantRecipe): void;
      willIncreaseTradeUses (): boolean;
   }
   /**Called prior to an entity being unleashed due to a player's action.*/
   export class obepPlayerUnleashEntityEvent extends obeeEntityUnleashEvent implements obeCancellable {
      constructor (entity: obeEntity, player: obePlayer);
      /**Returns the player who is unleashing the entity.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**This is called immediately after a player unregisters for a plugin channel.*/
   export class obepPlayerUnregisterChannelEvent extends obepPlayerChannelEvent {
      constructor (player: obePlayer, channel: string);
   }
   export class cdpepPlayerUseUnknownEntityEvent extends obepPlayerEvent {
      constructor (who: obePlayer, entityId: number, attack: boolean, hand: obiEquipmentSlot);
      getEntityId (): number;
      getHand (): obiEquipmentSlot;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      isAttack (): boolean;
   }
   /**Called when the velocity of a player changes.*/
   export class obepPlayerVelocityEvent extends obepPlayerEvent implements obeCancellable {
      constructor (player: obePlayer, velocity: obuVector);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the velocity vector that will be sent to the player*/
      getVelocity (): obuVector;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the velocity vector that will be sent to the player*/
      setVelocity (velocity: obuVector): void;
   }
   /**Represents a Plugin    The use of PluginBase is recommended for actual Implementation*/
   export interface obpPlugin extends obcTabExecutor {
      /**Gets a FileConfiguration for this plugin, read through  "config.yml"*/
      getConfig(): obcfFileConfiguration;
      /**Returns the folder that the plugin data's files are located in.*/
      getDataFolder(): jiFile;
      /**Gets a ChunkGenerator for use in a default world, as specified  in the server configuration*/
      getDefaultWorldGenerator(worldName: string, id: string): obgChunkGenerator;
      /**Returns the plugin.yaml file containing the details for this plugin*/
      getDescription(): obpPluginDescriptionFile;
      /**Returns the plugin logger associated with this server's logger.*/
      getLogger(): julLogger;
      /**Returns the name of the plugin.*/
      getName(): string;
      /**Gets the associated PluginLoader responsible for this plugin*/
      getPluginLoader(): obpPluginLoader;
      /**Gets an embedded resource in this plugin*/
      getResource(filename: string): jiInputStream;
      /**Returns the Server instance currently running this plugin*/
      getServer(): obServer;
      getSLF4JLogger(): osLogger;
      /**Returns a value indicating whether or not this plugin is currently  enabled*/
      isEnabled(): boolean;
      /**Simple boolean if we can still nag to the logs about things*/
      isNaggable(): boolean;
      /**Called when this plugin is disabled*/
      onDisable(): void;
      /**Called when this plugin is enabled*/
      onEnable(): void;
      /**Called after a plugin is loaded but before it has been enabled.*/
      onLoad(): void;
      /**Discards any data in getConfig() and reloads from disk.*/
      reloadConfig(): void;
      /**Saves the FileConfiguration retrievable by getConfig().*/
      saveConfig(): void;
      /**Saves the raw contents of the default config.yml file to the location  retrievable by getConfig().*/
      saveDefaultConfig(): void;
      /**Saves the raw contents of any resource embedded with a plugin's .jar  file assuming it can be found using getResource(String).*/
      saveResource(resourcePath: string, replace: boolean): void;
      /**Set naggable state*/
      setNaggable(canNag: boolean): void;
   }
   /**Represents a concept that a plugin is aware of.    The internal representation may be singleton, or be a parameterized  instance, but must be immutable.*/
   export interface obpPluginAwareness {}
   /**Each entry here represents a particular plugin's awareness. These can  be checked by using PluginDescriptionFile.getAwareness().contains(flag).*/
   export class obpPFlags extends jlEnum<obpPFlags> implements obpPluginAwareness {
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpPFlags;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpPFlags[];
   }
   /**Represents a base Plugin    Extend this class if your plugin is not a JavaPlugin*/
   export class obpPluginBase extends jlObject implements obpPlugin {
      constructor ();
      equals (obj: jlObject): boolean;
      /**Returns the name of the plugin.*/
      getName (): string;
      hashCode (): number;
   }
   /**Represents the different directions a plugin channel may go.*/
   export class obpmPluginChannelDirection extends jlEnum<obpmPluginChannelDirection> {
      /**The plugin channel is being sent to the server from a client.*/
      static INCOMING: obpmPluginChannelDirection;
      /**The plugin channel is being sent to a client from the server.*/
      static OUTGOING: obpmPluginChannelDirection;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpmPluginChannelDirection;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpmPluginChannelDirection[];
   }
   /**A ClassLoader for plugins, to allow shared classes across multiple plugins*/
   export class obpjPluginClassLoader extends jnURLClassLoader {
      close (): void;
      findClass (name: string): jlClass<any>;
      getPlugin (): obpjJavaPlugin;
      getResource (name: string): jnURL;
      getResources (name: string): juEnumeration<jnURL>;
      toString (): string;
   }
   /**Represents a Command belonging to a plugin*/
   export class obcPluginCommand extends obcCommand implements obcPluginIdentifiableCommand {
      constructor (name: string, owner: obpPlugin);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, commandLabel: string, args: string[]): boolean;
      /**Gets the CommandExecutor associated with this command*/
      getExecutor (): obcCommandExecutor;
      /**Gets the owner of this PluginCommand*/
      getPlugin (): obpPlugin;
      /**Gets the TabCompleter associated with this command.*/
      getTabCompleter (): obcTabCompleter;
      /**Sets the CommandExecutor to run when parsing this command*/
      setExecutor (executor: obcCommandExecutor): void;
      /**Sets the TabCompleter to run when tab-completing this command.*/
      setTabCompleter (completer: obcTabCompleter): void;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
      toString (): string;
   }
   export class obcPluginCommandYamlParser extends jlObject {
      constructor ();
      static parse (plugin: obpPlugin): juList<obcCommand>;
   }
   /**This type is the runtime-container for the information in the plugin.yml.  All plugins must have a respective plugin.yml. For plugins written in java  using the standard plugin loader, this file must be in the root of the jar  file.    When Bukkit loads a plugin, it needs to know some basic information about  it. It reads this information from a YAML file, 'plugin.yml'. This file  consists of a set of attributes, each defined on a new line and with no  indentation.    Every (almost* every) method corresponds with a specific entry in the  plugin.yml. These are the required entries for every plugin.yml:    getName() - name  getVersion() - version  getMain() - main      Failing to include any of these items will throw an exception and cause the  server to ignore your plugin.    This is a list of the possible yaml keys, with specific details included in  the respective method documentations:    The description of the plugin.yml layout        Node      Method      Summary        name      getName()      The unique name of plugin        provides      getProvides()      The plugin APIs which this plugin provides        version      getVersion()      A plugin revision identifier        main      getMain()      The plugin's initial class file        authorauthors      getAuthors()      The plugin authors        contributors      getContributors()      The plugin contributors        description      getDescription()      Human readable plugin summary        website      getWebsite()      The URL to the plugin's site        prefix      getPrefix()      The token to prefix plugin log entries        load      getLoad()      The phase of server-startup this plugin will load during        depend      getDepend()      Other required plugins        softdepend      getSoftDepend()      Other plugins that add functionality        loadbefore      getLoadBefore()      The inverse softdepend        commands      getCommands()      The commands the plugin will register        permissions      getPermissions()      The permissions the plugin will register        default-permission      getPermissionDefault()      The default default permission          state for defined permissions the plugin          will register        awareness      getAwareness()      The concepts that the plugin acknowledges        api-version      getAPIVersion()      The API version which this plugin was programmed against        A plugin.yml example:name: Inferno provides: [Hell] version: 1.4.1 description: This plugin is so 31337. You can set yourself on fire. # We could place every author in the authors list, but chose not to for illustrative purposes # Also, having an author distinguishes that person as the project lead, and ensures their # name is displayed first author: CaptainInflamo authors: [Cogito, verrier, EvilSeph] contributors: [Choco, md_5] website: http:\/\/www.curse.com\/server-mods\/minecraft\/myplugin  main: com.captaininflamo.bukkit.inferno.Inferno depend: [NewFire, FlameWire] api-version: 1.13  commands:   flagrate:     description: Set yourself on fire.     aliases: [combust_me, combustMe]     permission: inferno.flagrate     usage: Syntax error! Simply type \/<command> to ignite yourself.   burningdeaths:     description: List how many times you have died by fire.     aliases: [burning_deaths, burningDeaths]     permission: inferno.burningdeaths     usage: |       \/<command> [player]       Example: \/<command> - see how many times you have burned to death       Example: \/<command> CaptainIce - see how many times CaptainIce has burned to death  permissions:   inferno.*:     description: Gives access to all Inferno commands     children:       inferno.flagrate: true       inferno.burningdeaths: true       inferno.burningdeaths.others: true   inferno.flagrate:     description: Allows you to ignite yourself     default: true   inferno.burningdeaths:     description: Allows you to see how many times you have burned to death     default: true   inferno.burningdeaths.others:     description: Allows you to see how many times others have burned to death     default: op     children:       inferno.burningdeaths: true*/
   export class obpPluginDescriptionFile extends jlObject {
      constructor (stream: jiInputStream);
      constructor (reader: jiReader);
      constructor (pluginName: string, pluginVersion: string, mainClass: string);
      /**Gives the API version which this plugin is designed to support.*/
      getAPIVersion (): string;
      /**Gives the list of authors for the plugin.*/
      getAuthors (): juList<string>;
      /**Gives a set of every PluginAwareness for a plugin.*/
      getAwareness (): juSet<obpPluginAwareness>;
      /**Gives the map of command-name to command-properties.*/
      getCommands (): juMap<string, juMap<string, jlObject>>;
      /**Gives the list of contributors for the plugin.*/
      getContributors (): juList<string>;
      /**Gives a list of other plugins that the plugin requires.*/
      getDepend (): juList<string>;
      /**Gives a human-friendly description of the functionality the plugin  provides.*/
      getDescription (): string;
      /**Returns the name of a plugin, including the version.*/
      getFullName (): string;
      /**Gives the phase of server startup that the plugin should be loaded.*/
      getLoad (): obpPluginLoadOrder;
      /**Gets the list of plugins that should consider this plugin a  soft-dependency.*/
      getLoadBefore (): juList<string>;
      /**Gives the fully qualified name of the main class for a plugin.*/
      getMain (): string;
      /**Gives the name of the plugin.*/
      getName (): string;
      /**Gives the default default state of  permissions registered for the plugin.*/
      getPermissionDefault (): obpPermissionDefault;
      /**Gives the list of permissions the plugin will register at runtime,  immediately proceding enabling.*/
      getPermissions (): juList<obpPermission>;
      /**Gives the token to prefix plugin-specific logging messages with.*/
      getPrefix (): string;
      /**Gives the list of other plugin APIs which this plugin provides.*/
      getProvides (): juList<string>;
      /**Gives a list of other plugins that the plugin requires for full  functionality.*/
      getSoftDepend (): juList<string>;
      /**Gives the version of the plugin.*/
      getVersion (): string;
      /**Gives the plugin's or plugin's author's website.*/
      getWebsite (): string;
      /**Saves this PluginDescriptionFile to the given writer*/
      save (writer: jiWriter): void;
   }
   /**Called when a plugin is disabled.*/
   export class obesPluginDisableEvent extends obesPluginEvent {
      constructor (plugin: obpPlugin);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a plugin is enabled.*/
   export class obesPluginEnableEvent extends obesPluginEvent {
      constructor (plugin: obpPlugin);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Used for plugin enable and disable events*/
   export class obesPluginEvent extends obesServerEvent {
      constructor (plugin: obpPlugin);
      /**Gets the plugin involved in this event*/
      getPlugin (): obpPlugin;
   }
   /**This interface is used by the help system to group commands into  sub-indexes based on the Plugin they are a part of. Custom command  implementations will need to implement this interface to have a sub-index  automatically generated on the plugin's behalf.*/
   export interface obcPluginIdentifiableCommand {
      /**Gets the owner of this PluginIdentifiableCommand.*/
      getPlugin(): obpPlugin;
   }
   /**Represents a plugin loader, which handles direct access to specific types  of plugins*/
   export interface obpPluginLoader {
      /**Creates and returns registered listeners for the event classes used in  this listener*/
      createRegisteredListeners(
         listener: obeListener,
         plugin: obpPlugin
      ): juMap<jlClass<obeEvent>, juSet<obpRegisteredListener>>;
      /**Disables the specified plugin*/
      disablePlugin(plugin: obpPlugin): void;
      /**Disables the specified plugin*/
      disablePlugin(plugin: obpPlugin, closeClassloader: boolean): void;
      /**Enables the specified plugin*/
      enablePlugin(plugin: obpPlugin): void;
      /**Loads a PluginDescriptionFile from the specified file*/
      getPluginDescription(file: jiFile): obpPluginDescriptionFile;
      /**Returns a list of all filename filters expected by this PluginLoader*/
      getPluginFileFilters(): jurPattern[];
      /**Loads the plugin contained in the specified file*/
      loadPlugin(file: jiFile): obpPlugin;
   }
   /**Represents the order in which a plugin should be initialized and enabled*/
   export class obpPluginLoadOrder extends jlEnum<obpPluginLoadOrder> {
      /**Indicates that the plugin will be loaded after the first\/default world  was created*/
      static POSTWORLD: obpPluginLoadOrder;
      /**Indicates that the plugin will be loaded at startup*/
      static STARTUP: obpPluginLoadOrder;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpPluginLoadOrder;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpPluginLoadOrder[];
   }
   /**The PluginLogger class is a modified Logger that prepends all  logging calls with the name of the plugin doing the logging. The API for  PluginLogger is exactly the same as Logger.*/
   export class obpPluginLogger extends julLogger {
      constructor (context: obpPlugin);
      log (logRecord: julLogRecord): void;
   }
   /**Handles all plugin management from the Server*/
   export interface obpPluginManager {
      /**Adds a Permission to this plugin manager.*/
      addPermission(perm: obpPermission): void;
      /**Calls an event with the given details*/
      callEvent(event: obeEvent): void;
      /**Disables and removes all plugins*/
      clearPlugins(): void;
      /**Disables the specified plugin*/
      disablePlugin(plugin: obpPlugin): void;
      /**Disables the specified plugin*/
      disablePlugin(plugin: obpPlugin, closeClassloader: boolean): void;
      /**Disables all the loaded plugins*/
      disablePlugins(): void;
      /**Enables the specified plugin*/
      enablePlugin(plugin: obpPlugin): void;
      /**Gets the default permissions for the given op status*/
      getDefaultPermissions(op: boolean): juSet<obpPermission>;
      /**Gets a set containing all subscribed Permissibles to the given  default list, by op status*/
      getDefaultPermSubscriptions(op: boolean): juSet<obpPermissible>;
      /**Gets a Permission from its fully qualified name*/
      getPermission(name: string): obpPermission;
      /**Gets a set of all registered permissions.*/
      getPermissions(): juSet<obpPermission>;
      /**Gets a set containing all subscribed Permissibles to the given  permission, by name*/
      getPermissionSubscriptions(permission: string): juSet<obpPermissible>;
      /**Checks if the given plugin is loaded and returns it when applicable*/
      getPlugin(name: string): obpPlugin;
      /**Gets a list of all currently loaded plugins*/
      getPlugins(): obpPlugin[];
      /**Checks if the given plugin is enabled or not*/
      isPluginEnabled(name: string): boolean;
      /**Checks if the given plugin is enabled or not*/
      isPluginEnabled(plugin: obpPlugin): boolean;
      /**Loads the plugin in the specified file*/
      loadPlugin(file: jiFile): obpPlugin;
      /**Loads the plugins contained within the specified directory*/
      loadPlugins(directory: jiFile): obpPlugin[];
      /**Recalculates the defaults for the given Permission.*/
      recalculatePermissionDefaults(perm: obpPermission): void;
      /**Registers the specified executor to the given event class*/
      registerEvent(
         event: jlClass<obeEvent>,
         listener: obeListener,
         priority: obeEventPriority,
         executor: obpEventExecutor,
         plugin: obpPlugin
      ): void;
      /**Registers the specified executor to the given event class*/
      registerEvent(
         event: jlClass<obeEvent>,
         listener: obeListener,
         priority: obeEventPriority,
         executor: obpEventExecutor,
         plugin: obpPlugin,
         ignoreCancelled: boolean
      ): void;
      /**Registers all the events in the given listener class*/
      registerEvents(listener: obeListener, plugin: obpPlugin): void;
      /**Registers the specified plugin loader*/
      registerInterface(loader: jlClass<obpPluginLoader>): void;
      /**Removes a Permission registration from this plugin manager.*/
      removePermission(name: string): void;
      /**Removes a Permission registration from this plugin manager.*/
      removePermission(perm: obpPermission): void;
      /**Subscribes to the given Default permissions by operator status*/
      subscribeToDefaultPerms(op: boolean, permissible: obpPermissible): void;
      /**Subscribes the given Permissible for information about the requested  Permission, by name.*/
      subscribeToPermission(permission: string, permissible: obpPermissible): void;
      /**Unsubscribes from the given Default permissions by operator status*/
      unsubscribeFromDefaultPerms(op: boolean, permissible: obpPermissible): void;
      /**Unsubscribes the given Permissible for information about the requested  Permission, by name.*/
      unsubscribeFromPermission(permission: string, permissible: obpPermissible): void;
      /**Returns whether or not timing code should be used for event calls*/
      useTimings(): boolean;
   }
   /**A listener for a specific Plugin Channel, which will receive notifications  of messages sent from a client.*/
   export interface obpmPluginMessageListener {
      /**A method that will be thrown when a PluginMessageSource sends a plugin  message on a registered channel.*/
      onPluginMessageReceived(channel: string, player: obePlayer, message: number[]): void;
   }
   /**Contains information about a Plugins registration to a plugin  channel.*/
   export class obpmPluginMessageListenerRegistration extends jlObject {
      constructor (messenger: obpmMessenger, plugin: obpPlugin, channel: string, listener: obpmPluginMessageListener);
      equals (obj: jlObject): boolean;
      /**Gets the plugin channel that this registration is about.*/
      getChannel (): string;
      /**Gets the registered listener described by this registration.*/
      getListener (): obpmPluginMessageListener;
      /**Gets the plugin that this registration is for.*/
      getPlugin (): obpPlugin;
      hashCode (): number;
      /**Checks if this registration is still valid.*/
      isValid (): boolean;
   }
   /**Represents a possible recipient for a Plugin Message.*/
   export interface obpmPluginMessageRecipient {
      /**Gets a set containing all the Plugin Channels that this client is  listening on.*/
      getListeningPluginChannels(): juSet<string>;
      /**Sends this recipient a Plugin Message on the specified outgoing  channel.*/
      sendPluginMessage(source: obpPlugin, channel: string, message: number[]): void;
   }
   /**PluginNameConversationPrefix is a ConversationPrefix implementation  that displays the plugin name in front of conversation output.*/
   export class obcPluginNameConversationPrefix extends jlObject implements obcConversationPrefix {
      constructor (plugin: obpPlugin);
      constructor (plugin: obpPlugin, separator: string, prefixColor: obChatColor);
      /**Prepends each conversation message with the plugin name.*/
      getPrefix (context: obcConversationContext): string;
   }
   export class obcdPluginsCommand extends obcdBukkitCommand {
      constructor (name: string);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, currentAlias: string, args: string[]): boolean;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
   }
   /**Represents a polar bear.*/
   export interface obePolarBear extends obeAnimals {}
   /**Called when a portal is created*/
   export class obewPortalCreateEvent extends obewWorldEvent implements obeCancellable {
      constructor (blocks: juList<obbBlockState>, world: obWorld, entity: obeEntity, reason: obewPCreateReason);
      constructor (blocks: juList<obbBlockState>, world: obWorld, reason: obewPCreateReason);
      /**Gets an array list of all the blocks associated with the created portal*/
      getBlocks (): juList<obbBlockState>;
      /**Returns the Entity that triggered this portal creation (if available)*/
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the reason for the portal's creation*/
      getReason (): obewPCreateReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An enum to specify the various reasons for a portal's creation*/
   export class obewPCreateReason extends jlEnum<obewPCreateReason> {
      /**When the target end platform is created as a result of a player  entering an end portal.*/
      static END_PLATFORM: obewPCreateReason;
      /**When the blocks inside a portal are created due to a portal frame  being set on fire.*/
      static FIRE: obewPCreateReason;
      /**When a nether portal frame and portal is created at the exit of an  entered nether portal.*/
      static NETHER_PAIR: obewPCreateReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obewPCreateReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obewPCreateReason[];
   }
   /**Represents various types of portals that can be made in a world.*/
   export class obPortalType extends jlEnum<obPortalType> {
      /**This is a custom Plugin portal.*/
      static CUSTOM: obPortalType;
      /**This is an Ender portal.*/
      static ENDER: obPortalType;
      /**This is a Nether portal, made of obsidian.*/
      static NETHER: obPortalType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obPortalType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obPortalType[];
   }
   /**Represents an entity body pose.*/
   export class obePose extends jlEnum<obePose> {
      /**Entity is dead.*/
      static DYING: obePose;
      /**Entity is gliding.*/
      static FALL_FLYING: obePose;
      /**Entity is sleeping.*/
      static SLEEPING: obePose;
      /**Entity is sneaking.*/
      static SNEAKING: obePose;
      /**Entity is riptiding with a trident.*/
      static SPIN_ATTACK: obePose;
      /**Entity is standing normally.*/
      static STANDING: obePose;
      /**Entity is swimming.*/
      static SWIMMING: obePose;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obePose;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obePose[];
   }
   /**Represents a brewer that can create PotionEffects.*/
   export interface obpPotionBrewer {
      /**Creates a PotionEffect from the given PotionEffectType,  applying duration modifiers and checks.*/
      createEffect(potion: obpPotionEffectType, duration: number, amplifier: number): obpPotionEffect;
      /**Returns a collection of PotionEffect that would be applied from  a potion with the given type.*/
      getEffects(type: obpPotionType, upgraded: boolean, extended: boolean): juCollection<obpPotionEffect>;
   }
   export class obpPotionData extends jlObject {
      constructor (type: obpPotionType);
      constructor (type: obpPotionType, extended: boolean, upgraded: boolean);
      equals (obj: jlObject): boolean;
      /**Gets the type of the potion, Type matches up with each kind of craftable  potion*/
      getType (): obpPotionType;
      hashCode (): number;
      /**Checks if the potion is in an extended state.*/
      isExtended (): boolean;
      /**Checks if the potion is in an upgraded state.*/
      isUpgraded (): boolean;
   }
   /**Represents a potion effect, that can be added to a LivingEntity. A  potion effect has a duration that it will last for, an amplifier that will  enhance its effects, and a PotionEffectType, that represents its  effect on an entity.*/
   export class obpPotionEffect extends jlObject implements obcsConfigurationSerializable {
      constructor (map: juMap<string, jlObject>);
      constructor (type: obpPotionEffectType, duration: number, amplifier: number);
      constructor (type: obpPotionEffectType, duration: number, amplifier: number, ambient: boolean);
      constructor (type: obpPotionEffectType, duration: number, amplifier: number, ambient: boolean, particles: boolean);
      constructor (
         type: obpPotionEffectType,
         duration: number,
         amplifier: number,
         ambient: boolean,
         particles: boolean,
         icon: boolean
      );
      /**Attempts to add the effect represented by this object to the given  LivingEntity.*/
      apply (entity: obeLivingEntity): boolean;
      equals (obj: jlObject): boolean;
      /**Returns the amplifier of this effect.*/
      getAmplifier (): number;
      /**Returns the duration (in ticks) that this effect will run for when  applied to a LivingEntity.*/
      getDuration (): number;
      /**Returns the PotionEffectType of this effect.*/
      getType (): obpPotionEffectType;
      hashCode (): number;
      hasIcon (): boolean;
      hasParticles (): boolean;
      /**Makes potion effect produce more, translucent, particles.*/
      isAmbient (): boolean;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      toString (): string;
      withAmbient (ambient: boolean): obpPotionEffect;
      withAmplifier (amplifier: number): obpPotionEffect;
      withDuration (duration: number): obpPotionEffect;
      withIcon (icon: boolean): obpPotionEffect;
      withParticles (particles: boolean): obpPotionEffect;
      withType (type: obpPotionEffectType): obpPotionEffect;
   }
   /**Represents a type of potion and its effect on an entity.*/
   export class obpPotionEffectType extends jlObject {
      constructor (id: number);
      /**Creates a PotionEffect from this PotionEffectType, applying duration  modifiers and checks.*/
      createEffect (duration: number, amplifier: number): obpPotionEffect;
      equals (obj: jlObject): boolean;
      /**Gets the effect type specified by the given name.*/
      static getByName (name: string): obpPotionEffectType;
      /**Returns the color of this effect type.*/
      getColor (): obColor;
      /**Returns the name of this effect type.*/
      getName (): string;
      hashCode (): number;
      /**Returns whether the effect of this type happens once, immediately.*/
      isInstant (): boolean;
      /**Registers an effect type with the given object.*/
      static registerPotionEffectType (type: obpPotionEffectType): void;
      /**Stops accepting any effect type registrations.*/
      static stopAcceptingRegistrations (): void;
      toString (): string;
      /**Returns an array of all the registered PotionEffectTypes.*/
      static values (): obpPotionEffectType[];
   }
   export class obpPotionEffectTypeWrapper extends obpPotionEffectType {
      constructor (id: number);
      /**Returns the color of this effect type.*/
      getColor (): obColor;
      /**Returns the duration modifier applied to effects of this type.*/
      getDurationModifier (): number;
      /**Returns the name of this effect type.*/
      getName (): string;
      /**Get the potion type bound to this wrapper.*/
      getType (): obpPotionEffectType;
      /**Returns whether the effect of this type happens once, immediately.*/
      isInstant (): boolean;
   }
   /**Represents a potion or item that can have custom effects.*/
   export interface obimPotionMeta extends obimItemMeta {
      /**Adds a custom potion effect to this potion.*/
      addCustomEffect(effect: obpPotionEffect, overwrite: boolean): boolean;
      /**Removes all custom potion effects from this potion.*/
      clearCustomEffects(): boolean;
      clone(): obimPotionMeta;
      /**Returns the potion data about the base potion*/
      getBasePotionData(): obpPotionData;
      /**Gets the potion color that is set.*/
      getColor(): obColor;
      /**Gets an immutable list containing all custom potion effects applied to  this potion.*/
      getCustomEffects(): juList<obpPotionEffect>;
      /**Checks for existence of a potion color.*/
      hasColor(): boolean;
      /**Checks for a specific custom potion effect type on this potion.*/
      hasCustomEffect(type: obpPotionEffectType): boolean;
      /**Checks for the presence of custom potion effects.*/
      hasCustomEffects(): boolean;
      /**Removes a custom potion effect from this potion.*/
      removeCustomEffect(type: obpPotionEffectType): boolean;
      /**Sets the underlying potion data*/
      setBasePotionData(data: obpPotionData): void;
      /**Sets the potion color.*/
      setColor(color: obColor): void;
   }
   /**Called when a splash potion hits an area*/
   export class obeePotionSplashEvent extends obeeProjectileHitEvent implements obeCancellable {
      constructor (potion: obeThrownPotion, affectedEntities: juMap<obeLivingEntity, number>);
      /**Retrieves a list of all effected entities*/
      getAffectedEntities (): juCollection<obeLivingEntity>;
      /**Returns the Entity involved in this event*/
      getEntity (): obeThrownPotion;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the intensity of the potion's effects for given entity; This  depends on the distance to the impact center*/
      getIntensity (entity: obeLivingEntity): number;
      /**Gets the potion which caused this event*/
      getPotion (): obeThrownPotion;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Whether or not to cancel any behavior that would occur from the arrow hitting the block*/
      setCancelled (cancel: boolean): void;
      /**Overwrites the intensity for a given entity*/
      setIntensity (entity: obeLivingEntity, intensity: number): void;
   }
   /**This enum reflects and matches each potion state that can be obtained from  the Creative mode inventory*/
   export class obpPotionType extends jlEnum<obpPotionType> {
      static AWKWARD: obpPotionType;
      static FIRE_RESISTANCE: obpPotionType;
      static INSTANT_DAMAGE: obpPotionType;
      static INSTANT_HEAL: obpPotionType;
      static INVISIBILITY: obpPotionType;
      static JUMP: obpPotionType;
      static LUCK: obpPotionType;
      static MUNDANE: obpPotionType;
      static NIGHT_VISION: obpPotionType;
      static POISON: obpPotionType;
      static REGEN: obpPotionType;
      static SLOW_FALLING: obpPotionType;
      static SLOWNESS: obpPotionType;
      static SPEED: obpPotionType;
      static STRENGTH: obpPotionType;
      static THICK: obpPotionType;
      static TURTLE_MASTER: obpPotionType;
      static UNCRAFTABLE: obpPotionType;
      static WATER: obpPotionType;
      static WATER_BREATHING: obpPotionType;
      static WEAKNESS: obpPotionType;
      getEffectType (): obpPotionEffectType;
      getMaxLevel (): number;
      /**Checks if the potion type has an extended state.*/
      isExtendable (): boolean;
      isInstant (): boolean;
      /**Checks if the potion type has an upgraded state.*/
      isUpgradeable (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpPotionType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpPotionType[];
   }
   /**'powered' indicates whether this block is in the powered state or not, i.e.  receiving a redstone current of power > 0.*/
   export interface obbdPowerable extends obbdBlockData {
      /**Gets the value of the 'powered' property.*/
      isPowered(): boolean;
      /**Sets the value of the 'powered' property.*/
      setPowered(powered: boolean): void;
   }
   /**Represents a powered minecart. A powered minecart moves on its own when a  player deposits fuel.*/
   export interface obemPoweredMinecart extends obeMinecart {
      /**Get the number of ticks until the minecart runs out of fuel.*/
      getFuel(): number;
      /**Set the number of ticks until the minecart runs out of fuel.*/
      setFuel(fuel: number): void;
   }
   /**WARNING: This event only fires for a limited number of cases, and not for every case that CreatureSpawnEvent does.   You should still listen to CreatureSpawnEvent as a backup, and only use this event as an "enhancement".  The intent of this event is to improve server performance, so limited use cases.    Currently: NATURAL and SPAWNER based reasons. Please submit a Pull Request for future additions.  Also, Plugins that replace Entity Registrations with their own custom entities might not fire this event.*/
   export class cdpeePreCreatureSpawnEvent extends obeEvent implements obeCancellable {
      constructor (location: obLocation, type: obeEntityType, reason: obeeCSpawnReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getReason (): obeeCSpawnReason;
      getSpawnLocation (): obLocation;
      getType (): obeEntityType;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Cancelling this event is more effecient than cancelling CreatureSpawnEvent*/
      setCancelled (cancel: boolean): void;
      /**Set this if you are more blanket blocking all types of these spawns, and wish to abort the spawn process from  trying more attempts after this cancellation.*/
      setShouldAbortSpawn (shouldAbortSpawn: boolean): void;
      shouldAbortSpawn (): boolean;
   }
   /**Fired when the server is requesting to fill in properties of an incomplete profile, such as textures.   Allows plugins to pre populate cached properties and avoid a call to the Mojang API*/
   export class cdpepPreFillProfileEvent extends obeEvent {
      constructor (profile: cdppPlayerProfile);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPlayerProfile (): cdppPlayerProfile;
      /**Sets the properties on the profile, avoiding the call to the Mojang API  Same as .getPlayerProfile().setProperties(properties);*/
      setProperties (properties: juCollection<cdppProfileProperty>): void;
   }
   /**Allows a plugin to intercept a Profile Lookup for a Profile by name   At the point of event fire, the UUID and properties are unset.   If a plugin sets the UUID, and optionally the properties, the API call to look up the profile may be skipped.   No guarantees are made about thread execution context for this event. If you need to know, check  event.isAsync()*/
   export class cdpepPreLookupProfileEvent extends obeEvent {
      constructor (name: string);
      /**Adds any properties currently missing to the prepopulated properties set, replacing any that already were set.*/
      addProfileProperties (properties: juSet<cdppProfileProperty>): void;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getName (): string;
      getProfileProperties (): juSet<cdppProfileProperty>;
      /**If this value is left null by the completion of the event call, then the server will  trigger a call to the Mojang API to look up the UUID (Network Request), and subsequently, fire a  LookupProfileEvent*/
      getUUID (): juUUID;
      /**Clears any existing prepopulated properties and uses the supplied properties  Any property in this Set will be automatically prefilled on this Profile*/
      setProfileProperties (properties: juSet<cdppProfileProperty>): void;
      /**Sets the UUID for this player name.*/
      setUUID (uuid: juUUID): void;
   }
   /**Called when an item is put in a slot for repair by an anvil.*/
   export class obeiPrepareAnvilEvent extends cdpeiPrepareResultEvent {
      constructor (inventory: obiInventoryView, result: obiItemStack);
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiAnvilInventory;
      /**Get result item, may be null.*/
      getResult (): obiItemStack;
      setResult (result: obiItemStack): void;
   }
   export class obeiPrepareItemCraftEvent extends obeiInventoryEvent {
      constructor (what: obiCraftingInventory, view: obiInventoryView, isRepair: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiCraftingInventory;
      /**Get the recipe that has been formed.*/
      getRecipe (): obiRecipe;
      /**Check if this event was triggered by a tool repair operation rather  than a crafting recipe.*/
      isRepair (): boolean;
   }
   /**Called when an ItemStack is inserted in an enchantment table - can be  called multiple times*/
   export class obeePrepareItemEnchantEvent extends obeiInventoryEvent implements obeCancellable {
      constructor (
         enchanter: obePlayer,
         view: obiInventoryView,
         table: obbBlock,
         item: obiItemStack,
         offers: obeEnchantmentOffer[],
         bonus: number
      );
      /**Gets the block being used to enchant the item*/
      getEnchantBlock (): obbBlock;
      /**Gets the player enchanting the item*/
      getEnchanter (): obePlayer;
      /**Get enchantment bonus in effect - corresponds to number of bookshelves*/
      getEnchantmentBonus (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the item to be enchanted.*/
      getItem (): obiItemStack;
      /**Get a list of available EnchantmentOffer for the player.*/
      getOffers (): obeEnchantmentOffer[];
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when an item is put in an inventory containing a result slot*/
   export class cdpeiPrepareResultEvent extends obeiInventoryEvent {
      constructor (inventory: obiInventoryView, result: obiItemStack);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get result item, may be null.*/
      getResult (): obiItemStack;
      setResult (result: obiItemStack): void;
   }
   /**Called when an item is put in a slot for upgrade by a Smithing Table.*/
   export class obeiPrepareSmithingEvent extends cdpeiPrepareResultEvent {
      constructor (inventory: obiInventoryView, result: obiItemStack);
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiSmithingInventory;
      /**Get result item, may be null.*/
      getResult (): obiItemStack;
      setResult (result: obiItemStack): void;
   }
   /**Called before an entity is spawned into a world by a spawner.   This only includes the spawner's location and not the full BlockState snapshot for performance reasons.  If you really need it you have to get the spawner yourself.*/
   export class cdpeePreSpawnerSpawnEvent extends cdpeePreCreatureSpawnEvent {
      constructor (location: obLocation, type: obeEntityType, spawnerLocation: obLocation);
      getSpawnerLocation (): obLocation;
   }
   export interface obmPressureSensor {
      isPressed(): boolean;
   }
   /**Represents a property on a PlayerProfile*/
   export class cdppProfileProperty extends jlObject {
      constructor (name: string, value: string);
      constructor (name: string, value: string, signature: string);
      equals (o: jlObject): boolean;
      getName (): string;
      getSignature (): string;
      getValue (): string;
      hashCode (): number;
      isSigned (): boolean;
   }
   /**Fires when the server needs to verify if a player is whitelisted.   Plugins may override\/control the servers whitelist with this event,  and dynamically change the kick message.*/
   export class cdpepProfileWhitelistVerifyEvent extends obeEvent {
      constructor (
         profile: cdppPlayerProfile,
         whitelistEnabled: boolean,
         whitelisted: boolean,
         isOp: boolean,
         kickMessage: string
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getKickMessage (): string;
      getPlayerProfile (): cdppPlayerProfile;
      isOp (): boolean;
      isWhitelisted (): boolean;
      isWhitelistEnabled (): boolean;
      setKickMessage (kickMessage: string): void;
      /**Changes the players whitelisted state.*/
      setWhitelisted (whitelisted: boolean): void;
   }
   /**Represents a shootable entity.*/
   export interface obeProjectile extends obeEntity {
      /**Determine if this projectile should bounce or not when it hits.*/
      doesBounce(): boolean;
      /**Retrieve the shooter of this projectile.*/
      getShooter(): obpProjectileSource;
      /**Set whether or not this projectile should bounce or not when it hits  something.*/
      setBounce(doesBounce: boolean): void;
      /**Set the shooter of this projectile.*/
      setShooter(source: obpProjectileSource): void;
   }
   /**Called when an projectile collides with an entity    This event is called before EntityDamageByEntityEvent, and cancelling it will allow the projectile to continue flying*/
   export class cdpeeProjectileCollideEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeProjectile, collidedWith: obeEntity);
      /**Get the entity the projectile collided with*/
      getCollidedWith (): obeEntity;
      /**Get the projectile that collided*/
      getEntity (): obeProjectile;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a projectile hits an object*/
   export class obeeProjectileHitEvent extends obeeEntityEvent implements obeCancellable {
      constructor (projectile: obeProjectile);
      constructor (projectile: obeProjectile, hitBlock: obbBlock);
      constructor (projectile: obeProjectile, hitEntity: obeEntity);
      constructor (projectile: obeProjectile, hitEntity: obeEntity, hitBlock: obbBlock);
      constructor (projectile: obeProjectile, hitEntity: obeEntity, hitBlock: obbBlock, hitFace: obbBlockFace);
      /**Returns the Entity involved in this event*/
      getEntity (): obeProjectile;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the block that was hit, if it was a block that was hit.*/
      getHitBlock (): obbBlock;
      /**Gets the block face that was hit, if it was a block that was hit and the  face was provided in the vent.*/
      getHitBlockFace (): obbBlockFace;
      /**Gets the entity that was hit, if it was an entity that was hit.*/
      getHitEntity (): obeEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Whether or not to cancel any behavior that would occur from the arrow hitting the block*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a projectile is launched.*/
   export class obeeProjectileLaunchEvent extends obeeEntitySpawnEvent implements obeCancellable {
      constructor (what: obeEntity);
      /**Returns the Entity involved in this event*/
      getEntity (): obeProjectile;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a valid source of a projectile.*/
   export interface obpProjectileSource {
      /**Launches a Projectile from the ProjectileSource.*/
      launchProjectile<T extends obeProjectile>(projectile: jlClass<T>): T;
      /**Launches a Projectile from the ProjectileSource with an  initial velocity.*/
      launchProjectile<T extends obeProjectile>(projectile: jlClass<T>, velocity: obuVector): T;
   }
   /**A Prompt is the main constituent of a Conversation. Each prompt  displays text to the user and optionally waits for a user's response.  Prompts are chained together into a directed graph that represents the  conversation flow. To halt a conversation, END_OF_CONVERSATION is returned  in liu of another Prompt object.*/
   export interface obcPrompt extends jlCloneable {
      /**Accepts and processes input from the user.*/
      acceptInput(context: obcConversationContext, input: string): obcPrompt;
      /**Checks to see if this prompt implementation should wait for user input  or immediately display the next prompt.*/
      blocksForInput(context: obcConversationContext): boolean;
      /**Gets the text to display to the user when this prompt is first  presented.*/
      getPromptText(context: obcConversationContext): string;
   }
   export interface obcProxiedCommandSender extends obcCommandSender {
      /**Returns the CommandSender which is being used to call the command*/
      getCallee(): obcCommandSender;
      /**Returns the CommandSender which triggered this proxied command*/
      getCaller(): obcCommandSender;
   }
   /**Represents a puffer fish.*/
   export interface obePufferFish extends obeFish {
      /**Returns the current puff state of this fish (i.e.*/
      getPuffState(): number;
      /**Sets the current puff state of this fish (i.e.*/
      setPuffState(state: number): void;
   }
   export interface obeRabbit extends obeAnimals {
      getRabbitType(): obeRType;
      setRabbitType(type: obeRType): void;
   }
   /**Represents the various types a Rabbit might be.*/
   export class obeRType extends jlEnum<obeRType> {
      /**Black rabbit.*/
      static BLACK: obeRType;
      /**Black with white patches, or white with black patchesany*/
      static BLACK_AND_WHITE: obeRType;
      /**Chocolate colored rabbit.*/
      static BROWN: obeRType;
      /**Golden bunny.*/
      static GOLD: obeRType;
      /**Salt and pepper colored, whatever that means.*/
      static SALT_AND_PEPPER: obeRType;
      /**Rabbit with pure white fur, blood red horizontal eyes, and is hostile to players.*/
      static THE_KILLER_BUNNY: obeRType;
      /**Pure white rabbit.*/
      static WHITE: obeRType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeRType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeRType[];
   }
   /**Represents a raid event.*/
   export interface obRaid {
      /**Gets the amount of ticks this raid has existed.*/
      getActiveTicks(): number;
      /**Gets the Bad Omen level of this raid.*/
      getBadOmenLevel(): number;
      /**Get the UUID of all heroes in this raid.*/
      getHeroes(): juSet<juUUID>;
      /**Gets the center location where the raid occurs.*/
      getLocation(): obLocation;
      /**Gets all remaining Raider in the present wave.*/
      getRaiders(): juList<obeRaider>;
      /**Gets the number of raider groups which have spawned.*/
      getSpawnedGroups(): number;
      /**Gets the current status of the raid.*/
      getStatus(): obRRaidStatus;
      /**Gets the number of raider groups which would spawn.*/
      getTotalGroups(): number;
      /**Gets the sum of all raider's health.*/
      getTotalHealth(): number;
      /**Gets the number of waves in this raid (exclude the additional wave).*/
      getTotalWaves(): number;
      /**Get whether this raid started.*/
      isStarted(): boolean;
      /**Sets the Bad Omen level.*/
      setBadOmenLevel(badOmenLevel: number): void;
   }
   /**Represents the status of a Raid.*/
   export class obRRaidStatus extends jlEnum<obRRaidStatus> {
      /**The village has fallen (i.e.*/
      static LOSS: obRRaidStatus;
      /**The raid is in progress.*/
      static ONGOING: obRRaidStatus;
      /**The raid was terminated.*/
      static STOPPED: obRRaidStatus;
      /**The raid was beaten by heroes.*/
      static VICTORY: obRRaidStatus;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obRRaidStatus;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obRRaidStatus[];
   }
   export interface obeRaider extends obeMonster {
      /**Gets the block the raider is targeting to patrol.*/
      getPatrolTarget(): obbBlock;
      /**Gets whether this mob can join an active raid.*/
      isCanJoinRaid(): boolean;
      /**Gets whether this entity is a patrol leader.*/
      isPatrolLeader(): boolean;
      /**Sets whether this mob can join an active raid.*/
      setCanJoinRaid(join: boolean): void;
      /**Sets whether this entity is a patrol leader.*/
      setPatrolLeader(leader: boolean): void;
      /**Sets the block the raider is targeting to patrol.*/
      setPatrolTarget(block: obbBlock): void;
   }
   /**Represents events related to raids.*/
   export class oberRaidEvent extends obewWorldEvent {
      constructor (raid: obRaid, world: obWorld);
      /**Returns the raid involved with this event.*/
      getRaid (): obRaid;
   }
   /**This event is called when a Raid was complete with a clear result.*/
   export class oberRaidFinishEvent extends oberRaidEvent {
      constructor (raid: obRaid, world: obWorld, winners: juList<obePlayer>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns an immutable list contains all winners.*/
      getWinners (): juList<obePlayer>;
   }
   /**Called when a raid wave spawns.*/
   export class oberRaidSpawnWaveEvent extends oberRaidEvent {
      constructor (raid: obRaid, world: obWorld, leader: obeRaider, raiders: juList<obeRaider>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the patrol leader.*/
      getPatrolLeader (): obeRaider;
      /**Returns all Raider that spawned in this wave.*/
      getRaiders (): juList<obeRaider>;
   }
   /**Called when a Raid is stopped.*/
   export class oberRaidStopEvent extends oberRaidEvent {
      constructor (raid: obRaid, world: obWorld, reason: oberRReason);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the stop reason.*/
      getReason (): oberRReason;
   }
   export class oberRReason extends jlEnum<oberRReason> {
      /**Finished the raid.*/
      static FINISHED: oberRReason;
      /**The place where the raid occurs no longer be a village.*/
      static NOT_IN_VILLAGE: oberRReason;
      /**Because the difficulty has been changed to peaceful.*/
      static PEACE: oberRReason;
      /**The raid took a long time without a final result.*/
      static TIMEOUT: oberRReason;
      /**Couldn't find a suitable place to spawn raiders.*/
      static UNSPAWNABLE: oberRReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): oberRReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): oberRReason[];
   }
   /**Called when a Raid is triggered (e.g: a player with Bad Omen effect  enters a village).*/
   export class oberRaidTriggerEvent extends oberRaidEvent implements obeCancellable {
      constructor (raid: obRaid, world: obWorld, player: obePlayer);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Returns the player who triggered the raid.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**'shape' represents the current layout of a minecart rail.    Some types of rail may not be able to be laid out in all shapes, use  getShapes() to get those applicable to this block.*/
   export interface obbdRail extends obbdBlockData {
      /**Gets the value of the 'shape' property.*/
      getShape(): obbdRShape;
      /**Gets the shapes which are applicable to this block.*/
      getShapes(): juSet<obbdRShape>;
      /**Sets the value of the 'shape' property.*/
      setShape(shape: obbdRShape): void;
   }
   /**The different types of shapes a rail block can occupy.*/
   export class obbdRShape extends jlEnum<obbdRShape> {
      /**The rail ascends in the east (positive X) direction.*/
      static ASCENDING_EAST: obbdRShape;
      /**The rail ascends in the north (negative Z) direction.*/
      static ASCENDING_NORTH: obbdRShape;
      /**The rail ascends in the south (positive Z) direction.*/
      static ASCENDING_SOUTH: obbdRShape;
      /**The rail ascends in the west (negative X) direction.*/
      static ASCENDING_WEST: obbdRShape;
      /**The rail runs flat along the east\/west (X) axis.*/
      static EAST_WEST: obbdRShape;
      /**The rail forms a curve connecting the north and east faces of the  block.*/
      static NORTH_EAST: obbdRShape;
      /**The rail runs flat along the north\/south (Z) axis.*/
      static NORTH_SOUTH: obbdRShape;
      /**The rail forms a curve connecting the north and west faces of the  block.*/
      static NORTH_WEST: obbdRShape;
      /**The rail forms a curve connecting the south and east faces of the  block.*/
      static SOUTH_EAST: obbdRShape;
      /**The rail forms a curve connecting the south and west faces of the  block.*/
      static SOUTH_WEST: obbdRShape;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdRShape;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdRShape[];
   }
   export interface cdpeRangedEntity extends obeMob {
      /**Alias to LivingEntity.isHandRaised(), if the entity is charging an attack*/
      isChargingAttack(): boolean;
      /**Attack the specified entity using a ranged attack.*/
      rangedAttack(target: obeLivingEntity, charge: number): void;
      /**Sets that the Entity is "charging" up an attack, by raising its hands*/
      setChargingAttack(raiseHands: boolean): void;
   }
   /**Illager beast.*/
   export interface obeRavager extends obeRaider {}
   /**The hit result of a ray trace.    Only the hit position is guaranteed to always be available. The availability  of the other attributes depends on what got hit and on the context in which  the ray trace was performed.*/
   export class obuRayTraceResult extends jlObject {
      constructor (hitPosition: obuVector);
      constructor (hitPosition: obuVector, hitBlockFace: obbBlockFace);
      constructor (hitPosition: obuVector, hitBlock: obbBlock, hitBlockFace: obbBlockFace);
      constructor (hitPosition: obuVector, hitEntity: obeEntity);
      constructor (hitPosition: obuVector, hitEntity: obeEntity, hitBlockFace: obbBlockFace);
      equals (obj: jlObject): boolean;
      /**Gets the hit block.*/
      getHitBlock (): obbBlock;
      /**Gets the hit block face.*/
      getHitBlockFace (): obbBlockFace;
      /**Gets the hit entity.*/
      getHitEntity (): obeEntity;
      /**Gets the exact position of the hit.*/
      getHitPosition (): obuVector;
      hashCode (): number;
      toString (): string;
   }
   /**Represents some type of crafting recipe.*/
   export interface obiRecipe {
      /**Get the result of this recipe.*/
      getResult(): obiItemStack;
   }
   /**Represents a potential item match within a recipe. All choices within a  recipe must be satisfied for it to be craftable.   This class is not legal for implementation by plugins!*/
   export interface obiRecipeChoice extends jufPredicate<obiItemStack>, jlCloneable {
      clone(): obiRecipeChoice;
      test(itemStack: obiItemStack): boolean;
   }
   /**Represents a choice of multiple matching Materials.*/
   export class obiRMaterialChoice extends jlObject implements obiRecipeChoice {
      constructor (choices: juList<obMaterial>);
      constructor (choice: obMaterial);
      constructor (...choices: obMaterial[]);
      constructor (choices: obTag<obMaterial>);
      clone (): obiRMaterialChoice;
      equals (obj: jlObject): boolean;
      getChoices (): juList<obMaterial>;
      /**Gets a single item stack representative of this stack choice.*/
      getItemStack (): obiItemStack;
      hashCode (): number;
      test (t: obiItemStack): boolean;
      toString (): string;
   }
   /**Indicated a Material that may carry or create a Redstone current*/
   export interface obmRedstone {
      /**Gets the current state of this Material, indicating if it's powered or  unpowered*/
      isPowered(): boolean;
   }
   /**A type of minecart rail which interacts with redstone in one way or another.*/
   export interface obbdtRedstoneRail extends obbdPowerable, obbdRail {}
   export interface obbdtRedstoneWallTorch extends obbdDirectional, obbdLightable {}
   /**'north', 'east', 'south', 'west' represent the types of connections this  redstone wire has to adjacent blocks.*/
   export interface obbdtRedstoneWire extends obbdAnaloguePowerable {
      /**Gets all of this faces which may be set on this block.*/
      getAllowedFaces(): juSet<obbBlockFace>;
      /**Checks the type of connection on the specified face.*/
      getFace(face: obbBlockFace): obbdtRConnection;
      /**Sets the type of connection on the specified face.*/
      setFace(face: obbBlockFace, connection: obbdtRConnection): void;
   }
   /**The way in which a redstone wire can connect to an adjacent block face.*/
   export class obbdtRConnection extends jlEnum<obbdtRConnection> {
      /**The wire does not connect in this direction.*/
      static NONE: obbdtRConnection;
      /**The wire travels flat from this face and into the adjacent block.*/
      static SIDE: obbdtRConnection;
      /**The wire travels up the side of the block adjacent to this face.*/
      static UP: obbdtRConnection;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtRConnection;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtRConnection[];
   }
   /**RegexPrompt is the base class for any prompt that requires an input  validated by a regular expression.*/
   export class obcRegexPrompt extends obcValidatingPrompt {
      constructor (regex: string);
      constructor (pattern: jurPattern);
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
   }
   /**Stores relevant information for plugin listeners*/
   export class obpRegisteredListener extends jlObject {
      constructor (
         listener: obeListener,
         executor: obpEventExecutor,
         priority: obeEventPriority,
         plugin: obpPlugin,
         ignoreCancelled: boolean
      );
      /**Calls the event executor*/
      callEvent (event: obeEvent): void;
      /**Gets the listener for this registration*/
      getListener (): obeListener;
      /**Gets the plugin for this registration*/
      getPlugin (): obpPlugin;
      /**Gets the priority for this registration*/
      getPriority (): obeEventPriority;
      /**Whether this listener accepts cancelled events*/
      isIgnoringCancelled (): boolean;
   }
   /**A registered service provider.*/
   export class obpRegisteredServiceProvider<T> extends jlObject
      implements jlComparable<obpRegisteredServiceProvider<any>> {
      constructor (service: jlClass<T>, provider: T, priority: obpServicePriority, plugin: obpPlugin);
      compareTo (other: obpRegisteredServiceProvider<any>): number;
      getPlugin (): obpPlugin;
      getPriority (): obpServicePriority;
      getProvider (): T;
      getService (): jlClass<T>;
   }
   /**Represents a registry of Bukkit objects that may be retrieved by  NamespacedKey.*/
   export interface obRegistry<T extends Keyed> extends jlIterable<T> {
      /**Get the object by its key.*/
      get(key: obNamespacedKey): T;
   }
   export class obRSimpleRegistry<T extends Enum<T> & Keyed> extends jlObject implements obRegistry<T> {
      constructor (type: jlClass<T>);
      constructor (type: jlClass<T>, predicate: jufPredicate<T>);
      /**Get the object by its key.*/
      get (key: obNamespacedKey): T;
      iterator (): juIterator<T>;
   }
   export class obcdReloadCommand extends obcdBukkitCommand {
      constructor (name: string);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, currentAlias: string, args: string[]): boolean;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
   }
   export interface obcRemoteConsoleCommandSender extends obcCommandSender {}
   /**This event is called when a command is received over RCON. See the javadocs  of ServerCommandEvent for more information.*/
   export class obesRemoteServerCommandEvent extends obesServerCommandEvent {
      constructor (sender: obcCommandSender, command: string);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Controls the way in which an Objective is rendered client side.*/
   export class obsRenderType extends jlEnum<obsRenderType> {
      /**Display number of hearts corresponding to value.*/
      static HEARTS: obsRenderType;
      /**Display integer value.*/
      static INTEGER: obsRenderType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obsRenderType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obsRenderType[];
   }
   /**Represents an item that can be repaired at an anvil.*/
   export interface obimRepairable {
      clone(): obimRepairable;
      /**Gets the repair penalty*/
      getRepairCost(): number;
      /**Checks to see if this has a repair penalty*/
      hasRepairCost(): boolean;
      /**Sets the repair penalty*/
      setRepairCost(cost: number): void;
   }
   /**'delay' is the propagation delay of a repeater, i.e. how many ticks before it  will be activated from a current change and propagate it to the next block.    Delay may not be lower than getMinimumDelay() or higher than  getMaximumDelay().    'locked' denotes whether the repeater is in the locked state or not.    A locked repeater will not change its output until it is unlocked. In game, a  locked repeater is created by having a constant current perpendicularly  entering the block.*/
   export interface obbdtRepeater extends obbdDirectional, obbdPowerable {
      /**Gets the value of the 'delay' property.*/
      getDelay(): number;
      /**Gets the maximum allowed value of the 'delay' property.*/
      getMaximumDelay(): number;
      /**Gets the minimum allowed value of the 'delay' property.*/
      getMinimumDelay(): number;
      /**Gets the value of the 'locked' property.*/
      isLocked(): boolean;
      /**Sets the value of the 'delay' property.*/
      setDelay(delay: number): void;
      /**Sets the value of the 'locked' property.*/
      setLocked(locked: boolean): void;
   }
   /**A reputation score for a player on a villager.*/
   export class cdpevReputation extends jlObject {
      constructor ();
      constructor (reputation: juMap<cdpevReputationType, jlInteger>);
      /**Gets the reputation value for a specific ReputationType.*/
      getReputation (type: cdpevReputationType): number;
      /**Sets the reputation value for a specific ReputationType.*/
      setReputation (type: cdpevReputationType, value: number): void;
   }
   /**A type of reputation gained with a Villager.    All types but MAJOR_POSITIVE are shared to other villagers.*/
   export class cdpevReputationType extends jlEnum<cdpevReputationType> {
      /**A gossip with a majorly negative effect.*/
      static MAJOR_NEGATIVE: cdpevReputationType;
      /**A gossip with a major positive effect.*/
      static MAJOR_POSITIVE: cdpevReputationType;
      /**A gossip with a minor negative effect.*/
      static MINOR_NEGATIVE: cdpevReputationType;
      /**A gossip with a minor positive effect.*/
      static MINOR_POSITIVE: cdpevReputationType;
      /**A gossip with a minor positive effect.*/
      static TRADING: cdpevReputationType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpevReputationType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpevReputationType[];
   }
   /**Thrown if a plugin attempts to register for a reserved channel (such as  "REGISTER")*/
   export class obpmReservedChannelException extends jlRuntimeException {
      constructor ();
      constructor (name: string);
   }
   /**'charges' represents the amount of times the anchor may still be used.*/
   export interface obbdtRespawnAnchor extends obbdBlockData {
      /**Gets the value of the 'charges' property.*/
      getCharges(): number;
      /**Gets the maximum allowed value of the 'charges' property.*/
      getMaximumCharges(): number;
      /**Sets the value of the 'charges' property.*/
      setCharges(charges: number): void;
   }
   /**Represents a minecart that can have certain entities as passengers. Normal passengers  include all living entities with  the exception of iron golems.  Non-player entities that meet normal passenger criteria automatically  mount these minecarts when close enough.*/
   export interface obemRideableMinecart extends obeMinecart {}
   /**'rotation' represents the current rotation of this block.*/
   export interface obbdRotatable extends obbdBlockData {
      /**Gets the value of the 'rotation' property.*/
      getRotation(): obbBlockFace;
      /**Sets the value of the 'rotation' property.*/
      setRotation(rotation: obbBlockFace): void;
   }
   /**An enum to specify a rotation based orientation, like that on a clock.    It represents how something is viewed, as opposed to cardinal directions.*/
   export class obRotation extends jlEnum<obRotation> {
      /**Rotated clockwise by 90 degrees*/
      static CLOCKWISE: obRotation;
      /**Rotated clockwise by 135 degrees*/
      static CLOCKWISE_135: obRotation;
      /**Rotated clockwise by 45 degrees*/
      static CLOCKWISE_45: obRotation;
      /**Rotated counter-clockwise by 90 degrees*/
      static COUNTER_CLOCKWISE: obRotation;
      /**Rotated counter-clockwise by 45 degrees*/
      static COUNTER_CLOCKWISE_45: obRotation;
      /**Flipped upside-down, a 180 degree rotation*/
      static FLIPPED: obRotation;
      /**Flipped upside-down + 45 degree rotation*/
      static FLIPPED_45: obRotation;
      /**No rotation*/
      static NONE: obRotation;
      /**Rotate clockwise by 90 degrees.*/
      rotateClockwise (): obRotation;
      /**Rotate counter-clockwise by 90 degrees.*/
      rotateCounterClockwise (): obRotation;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obRotation;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obRotation[];
   }
   export interface obiSaddledHorseInventory extends obiAbstractHorseInventory {}
   export class cdpeeaSafeClassDefiner extends jlObject implements cdpeeaClassDefiner {
      /**Define a class*/
      defineClass (parentLoader: jlClassLoader, name: string, data: number[]): jlClass<any>;
   }
   /**Represents a salmon fish.*/
   export interface obeSalmon extends obeFish {}
   /**Represents the three different types of Sandstone*/
   export class obSandstoneType extends jlEnum<obSandstoneType> {
      static CRACKED: obSandstoneType;
      static GLYPHED: obSandstoneType;
      static SMOOTH: obSandstoneType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obSandstoneType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obSandstoneType[];
   }
   /**'stage' represents the growth stage of a sapling.    When the sapling reaches getMaximumStage() it will attempt to grow  into a tree as the next stage.*/
   export interface obbdtSapling extends obbdBlockData {
      /**Gets the maximum allowed value of the 'stage' property.*/
      getMaximumStage(): number;
      /**Gets the value of the 'stage' property.*/
      getStage(): number;
      /**Sets the value of the 'stage' property.*/
      setStage(stage: number): void;
   }
   /**'bottom' indicates whether the scaffolding is floating or not.    'distance' indicates the distance from a scaffolding block placed above a  'bottom' scaffold.    When 'distance' reaches getMaximumDistance() the block will drop.*/
   export interface obbdtScaffolding extends obbdWaterlogged {
      /**Gets the value of the 'distance' property.*/
      getDistance(): number;
      /**Gets the maximum allowed value of the 'distance' property.*/
      getMaximumDistance(): number;
      /**Gets the value of the 'bottom' property.*/
      isBottom(): boolean;
      /**Sets the value of the 'bottom' property.*/
      setBottom(bottom: boolean): void;
      /**Sets the value of the 'distance' property.*/
      setDistance(distance: number): void;
   }
   /**A score entry for an entry on an objective. Changing this will not affect any other  objective or scoreboard.*/
   export interface obsScore {
      /**Gets the entry being tracked by this Score*/
      getEntry(): string;
      /**Gets the Objective being tracked by this Score*/
      getObjective(): obsObjective;
      /**Gets the current score*/
      getScore(): number;
      /**Gets the scoreboard for the associated objective.*/
      getScoreboard(): obsScoreboard;
      /**Shows if this score has been set at any point in time.*/
      isScoreSet(): boolean;
      /**Sets the current score.*/
      setScore(score: number): void;
   }
   /**A scoreboard*/
   export interface obsScoreboard {
      /**Clears any objective in the specified slot.*/
      clearSlot(slot: obsDisplaySlot): void;
      /**Gets all entries tracked by this Scoreboard*/
      getEntries(): juSet<string>;
      /**Gets a entries Team on this Scoreboard*/
      getEntryTeam(entry: string): obsTeam;
      /**Gets an Objective on this Scoreboard by name*/
      getObjective(name: string): obsObjective;
      /**Gets the Objective currently displayed in a DisplaySlot on this  Scoreboard*/
      getObjective(slot: obsDisplaySlot): obsObjective;
      /**Gets all Objectives on this Scoreboard*/
      getObjectives(): juSet<obsObjective>;
      /**Gets all Objectives of a Criteria on the Scoreboard*/
      getObjectivesByCriteria(criteria: string): juSet<obsObjective>;
      /**Gets all scores for an entry on this Scoreboard*/
      getScores(entry: string): juSet<obsScore>;
      /**Gets a Team by name on this Scoreboard*/
      getTeam(teamName: string): obsTeam;
      /**Gets all teams on this Scoreboard*/
      getTeams(): juSet<obsTeam>;
      /**Registers an Objective on this Scoreboard*/
      registerNewObjective(name: string, criteria: string, displayName: string): obsObjective;
      /**Registers an Objective on this Scoreboard*/
      registerNewObjective(name: string, criteria: string, displayName: string, renderType: obsRenderType): obsObjective;
      /**Registers a Team on this Scoreboard*/
      registerNewTeam(name: string): obsTeam;
      /**Removes all scores for an entry on this Scoreboard*/
      resetScores(entry: string): void;
   }
   /**Manager of Scoreboards*/
   export interface obsScoreboardManager {
      /**Gets the primary Scoreboard controlled by the server.*/
      getMainScoreboard(): obsScoreboard;
      /**Gets a new Scoreboard to be tracked by the server.*/
      getNewScoreboard(): obsScoreboard;
   }
   /**'pickles' indicates the number of pickles in this block.*/
   export interface obbdtSeaPickle extends obbdWaterlogged {
      /**Gets the maximum allowed value of the 'pickles' property.*/
      getMaximumPickles(): number;
      /**Gets the minimum allowed value of the 'pickles' property.*/
      getMinimumPickles(): number;
      /**Gets the value of the 'pickles' property.*/
      getPickles(): number;
      /**Sets the value of the 'pickles' property.*/
      setPickles(pickles: number): void;
   }
   /**Represents a server implementation.*/
   export interface obServer extends obpmPluginMessageRecipient {
      /**Adds a recipe to the crafting manager.*/
      addRecipe(recipe: obiRecipe): boolean;
      /**Get an iterator through all advancements.*/
      advancementIterator(): juIterator<obaAdvancement>;
      /**Bans the specified address from the server.*/
      banIP(address: string): void;
      /**Broadcasts the specified message to every user with the given  permission name.*/
      broadcast(message: string, permission: string): number;
      /**Sends the component to all online players.*/
      broadcast(component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to all online players.*/
      broadcast(...components: nmbacBaseComponent[]): void;
      /**Broadcast a message to all players.*/
      broadcastMessage(message: string): number;
      /**Clears the list of crafting recipes.*/
      clearRecipes(): void;
      /**Creates a new BlockData instance with material and properties  parsed from provided data.*/
      createBlockData(data: string): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults.*/
      createBlockData(material: obMaterial): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults, except for those  provided in data.*/
      createBlockData(material: obMaterial, data: string): obbdBlockData;
      /**Creates a new BlockData instance for the specified Material, with  all properties initialized to unspecified defaults.*/
      createBlockData(material: obMaterial, consumer: jufConsumer<obbdBlockData>): obbdBlockData;
      /**Creates a boss bar instance to display to players.*/
      createBossBar(title: string, color: obbBarColor, style: obbBarStyle, ...flags: obbBarFlag[]): obbBossBar;
      /**Creates a boss bar instance to display to players.*/
      createBossBar(
         key: obNamespacedKey,
         title: string,
         color: obbBarColor,
         style: obbBarStyle,
         ...flags: obbBarFlag[]
      ): obbKeyedBossBar;
      /**Create a ChunkData for use in a generator.*/
      createChunkData(world: obWorld): obgCChunkData;
      /**Create a new explorer map targeting the closest nearby structure of a  given StructureType.*/
      createExplorerMap(world: obWorld, location: obLocation, structureType: obStructureType): obiItemStack;
      /**Create a new explorer map targeting the closest nearby structure of a  given StructureType.*/
      createExplorerMap(
         world: obWorld,
         location: obLocation,
         structureType: obStructureType,
         radius: number,
         findUnexplored: boolean
      ): obiItemStack;
      /**Creates an empty inventory of type InventoryType.CHEST with the  specified size.*/
      createInventory(owner: obiInventoryHolder, size: number): obiInventory;
      /**Creates an empty inventory of type InventoryType.CHEST with the  specified size and title.*/
      createInventory(owner: obiInventoryHolder, size: number, title: string): obiInventory;
      /**Creates an empty inventory with the specified type.*/
      createInventory(owner: obiInventoryHolder, type: obeiInventoryType): obiInventory;
      /**Creates an empty inventory with the specified type and title.*/
      createInventory(owner: obiInventoryHolder, type: obeiInventoryType, title: string): obiInventory;
      /**Create a new map with an automatically assigned ID.*/
      createMap(world: obWorld): obmMapView;
      /**Creates an empty merchant.*/
      createMerchant(title: string): obiMerchant;
      /**Creates a PlayerProfile for the specified name, with UUID as null*/
      createProfile(name: string): cdppPlayerProfile;
      /**Creates a PlayerProfile for the specified uuid, with name as null*/
      createProfile(uuid: juUUID): cdppPlayerProfile;
      /**Creates a PlayerProfile for the specified name\/uuid   Both UUID and Name can not be null at same time.*/
      createProfile(uuid: juUUID, name: string): cdppPlayerProfile;
      /**Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world*/
      createVanillaChunkData(world: obWorld, x: number, z: number): obgCChunkData;
      /**Creates or loads a world with the given name using the specified  options.*/
      createWorld(creator: obWorldCreator): obWorld;
      /**Dispatches a command on this server, and executes it if found.*/
      dispatchCommand(sender: obcCommandSender, commandLine: string): boolean;
      /**Get the advancement specified by this key.*/
      getAdvancement(key: obNamespacedKey): obaAdvancement;
      /**Gets whether this server allows the End or not.*/
      getAllowEnd(): boolean;
      /**Gets whether this server allows flying or not.*/
      getAllowFlight(): boolean;
      /**Gets whether this server allows the Nether or not.*/
      getAllowNether(): boolean;
      /**Gets user-specified limit for number of ambient mobs that can spawn in  a chunk.*/
      getAmbientSpawnLimit(): number;
      /**Gets user-specified limit for number of animals that can spawn in a  chunk.*/
      getAnimalSpawnLimit(): number;
      /**Get the average tick time (in millis)*/
      getAverageTickTime(): number;
      /**Gets a ban list for the supplied type.*/
      getBanList(type: obBType): obBanList;
      /**Gets a set containing all banned players.*/
      getBannedPlayers(): juSet<obOfflinePlayer>;
      /**Gets the KeyedBossBar specified by this key.*/
      getBossBar(key: obNamespacedKey): obbKeyedBossBar;
      /**Gets an unmodifiable iterator through all persistent bossbars.*/
      getBossBars(): juIterator<obbKeyedBossBar>;
      /**Gets the Bukkit version that this server is running.*/
      getBukkitVersion(): string;
      /**Gets a list of command aliases defined in the server properties.*/
      getCommandAliases(): juMap<string, string[]>;
      /**Gets the active CommandMap*/
      getCommandMap(): obcCommandMap;
      /**Gets the value of the connection throttle setting.*/
      getConnectionThrottle(): number;
      /**Gets a ConsoleCommandSender that may be used as an input source  for this server.*/
      getConsoleSender(): obcConsoleCommandSender;
      /**Get the current internal server tick*/
      getCurrentTick(): number;
      /**Gets the default GameMode for new players.*/
      getDefaultGameMode(): obGameMode;
      /**Gets an entity on the server by its UUID*/
      getEntity(uuid: juUUID): obeEntity;
      /**Get generate-structures setting.*/
      getGenerateStructures(): boolean;
      /**Gets the HelpMap providing help topics for this server.*/
      getHelpMap(): obhHelpMap;
      /**Gets the idle kick timeout.*/
      getIdleTimeout(): number;
      /**Get the IP that this server is bound to, or empty string if not  specified.*/
      getIp(): string;
      /**Gets a set containing all current IPs that are banned.*/
      getIPBans(): juSet<string>;
      /**Gets the instance of the item factory (for ItemMeta).*/
      getItemFactory(): obiItemFactory;
      /**Returns the primary logger associated with this server instance.*/
      getLogger(): julLogger;
      /**Gets the specified LootTable.*/
      getLootTable(key: obNamespacedKey): oblLootTable;
      /**Get the maximum amount of players which can login to this server.*/
      getMaxPlayers(): number;
      /**Get max world size.*/
      getMaxWorldSize(): number;
      /**Gets the Messenger responsible for this server.*/
      getMessenger(): obpmMessenger;
      /**Gets the version of game this server implements*/
      getMinecraftVersion(): string;
      /**Returns the MobGoals manager*/
      getMobGoals(): cdpeaMobGoals;
      /**Gets user-specified limit for number of monsters that can spawn in a  chunk.*/
      getMonsterSpawnLimit(): number;
      /**Gets the message that is displayed on the server list.*/
      getMotd(): string;
      /**Gets the name of this server implementation.*/
      getName(): string;
      /**Gets the player by the given UUID, regardless if they are offline or  online.*/
      getOfflinePlayer(id: juUUID): obOfflinePlayer;
      /**Gets the player by the given name, regardless if they are offline or  online.*/
      getOfflinePlayerIfCached(name: string): obOfflinePlayer;
      /**Gets every player that has ever played on this server.*/
      getOfflinePlayers(): obOfflinePlayer[];
      /**Gets whether the Server is in online mode or not.*/
      getOnlineMode(): boolean;
      /**Gets a view of all currently logged in players.*/
      getOnlinePlayers(): juCollection<obePlayer>;
      /**Gets a set containing all player operators.*/
      getOperators(): juSet<obOfflinePlayer>;
      getPermissionMessage(): string;
      /**Gets a player object by the given username.*/
      getPlayer(name: string): obePlayer;
      /**Gets the player with the given UUID.*/
      getPlayer(id: juUUID): obePlayer;
      /**Gets the player with the exact given name, case insensitive.*/
      getPlayerExact(name: string): obePlayer;
      /**Gets the unique ID of the player currently known as the specified player name  In Offline Mode, will return an Offline UUID*/
      getPlayerUniqueId(playerName: string): juUUID;
      /**Gets a PluginCommand with the given name or alias.*/
      getPluginCommand(name: string): obcPluginCommand;
      /**Gets the plugin manager for interfacing with plugins.*/
      getPluginManager(): obpPluginManager;
      /**Get the game port that the server runs on.*/
      getPort(): number;
      /**Get the Recipe for the given key.*/
      getRecipe(recipeKey: obNamespacedKey): obiRecipe;
      /**Get a list of all recipes for a given item.*/
      getRecipesFor(result: obiItemStack): juList<obiRecipe>;
      /**Gets the scheduler for managing scheduled events.*/
      getScheduler(): obsBukkitScheduler;
      /**Gets the instance of the scoreboard manager.*/
      getScoreboardManager(): obsScoreboardManager;
      /**Gets an instance of the server's default server-icon.*/
      getServerIcon(): obuCachedServerIcon;
      /**Gets a services manager.*/
      getServicesManager(): obpServicesManager;
      /**Gets the default message that is displayed when the server is stopped.*/
      getShutdownMessage(): string;
      /**Gets the radius, in blocks, around each worlds spawn point to protect.*/
      getSpawnRadius(): number;
      /**Gets a tag which has already been defined within the server.*/
      getTag<T extends obKeyed>(registry: string, tag: obNamespacedKey, clazz: jlClass<T>): obTag<T>;
      /**Gets a all tags which have been defined within the server.*/
      getTags<T extends obKeyed>(registry: string, clazz: jlClass<T>): jlIterable<obTag<T>>;
      /**Gets the default ticks per ambient mob spawns value.*/
      getTicksPerAmbientSpawns(): number;
      /**Gets default ticks per animal spawns value.*/
      getTicksPerAnimalSpawns(): number;
      /**Gets the default ticks per monster spawns value.*/
      getTicksPerMonsterSpawns(): number;
      /**Gets the default ticks per water ambient mob spawns value.*/
      getTicksPerWaterAmbientSpawns(): number;
      /**Gets the default ticks per water mob spawns value.*/
      getTicksPerWaterSpawns(): number;
      /**Get a sample of the servers last tick times (in nanos)*/
      getTickTimes(): number[];
      /**Gets the current server TPS*/
      getTPS(): number[];
      /**Gets the name of the update folder.*/
      getUpdateFolder(): string;
      /**Gets the update folder.*/
      getUpdateFolderFile(): jiFile;
      /**Gets the version string of this server implementation.*/
      getVersion(): string;
      /**Get the view distance from this server.*/
      getViewDistance(): number;
      /**Gets the current warning state for the server.*/
      getWarningState(): obWWarningState;
      /**Gets user-specified limit for number of water ambient mobs that can spawn  in a chunk.*/
      getWaterAmbientSpawnLimit(): number;
      /**Gets user-specified limit for number of water animals that can spawn in  a chunk.*/
      getWaterAnimalSpawnLimit(): number;
      /**Gets a list of whitelisted players.*/
      getWhitelistedPlayers(): juSet<obOfflinePlayer>;
      /**Gets the world with the given name.*/
      getWorld(name: string): obWorld;
      /**Gets the world from the given Unique ID.*/
      getWorld(uid: juUUID): obWorld;
      /**Gets the folder that contains all of the various Worlds.*/
      getWorldContainer(): jiFile;
      /**Gets a list of all worlds on this server.*/
      getWorlds(): juList<obWorld>;
      /**Get world type (level-type setting) for default world.*/
      getWorldType(): string;
      /**Gets whether this server has a whitelist or not.*/
      hasWhitelist(): boolean;
      /**Gets whether the server is in hardcore mode or not.*/
      isHardcore(): boolean;
      /**Checks the current thread against the expected primary thread for the  server.*/
      isPrimaryThread(): boolean;
      /**Checks if the server is in the process of being shutdown.*/
      isStopping(): boolean;
      /**Creates a cached server-icon for the specific image.*/
      loadServerIcon(image: jaiBufferedImage): obuCachedServerIcon;
      /**Loads an image from a file, and returns a cached image for the specific  server-icon.*/
      loadServerIcon(file: jiFile): obuCachedServerIcon;
      /**Attempts to match any players with the given name, and returns a list  of all possibly matches.*/
      matchPlayer(name: string): juList<obePlayer>;
      /**Get an iterator through the list of crafting recipes.*/
      recipeIterator(): juIterator<obiRecipe>;
      /**Reloads the server, refreshing settings and plugin information.*/
      reload(): void;
      reloadCommandAliases(): boolean;
      /**Reload only the Minecraft data for the server.*/
      reloadData(): void;
      reloadPermissions(): void;
      /**Reloads the whitelist from disk.*/
      reloadWhitelist(): void;
      /**Removes a KeyedBossBar specified by this key.*/
      removeBossBar(key: obNamespacedKey): boolean;
      /**Remove a recipe from the server.*/
      removeRecipe(key: obNamespacedKey): boolean;
      /**Resets the list of crafting recipes to the default.*/
      resetRecipes(): void;
      /**Writes loaded players to disk.*/
      savePlayers(): void;
      /**Selects entities using the given Vanilla selector.*/
      selectEntities(sender: obcCommandSender, selector: string): juList<obeEntity>;
      /**Sets the default GameMode for new players.*/
      setDefaultGameMode(mode: obGameMode): void;
      /**Set the idle kick timeout.*/
      setIdleTimeout(threshold: number): void;
      /**Set the maximum amount of players which can login to this server.*/
      setMaxPlayers(maxPlayers: number): void;
      /**Sets the radius, in blocks, around each worlds spawn point to protect.*/
      setSpawnRadius(value: number): void;
      /**Sets if the server is whitelisted.*/
      setWhitelist(value: boolean): void;
      /**Shutdowns the server, stopping everything.*/
      shutdown(): void;
      spigot(): obSSpigot;
      /**Checks if player names should be suggested when a command returns null as  their tab completion result.*/
      suggestPlayerNamesWhenNullTabCompletions(): boolean;
      /**Unbans the specified address from the server.*/
      unbanIP(address: string): void;
      /**Unloads a world with the given name.*/
      unloadWorld(name: string, save: boolean): boolean;
      /**Unloads the given world.*/
      unloadWorld(world: obWorld, save: boolean): boolean;
   }
   export class obSSpigot extends jlObject {
      constructor ();
      /**Sends the component to the player*/
      broadcast (component: nmbacBaseComponent): void;
      /**Sends an array of components as a single message to the player*/
      broadcast (...components: nmbacBaseComponent[]): void;
      getBukkitConfig (): obcfYamlConfiguration;
      getConfig (): obcfYamlConfiguration;
      getPaperConfig (): obcfYamlConfiguration;
      getSpigotConfig (): obcfYamlConfiguration;
      /**Restart the server.*/
      restart (): void;
   }
   /**This event is called when a command is run by a non-player. It is  called early in the command handling process, and modifications in this  event (via setCommand(String)) will be shown in the behavior.    Many plugins will have no use for this event, and you should  attempt to avoid using it if it is not necessary.    Some examples of valid uses for this event are:    Logging executed commands to a separate file  Variable substitution. For example, replacing ${ip:Steve}      with the connection IP of the player named Steve, or simulating the      @a and @p decorators used by Command Blocks      for plugins that do not handle it.  Conditionally blocking commands belonging to other plugins.  Per-sender command aliases. For example, after the console runs the      command \/calias cr gamemode creative, the next time they      run \/cr, it gets replaced into      \/gamemode creative. (Global command aliases should be      done by registering the alias.)      Examples of incorrect uses are:    Using this event to run command logic      If the event is cancelled, processing of the command will halt.    The state of whether or not there is a slash (\/) at the  beginning of the message should be preserved. If a slash is added or  removed, unexpected behavior may result.*/
   export class obesServerCommandEvent extends obesServerEvent implements obeCancellable {
      constructor (sender: obcCommandSender, command: string);
      /**Gets the command that the user is attempting to execute from the  console*/
      getCommand (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the command sender.*/
      getSender (): obcCommandSender;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the command that the server will execute*/
      setCommand (message: string): void;
   }
   /**Thrown when a command throws an exception*/
   export class cdpeServerCommandException extends cdpeServerException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         command: obcCommand,
         commandSender: obcCommandSender,
         arguments: string[]
      );
      constructor (
         message: string,
         cause: jlThrowable,
         command: obcCommand,
         commandSender: obcCommandSender,
         arguments: string[]
      );
      constructor (cause: jlThrowable, command: obcCommand, commandSender: obcCommandSender, arguments: string[]);
      /**Gets the arguments which threw the exception for the command*/
      getArguments (): string[];
      /**Gets the command which threw the exception*/
      getCommand (): obcCommand;
      /**Gets the command sender which executed the command request*/
      getCommandSender (): obcCommandSender;
   }
   /**Miscellaneous server events*/
   export class obesServerEvent extends obeEvent {
      constructor ();
      constructor (isAsync: boolean);
   }
   /**Exception thrown when a server event listener throws an exception*/
   export class cdpeServerEventException extends cdpeServerPluginException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         responsiblePlugin: obpPlugin,
         listener: obeListener,
         event: obeEvent
      );
      constructor (
         message: string,
         cause: jlThrowable,
         responsiblePlugin: obpPlugin,
         listener: obeListener,
         event: obeEvent
      );
      constructor (cause: jlThrowable, responsiblePlugin: obpPlugin, listener: obeListener, event: obeEvent);
      /**Gets the event which caused the exception*/
      getEvent (): obeEvent;
      /**Gets the listener which threw the exception*/
      getListener (): obeListener;
   }
   /**Wrapper exception for all exceptions that are thrown by the server.*/
   export class cdpeServerException extends jlException {
      constructor (message: string);
      constructor (message: string, cause: jlThrowable);
      constructor (message: string, cause: jlThrowable, enableSuppression: boolean, writableStackTrace: boolean);
      constructor (cause: jlThrowable);
   }
   /**Called whenever an exception is thrown in a recoverable section of the server.*/
   export class cdpesServerExceptionEvent extends obeEvent {
      constructor (exception: cdpeServerException);
      /**Gets the wrapped exception that was thrown.*/
      getException (): cdpeServerException;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Thrown when the internal server throws a recoverable exception.*/
   export class cdpeServerInternalException extends cdpeServerException {
      constructor (message: string);
      constructor (message: string, cause: jlThrowable);
      constructor (message: string, cause: jlThrowable, enableSuppression: boolean, writableStackTrace: boolean);
      constructor (cause: jlThrowable);
      static reportInternalException (cause: jlThrowable): void;
   }
   /**Called when a server list ping is coming in. Displayed players can be  checked and removed by iterating over this event.*/
   export class obesServerListPingEvent extends obesServerEvent implements jlIterable<obePlayer> {
      constructor (address: jnInetAddress, motd: string, maxPlayers: number);
      constructor (address: jnInetAddress, motd: string, numPlayers: number, maxPlayers: number);
      /**Get the address the ping is coming from.*/
      getAddress (): jnInetAddress;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the maximum number of players sent.*/
      getMaxPlayers (): number;
      /**Get the message of the day message.*/
      getMotd (): string;
      /**Get the number of players sent.*/
      getNumPlayers (): number;
      iterator (): juIterator<obePlayer>;
      /**Set the maximum number of players sent.*/
      setMaxPlayers (maxPlayers: number): void;
      /**Change the message of the day message.*/
      setMotd (motd: string): void;
      /**Sets the server-icon sent to the client.*/
      setServerIcon (icon: obuCachedServerIcon): void;
   }
   /**This event is called when either the server startup or reload has completed.*/
   export class obesServerLoadEvent extends obesServerEvent {
      constructor (type: obesSLoadType);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the context in which the server was loaded.*/
      getType (): obesSLoadType;
   }
   /**Represents the context in which the enclosing event has been completed.*/
   export class obesSLoadType extends jlEnum<obesSLoadType> {
      static RELOAD: obesSLoadType;
      static STARTUP: obesSLoadType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obesSLoadType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obesSLoadType[];
   }
   /**Represents an object that may become a server operator, such as a Player*/
   export interface obpServerOperator {
      /**Checks if this object is a server operator*/
      isOp(): boolean;
      /**Sets the operator status of this object*/
      setOp(value: boolean): void;
   }
   /**Thrown whenever there is an exception with any enabling or disabling of plugins.*/
   export class cdpeServerPluginEnableDisableException extends cdpeServerPluginException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         responsiblePlugin: obpPlugin
      );
      constructor (message: string, cause: jlThrowable, responsiblePlugin: obpPlugin);
      constructor (cause: jlThrowable, responsiblePlugin: obpPlugin);
   }
   /**Wrapper exception for all cases to which a plugin can be immediately blamed for*/
   export class cdpeServerPluginException extends cdpeServerException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         responsiblePlugin: obpPlugin
      );
      constructor (message: string, cause: jlThrowable, responsiblePlugin: obpPlugin);
      constructor (cause: jlThrowable, responsiblePlugin: obpPlugin);
      /**Gets the plugin which is directly responsible for the exception being thrown*/
      getResponsiblePlugin (): obpPlugin;
   }
   /**Thrown when an incoming plugin message channel throws an exception*/
   export class cdpeServerPluginMessageException extends cdpeServerPluginException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         responsiblePlugin: obpPlugin,
         player: obePlayer,
         channel: string,
         data: number[]
      );
      constructor (
         message: string,
         cause: jlThrowable,
         responsiblePlugin: obpPlugin,
         player: obePlayer,
         channel: string,
         data: number[]
      );
      constructor (cause: jlThrowable, responsiblePlugin: obpPlugin, player: obePlayer, channel: string, data: number[]);
      /**Gets the channel to which the error occurred from recieving data from*/
      getChannel (): string;
      /**Gets the data to which the error occurred from*/
      getData (): number[];
      /**Gets the player which the plugin message causing the exception originated from*/
      getPlayer (): obePlayer;
   }
   /**Called when resources such as datapacks are reloaded (e.g. \/minecraft:reload)        Intended for use to re-register custom recipes, advancements that may be lost during a reload like this.*/
   export class ippesServerResourcesReloadedEvent extends obesServerEvent {
      constructor (cause: ippesSCause);
      /**Gets the cause of the resource reload.*/
      getCause (): ippesSCause;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   export class ippesSCause extends jlEnum<ippesSCause> {
      static COMMAND: ippesSCause;
      static PLUGIN: ippesSCause;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): ippesSCause;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): ippesSCause[];
   }
   /**Thrown when a plugin's scheduler fails with an exception*/
   export class cdpeServerSchedulerException extends cdpeServerPluginException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         task: obsBukkitTask
      );
      constructor (message: string, cause: jlThrowable, task: obsBukkitTask);
      constructor (cause: jlThrowable, task: obsBukkitTask);
      /**Gets the task which threw the exception*/
      getTask (): obsBukkitTask;
   }
   /**Called when a tab-complete request throws an exception*/
   export class cdpeServerTabCompleteException extends cdpeServerCommandException {
      constructor (
         message: string,
         cause: jlThrowable,
         enableSuppression: boolean,
         writableStackTrace: boolean,
         command: obcCommand,
         commandSender: obcCommandSender,
         arguments: string[]
      );
      constructor (
         message: string,
         cause: jlThrowable,
         command: obcCommand,
         commandSender: obcCommandSender,
         arguments: string[]
      );
      constructor (cause: jlThrowable, command: obcCommand, commandSender: obcCommandSender, arguments: string[]);
   }
   /**Called when the server has finished ticking the main loop*/
   export class cdpesServerTickEndEvent extends obeEvent {
      constructor (tickNumber: number, tickDuration: number, timeRemaining: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getTickDuration (): number;
      getTickNumber (): number;
      /**Amount of nanoseconds remaining before the next tick should start.*/
      getTimeRemaining (): number;
   }
   export class cdpesServerTickStartEvent extends obeEvent {
      constructor (tickNumber: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getTickNumber (): number;
   }
   /**An event relating to a registered service. This is called in a ServicesManager*/
   export class obesServiceEvent extends obesServerEvent {
      constructor (provider: obpRegisteredServiceProvider<any>);
      getProvider (): obpRegisteredServiceProvider<any>;
   }
   /**Represents various priorities of a provider.*/
   export class obpServicePriority extends jlEnum<obpServicePriority> {
      static High: obpServicePriority;
      static Highest: obpServicePriority;
      static Low: obpServicePriority;
      static Lowest: obpServicePriority;
      static Normal: obpServicePriority;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obpServicePriority;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obpServicePriority[];
   }
   /**This event is called when a service is registered.    Warning: The order in which register and unregister events are called  should not be relied upon.*/
   export class obesServiceRegisterEvent extends obesServiceEvent {
      constructor (registeredProvider: obpRegisteredServiceProvider<any>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Manages services and service providers. Services are an interface  specifying a list of methods that a provider must implement. Providers are  implementations of these services. A provider can be queried from the  services manager in order to use a service (if one is available). If  multiple plugins register a service, then the service with the highest  priority takes precedence.*/
   export interface obpServicesManager {
      /**Get a list of known services.*/
      getKnownServices(): juCollection<jlClass<any>>;
      /**Queries for a provider registration.*/
      getRegistration<T>(service: jlClass<T>): obpRegisteredServiceProvider<T>;
      /**Get registrations of providers for a service.*/
      getRegistrations<T>(service: jlClass<T>): juCollection<obpRegisteredServiceProvider<T>>;
      /**Get registrations of providers for a plugin.*/
      getRegistrations(plugin: obpPlugin): juList<obpRegisteredServiceProvider<any>>;
      /**Returns whether a provider has been registered for a service.*/
      isProvidedFor<T>(service: jlClass<T>): boolean;
      /**Queries for a provider.*/
      load<T>(service: jlClass<T>): T;
      /**Register a provider of a service.*/
      register<T>(service: jlClass<T>, provider: T, plugin: obpPlugin, priority: obpServicePriority): void;
      /**Unregister a particular provider for a particular service.*/
      unregister(service: jlClass<any>, provider: jlObject): void;
      /**Unregister a particular provider.*/
      unregister(provider: jlObject): void;
      /**Unregister all the providers registered by a particular plugin.*/
      unregisterAll(plugin: obpPlugin): void;
   }
   /**This event is called when a service is unregistered.    Warning: The order in which register and unregister events are called  should not be relied upon.*/
   export class obesServiceUnregisterEvent extends obesServiceEvent {
      constructor (serviceProvider: obpRegisteredServiceProvider<any>);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents a shaped (ie normal) crafting recipe.*/
   export class obiShapedRecipe extends jlObject implements obiRecipe, obKeyed {
      constructor (result: obiItemStack);
      constructor (key: obNamespacedKey, result: obiItemStack);
      getChoiceMap (): juMap<jlCharacter, obiRecipeChoice>;
      /**Get the group of this recipe.*/
      getGroup (): string;
      /**Get a copy of the ingredients map.*/
      getIngredientMap (): juMap<jlCharacter, obiItemStack>;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the result.*/
      getResult (): obiItemStack;
      /**Get the shape.*/
      getShape (): string[];
      /**Set the group of this recipe.*/
      setGroup (group: string): void;
      setIngredient (key: string, item: obiItemStack): obiShapedRecipe;
      setIngredient (key: string, ingredient: obiRecipeChoice): obiShapedRecipe;
      /**Sets the material that a character in the recipe shape refers to.*/
      setIngredient (key: string, ingredient: obMaterial): obiShapedRecipe;
      /**Sets the material that a character in the recipe shape refers to.*/
      setIngredient (key: string, ingredient: obmMaterialData): obiShapedRecipe;
      /**Set the shape of this recipe to the specified rows.*/
      shape (...shape: string[]): obiShapedRecipe;
   }
   /**Represents a shapeless recipe, where the arrangement of the ingredients on  the crafting grid does not matter.*/
   export class obiShapelessRecipe extends jlObject implements obiRecipe, obKeyed {
      constructor (result: obiItemStack);
      constructor (key: obNamespacedKey, result: obiItemStack);
      addIngredient (count: number, item: obiItemStack): obiShapelessRecipe;
      /**Adds multiples of the specified ingredient.*/
      addIngredient (count: number, ingredient: obMaterial): obiShapelessRecipe;
      /**Adds multiples of the specified ingredient.*/
      addIngredient (count: number, ingredient: obmMaterialData): obiShapelessRecipe;
      addIngredient (item: obiItemStack): obiShapelessRecipe;
      addIngredient (ingredient: obiRecipeChoice): obiShapelessRecipe;
      /**Adds the specified ingredient.*/
      addIngredient (ingredient: obMaterial): obiShapelessRecipe;
      /**Adds the specified ingredient.*/
      addIngredient (ingredient: obmMaterialData): obiShapelessRecipe;
      getChoiceList (): juList<obiRecipeChoice>;
      /**Get the group of this recipe.*/
      getGroup (): string;
      /**Get the list of ingredients used for this recipe.*/
      getIngredientList (): juList<obiItemStack>;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the result of this recipe.*/
      getResult (): obiItemStack;
      removeIngredient (count: number, item: obiItemStack): obiShapelessRecipe;
      /**Removes multiple instances of an ingredient from the list.*/
      removeIngredient (count: number, ingredient: obMaterial): obiShapelessRecipe;
      /**Removes multiple instances of an ingredient from the list.*/
      removeIngredient (count: number, ingredient: obmMaterialData): obiShapelessRecipe;
      removeIngredient (item: obiItemStack): obiShapelessRecipe;
      /**Removes an ingredient from the list.*/
      removeIngredient (ingredient: obiRecipeChoice): obiShapelessRecipe;
      /**Removes an ingredient from the list.*/
      removeIngredient (ingredient: obMaterial): obiShapelessRecipe;
      /**Removes an ingredient from the list.*/
      removeIngredient (ingredient: obmMaterialData): obiShapelessRecipe;
      /**Set the group of this recipe.*/
      setGroup (group: string): void;
   }
   /**Represents a Sheep.*/
   export interface obeSheep extends obeAnimals, obmColorable {
      isSheared(): boolean;
      setSheared(flag: boolean): void;
   }
   /**Called when a sheep's wool is dyed*/
   export class obeeSheepDyeWoolEvent extends obeeEntityEvent implements obeCancellable {
      constructor (sheep: obeSheep, color: obDyeColor);
      /**Gets the DyeColor the sheep is being dyed*/
      getColor (): obDyeColor;
      /**Returns the Entity involved in this event*/
      getEntity (): obeSheep;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the DyeColor the sheep is being dyed*/
      setColor (color: obDyeColor): void;
   }
   /**Called when a sheep regrows its wool*/
   export class obeeSheepRegrowWoolEvent extends obeeEntityEvent implements obeCancellable {
      constructor (sheep: obeSheep);
      /**Returns the Entity involved in this event*/
      getEntity (): obeSheep;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export interface obeShulker extends obeGolem, obmColorable {}
   /**Represents a captured state of a ShulkerBox.*/
   export interface obbShulkerBox extends obbContainer, cdplLootableBlockInventory, obbLidded {
      /**Get the DyeColor corresponding to this ShulkerBox*/
      getColor(): obDyeColor;
   }
   export interface obeShulkerBullet extends obeProjectile {
      /**Retrieve the target of this bullet.*/
      getTarget(): obeEntity;
      /**Sets the target of this bullet*/
      setTarget(target: obeEntity): void;
   }
   export interface obbdtSign extends obbdRotatable, obbdWaterlogged {}
   /**Represents a captured state of either a SignPost or a WallSign.*/
   export interface obbSign extends obbTileState, obmColorable {
      /**Gets the line of text at the specified index.*/
      getLine(index: number): string;
      /**Gets all the lines of text currently on this sign.*/
      getLines(): string[];
      /**Marks whether this sign can be edited by players.*/
      isEditable(): boolean;
      /**Marks whether this sign can be edited by players.*/
      setEditable(editable: boolean): void;
      /**Sets the line of text at the specified index.*/
      setLine(index: number, line: string): void;
   }
   /**Called when a sign is changed by a player.    If a Sign Change event is cancelled, the sign will not be changed.*/
   export class obebSignChangeEvent extends obebBlockEvent implements obeCancellable {
      constructor (theBlock: obbBlock, thePlayer: obePlayer, theLines: string[]);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets a single line of text from the sign involved in this event.*/
      getLine (index: number): string;
      /**Gets all of the lines of text from the sign involved in this event.*/
      getLines (): string[];
      /**Gets the player changing the sign involved in this event.*/
      getPlayer (): obePlayer;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets a single line for the sign involved in this event*/
      setLine (index: number, line: string): void;
   }
   /**Represents a Silverfish.*/
   export interface obeSilverfish extends obeMonster {}
   export class obcSimpleCommandMap extends jlObject implements obcCommandMap {
      constructor (server: obServer);
      /**Clears all registered commands.*/
      clearCommands (): void;
      /**Looks for the requested command and executes it if found.*/
      dispatch (sender: obcCommandSender, commandLine: string): boolean;
      /**Gets the command registered to the specified name*/
      getCommand (name: string): obcCommand;
      getCommands (): juCollection<obcCommand>;
      /**Return a Map of known commands*/
      getKnownCommands (): juMap<string, obcCommand>;
      /**Registers a command.*/
      register (label: string, fallbackPrefix: string, command: obcCommand): boolean;
      /**Registers a command.*/
      register (fallbackPrefix: string, command: obcCommand): boolean;
      /**Registers all the commands belonging to a certain plugin.*/
      registerAll (fallbackPrefix: string, commands: juList<obcCommand>): void;
      registerServerAliases (): void;
      setFallbackCommands (): void;
      /**Looks for the requested command and executes an appropriate  tab-completer if found.*/
      tabComplete (sender: obcCommandSender, cmdLine: string): juList<string>;
      /**Looks for the requested command and executes an appropriate  tab-completer if found.*/
      tabComplete (sender: obcCommandSender, cmdLine: string, location: obLocation): juList<string>;
   }
   /**Handles all plugin management from the Server*/
   export class obpSimplePluginManager extends jlObject implements obpPluginManager {
      constructor (instance: obServer, commandMap: obcSimpleCommandMap);
      /**Adds a Permission to this plugin manager.*/
      addPermission (perm: obpPermission): void;
      /**Calls an event with the given details.*/
      callEvent (event: obeEvent): void;
      clearPermissions (): void;
      /**Disables and removes all plugins*/
      clearPlugins (): void;
      /**Disables the specified plugin*/
      disablePlugin (plugin: obpPlugin): void;
      /**Disables the specified plugin*/
      disablePlugin (plugin: obpPlugin, closeClassloader: boolean): void;
      /**Disables all the loaded plugins*/
      disablePlugins (): void;
      disablePlugins (closeClassloaders: boolean): void;
      /**Enables the specified plugin*/
      enablePlugin (plugin: obpPlugin): void;
      /**Gets the default permissions for the given op status*/
      getDefaultPermissions (op: boolean): juSet<obpPermission>;
      /**Gets a set containing all subscribed Permissibles to the given  default list, by op status*/
      getDefaultPermSubscriptions (op: boolean): juSet<obpPermissible>;
      /**Gets a Permission from its fully qualified name*/
      getPermission (name: string): obpPermission;
      /**Gets a set of all registered permissions.*/
      getPermissions (): juSet<obpPermission>;
      /**Gets a set containing all subscribed Permissibles to the given  permission, by name*/
      getPermissionSubscriptions (permission: string): juSet<obpPermissible>;
      /**Checks if the given plugin is loaded and returns it when applicable*/
      getPlugin (name: string): obpPlugin;
      /**Gets a list of all currently loaded plugins*/
      getPlugins (): obpPlugin[];
      /**Checks if the given plugin is enabled or not*/
      isPluginEnabled (name: string): boolean;
      /**Checks if the given plugin is enabled or not*/
      isPluginEnabled (plugin: obpPlugin): boolean;
      isTransitiveDepend (plugin: obpPluginDescriptionFile, depend: obpPluginDescriptionFile): boolean;
      /**Loads the plugin in the specified file*/
      loadPlugin (file: jiFile): obpPlugin;
      /**Loads the plugins contained within the specified directory*/
      loadPlugins (directory: jiFile): obpPlugin[];
      /**Recalculates the defaults for the given Permission.*/
      recalculatePermissionDefaults (perm: obpPermission): void;
      /**Registers the specified executor to the given event class*/
      registerEvent (
         event: jlClass<obeEvent>,
         listener: obeListener,
         priority: obeEventPriority,
         executor: obpEventExecutor,
         plugin: obpPlugin
      ): void;
      /**Registers the given event to the specified listener using a directly  passed EventExecutor*/
      registerEvent (
         event: jlClass<obeEvent>,
         listener: obeListener,
         priority: obeEventPriority,
         executor: obpEventExecutor,
         plugin: obpPlugin,
         ignoreCancelled: boolean
      ): void;
      /**Registers all the events in the given listener class*/
      registerEvents (listener: obeListener, plugin: obpPlugin): void;
      /**Registers the specified plugin loader*/
      registerInterface (loader: jlClass<obpPluginLoader>): void;
      /**Removes a Permission registration from this plugin manager.*/
      removePermission (name: string): void;
      /**Removes a Permission registration from this plugin manager.*/
      removePermission (perm: obpPermission): void;
      /**Subscribes to the given Default permissions by operator status*/
      subscribeToDefaultPerms (op: boolean, permissible: obpPermissible): void;
      /**Subscribes the given Permissible for information about the requested  Permission, by name.*/
      subscribeToPermission (permission: string, permissible: obpPermissible): void;
      /**Unsubscribes from the given Default permissions by operator status*/
      unsubscribeFromDefaultPerms (op: boolean, permissible: obpPermissible): void;
      /**Unsubscribes the given Permissible for information about the requested  Permission, by name.*/
      unsubscribeFromPermission (permission: string, permissible: obpPermissible): void;
      /**Returns whether or not timing code should be used for event calls*/
      useTimings (): boolean;
      /**Sets whether or not per event timing code should be used*/
      useTimings (use: boolean): void;
   }
   /**A simple services manager.*/
   export class obpSimpleServicesManager extends jlObject implements obpServicesManager {
      constructor ();
      /**Get a list of known services.*/
      getKnownServices (): juSet<jlClass<any>>;
      /**Queries for a provider registration.*/
      getRegistration<T> (service: jlClass<T>): obpRegisteredServiceProvider<T>;
      /**Get registrations of providers for a service.*/
      getRegistrations<T> (service: jlClass<T>): juList<obpRegisteredServiceProvider<T>>;
      /**Get registrations of providers for a plugin.*/
      getRegistrations (plugin: obpPlugin): juList<obpRegisteredServiceProvider<any>>;
      /**Returns whether a provider has been registered for a service.*/
      isProvidedFor<T> (service: jlClass<T>): boolean;
      /**Queries for a provider.*/
      load<T> (service: jlClass<T>): T;
      /**Register a provider of a service.*/
      register<T> (service: jlClass<T>, provider: T, plugin: obpPlugin, priority: obpServicePriority): void;
      /**Unregister a particular provider for a particular service.*/
      unregister (service: jlClass<any>, provider: jlObject): void;
      /**Unregister a particular provider.*/
      unregister (provider: jlObject): void;
      /**Unregister all the providers registered by a particular plugin.*/
      unregisterAll (plugin: obpPlugin): void;
   }
   /**Generates simplex-based noise.    This is a modified version of the freely published version in the paper by  Stefan Gustavson at    http:\/\/staffwww.itn.liu.se\/~stegu\/simplexnoise\/simplexnoise.pdf*/
   export class obunSimplexNoiseGenerator extends obunPerlinNoiseGenerator {
      constructor ();
      constructor (seed: number);
      constructor (rand: juRandom);
      constructor (world: obWorld);
      static dot (g: number[], x: number, y: number): number;
      static dot (g: number[], x: number, y: number, z: number): number;
      static dot (g: number[], x: number, y: number, z: number, w: number): number;
      /**Gets the singleton unseeded instance of this generator*/
      static getInstance (): obunSimplexNoiseGenerator;
      /**Computes and returns the 1D unseeded simplex noise for the given  coordinates in 1D space*/
      static getNoise (xin: number): number;
      /**Computes and returns the 2D unseeded simplex noise for the given  coordinates in 2D space*/
      static getNoise (xin: number, yin: number): number;
      /**Computes and returns the 3D unseeded simplex noise for the given  coordinates in 3D space*/
      static getNoise (xin: number, yin: number, zin: number): number;
      /**Computes and returns the 4D simplex noise for the given coordinates in  4D space*/
      static getNoise (x: number, y: number, z: number, w: number): number;
      /**Computes and returns the 2D noise for the given coordinates in 2D space*/
      noise (xin: number, yin: number): number;
      /**Computes and returns the 3D noise for the given coordinates in 3D space*/
      noise (xin: number, yin: number, zin: number): number;
      /**Computes and returns the 4D simplex noise for the given coordinates in  4D space*/
      noise (x: number, y: number, z: number, w: number): number;
   }
   /**Creates simplex noise through unbiased octaves*/
   export class obunSimplexOctaveGenerator extends obunOctaveGenerator {
      constructor (seed: number, octaves: number);
      constructor (rand: juRandom, octaves: number);
      constructor (world: obWorld, octaves: number);
      /**Gets the scale used for each W-coordinates passed*/
      getWScale (): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (x: number, y: number, z: number, w: number, frequency: number, amplitude: number): number;
      /**Generates noise for the 3D coordinates using the specified number of  octaves and parameters*/
      noise (
         x: number,
         y: number,
         z: number,
         w: number,
         frequency: number,
         amplitude: number,
         normalized: boolean
      ): number;
      /**Sets the scale used for all coordinates passed to this generator.*/
      setScale (scale: number): void;
      /**Sets the scale used for each W-coordinates passed*/
      setWScale (scale: number): void;
   }
   /**An animal that can sit still.*/
   export interface obeSittable {
      /**Checks if this animal is sitting*/
      isSitting(): boolean;
      /**Sets if this animal is sitting.*/
      setSitting(sitting: boolean): void;
   }
   /**Represents a sized fireball.*/
   export interface obeSizedFireball extends obeFireball {
      /**Gets the display ItemStack.*/
      getDisplayItem(): obiItemStack;
      /**Sets the display ItemStack for the fireball.*/
      setDisplayItem(item: obiItemStack): void;
   }
   /**Represents a Skeleton.*/
   export interface obeSkeleton extends obeMonster, cdpeRangedEntity {}
   /**Represents a SkeletonHorse - variant of AbstractHorse.*/
   export interface obeSkeletonHorse extends obeAbstractHorse {
      getTrapTime(): number;
      isTrap(): boolean;
      setTrap(trap: boolean): void;
   }
   /**Event called when a player gets close to a skeleton horse and triggers the lightning trap*/
   export class cdpeeSkeletonHorseTrapEvent extends obeeEntityEvent implements obeCancellable {
      constructor (horse: obeSkeletonHorse);
      constructor (horse: obeSkeletonHorse, eligibleHumans: juList<obeHumanEntity>);
      getEligibleHumans (): juList<obeHumanEntity>;
      /**Returns the Entity involved in this event*/
      getEntity (): obeSkeletonHorse;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   export interface cdpSkinParts {
      getRaw(): number;
      hasCapeEnabled(): boolean;
      hasHatsEnabled(): boolean;
      hasJacketEnabled(): boolean;
      hasLeftPantsEnabled(): boolean;
      hasLeftSleeveEnabled(): boolean;
      hasRightPantsEnabled(): boolean;
      hasRightSleeveEnabled(): boolean;
   }
   /**Represents a captured state of a skull block.*/
   export interface obbSkull extends obbTileState {
      /**Get the player which owns the skull.*/
      getOwningPlayer(): obOfflinePlayer;
      /**If the skull has an owner, per hasOwner(), return the owners PlayerProfile*/
      getPlayerProfile(): cdppPlayerProfile;
      /**Checks to see if the skull has an owner*/
      hasOwner(): boolean;
      /**Set the player which owns the skull.*/
      setOwningPlayer(player: obOfflinePlayer): void;
      /**Sets this skull to use the supplied Player Profile, which can include textures already prefilled.*/
      setPlayerProfile(profile: cdppPlayerProfile): void;
   }
   /**Represents a skull that can have an owner.*/
   export interface obimSkullMeta extends obimItemMeta {
      clone(): obimSkullMeta;
      /**Gets the owner of the skull.*/
      getOwningPlayer(): obOfflinePlayer;
      /**If the skull has an owner, per hasOwner(), return the owners PlayerProfile*/
      getPlayerProfile(): cdppPlayerProfile;
      /**Checks to see if the skull has an owner.*/
      hasOwner(): boolean;
      /**Sets the owner of the skull.*/
      setOwningPlayer(owner: obOfflinePlayer): boolean;
      /**Sets this skull to use the supplied Player Profile, which can include textures already prefilled.*/
      setPlayerProfile(profile: cdppPlayerProfile): void;
   }
   /**'type' represents what state the slab is in - either top, bottom, or a double  slab occupying the full block.*/
   export interface obbdtSlab extends obbdWaterlogged {
      /**Gets the value of the 'type' property.*/
      getType(): obbdtSType;
      /**Sets the value of the 'type' property.*/
      setType(type: obbdtSType): void;
   }
   /**The type of the slab.*/
   export class obbdtSType extends jlEnum<obbdtSType> {
      /**The slab occupies the lower y half of the block.*/
      static BOTTOM: obbdtSType;
      /**The slab occupies the entire block.*/
      static DOUBLE: obbdtSType;
      /**The slab occupies the upper y half of the block.*/
      static TOP: obbdtSType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtSType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtSType[];
   }
   /**Represents a Slime.*/
   export interface obeSlime extends obeMob {
      /**Get whether this slime can randomly wander\/jump around on its own*/
      canWander(): boolean;
      getSize(): number;
      setSize(sz: number): void;
      /**Set whether this slime can randomly wander\/jump around on its own*/
      setWander(canWander: boolean): void;
   }
   /**Fired when a Slime decides to change it's facing direction.    This event does not fire for the entity's actual movement. Only when it  is choosing to change direction.*/
   export class cdpeeSlimeChangeDirectionEvent extends cdpeeSlimePathfindEvent implements obeCancellable {
      constructor (slime: obeSlime, yaw: number);
      /**Get the new chosen yaw*/
      getNewYaw (): number;
      /**Set the new chosen yaw*/
      setNewYaw (yaw: number): void;
   }
   /**Fired when a Slime decides to start pathfinding.    This event does not fire for the entity's actual movement. Only when it  is choosing to start moving.*/
   export class cdpeeSlimePathfindEvent extends obeeEntityEvent implements obeCancellable {
      constructor (slime: obeSlime);
      /**The Slime that is pathfinding.*/
      getEntity (): obeSlime;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called when a Slime splits into smaller Slimes upon death*/
   export class obeeSlimeSplitEvent extends obeeEntityEvent implements obeCancellable {
      constructor (slime: obeSlime, count: number);
      /**Gets the amount of smaller slimes to spawn*/
      getCount (): number;
      /**Returns the Entity involved in this event*/
      getEntity (): obeSlime;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets how many smaller slimes will spawn on the split*/
      setCount (count: number): void;
   }
   /**Fired when a Slime decides to start jumping while swimming in water\/lava.    This event does not fire for the entity's actual movement. Only when it  is choosing to start jumping.*/
   export class cdpeeSlimeSwimEvent extends cdpeeSlimeWanderEvent implements obeCancellable {
      constructor (slime: obeSlime);
   }
   /**Fired when a Slime decides to change direction to target a LivingEntity.    This event does not fire for the entity's actual movement. Only when it  is choosing to start moving.*/
   export class cdpeeSlimeTargetLivingEntityEvent extends cdpeeSlimePathfindEvent implements obeCancellable {
      constructor (slime: obeSlime, target: obeLivingEntity);
      /**Get the targeted entity*/
      getTarget (): obeLivingEntity;
   }
   /**Fired when a Slime decides to start wandering.    This event does not fire for the entity's actual movement. Only when it  is choosing to start moving.*/
   export class cdpeeSlimeWanderEvent extends cdpeeSlimePathfindEvent implements obeCancellable {
      constructor (slime: obeSlime);
   }
   /**Represents a small Fireball*/
   export interface obeSmallFireball extends obeSizedFireball {}
   /**Interface to the inventory of a Smithing table.*/
   export interface obiSmithingInventory extends obiInventory {
      /**Gets the input equipment (first slot).*/
      getInputEquipment(): obiItemStack;
      /**Gets the input mineral (second slot).*/
      getInputMineral(): obiItemStack;
      /**Gets the result item.*/
      getResult(): obiItemStack;
      /**Sets the input equipment (first slot).*/
      setInputEquipment(itemStack: obiItemStack): void;
      /**Sets the input mineral (second slot).*/
      setInputMineral(itemStack: obiItemStack): void;
      /**Sets the result item.*/
      setResult(itemStack: obiItemStack): void;
   }
   /**Represents a smithing recipe.*/
   export class obiSmithingRecipe extends jlObject implements obiRecipe, obKeyed {
      constructor (key: obNamespacedKey, result: obiItemStack, base: obiRecipeChoice, addition: obiRecipeChoice);
      /**Get the addition recipe item.*/
      getAddition (): obiRecipeChoice;
      /**Get the base recipe item.*/
      getBase (): obiRecipeChoice;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the result of this recipe.*/
      getResult (): obiItemStack;
   }
   /**Represents a captured state of a smoker.*/
   export interface obbSmoker extends obbFurnace {}
   /**Represents a campfire recipe.*/
   export class obiSmokingRecipe extends obiCookingRecipe<obiSmokingRecipe> {
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         input: obiRecipeChoice,
         experience: number,
         cookingTime: number
      );
      constructor (
         key: obNamespacedKey,
         result: obiItemStack,
         source: obMaterial,
         experience: number,
         cookingTime: number
      );
   }
   export class cdpuSneakyThrow extends jlObject {
      constructor ();
      static sneaky (exception: jlThrowable): void;
   }
   /**'layers' represents the amount of layers of snow which are present in this  block.    May not be lower than getMinimumLayers() or higher than  getMaximumLayers().*/
   export interface obbdtSnow extends obbdBlockData {
      /**Gets the value of the 'layers' property.*/
      getLayers(): number;
      /**Gets the maximum allowed value of the 'layers' property.*/
      getMaximumLayers(): number;
      /**Gets the minimum allowed value of the 'layers' property.*/
      getMinimumLayers(): number;
      /**Sets the value of the 'layers' property.*/
      setLayers(layers: number): void;
   }
   /**'snowy' denotes whether this block has a snow covered side and top texture  (normally because the block above is snow).*/
   export interface obbdSnowable extends obbdBlockData {
      /**Gets the value of the 'snowy' property.*/
      isSnowy(): boolean;
      /**Sets the value of the 'snowy' property.*/
      setSnowy(snowy: boolean): void;
   }
   /**Represents a snowball.*/
   export interface obeSnowball extends obeThrowableProjectile {}
   /**Represents a snowman entity*/
   export interface obeSnowman extends obeGolem, cdpeRangedEntity {
      /**Gets whether this snowman is in "derp mode", meaning it is not wearing a  pumpkin.*/
      isDerp(): boolean;
      /**Sets whether this snowman is in "derp mode", meaning it is not wearing a  pumpkin.*/
      setDerp(derpMode: boolean): void;
   }
   /**An Enum of Sounds the server is able to send to players.    WARNING: At any time, sounds may be added\/removed from this Enum or even  MineCraft itself! There is no guarantee the sounds will play. There is no  guarantee values will not be removed from this Enum. As such, you should not  depend on the ordinal values of this class.*/
   export class obSound extends jlEnum<obSound> implements obKeyed {
      static AMBIENT_BASALT_DELTAS_ADDITIONS: obSound;
      static AMBIENT_BASALT_DELTAS_LOOP: obSound;
      static AMBIENT_BASALT_DELTAS_MOOD: obSound;
      static AMBIENT_CAVE: obSound;
      static AMBIENT_CRIMSON_FOREST_ADDITIONS: obSound;
      static AMBIENT_CRIMSON_FOREST_LOOP: obSound;
      static AMBIENT_CRIMSON_FOREST_MOOD: obSound;
      static AMBIENT_NETHER_WASTES_ADDITIONS: obSound;
      static AMBIENT_NETHER_WASTES_LOOP: obSound;
      static AMBIENT_NETHER_WASTES_MOOD: obSound;
      static AMBIENT_SOUL_SAND_VALLEY_ADDITIONS: obSound;
      static AMBIENT_SOUL_SAND_VALLEY_LOOP: obSound;
      static AMBIENT_SOUL_SAND_VALLEY_MOOD: obSound;
      static AMBIENT_UNDERWATER_ENTER: obSound;
      static AMBIENT_UNDERWATER_EXIT: obSound;
      static AMBIENT_UNDERWATER_LOOP: obSound;
      static AMBIENT_UNDERWATER_LOOP_ADDITIONS: obSound;
      static AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE: obSound;
      static AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE: obSound;
      static AMBIENT_WARPED_FOREST_ADDITIONS: obSound;
      static AMBIENT_WARPED_FOREST_LOOP: obSound;
      static AMBIENT_WARPED_FOREST_MOOD: obSound;
      static BLOCK_ANCIENT_DEBRIS_BREAK: obSound;
      static BLOCK_ANCIENT_DEBRIS_FALL: obSound;
      static BLOCK_ANCIENT_DEBRIS_HIT: obSound;
      static BLOCK_ANCIENT_DEBRIS_PLACE: obSound;
      static BLOCK_ANCIENT_DEBRIS_STEP: obSound;
      static BLOCK_ANVIL_BREAK: obSound;
      static BLOCK_ANVIL_DESTROY: obSound;
      static BLOCK_ANVIL_FALL: obSound;
      static BLOCK_ANVIL_HIT: obSound;
      static BLOCK_ANVIL_LAND: obSound;
      static BLOCK_ANVIL_PLACE: obSound;
      static BLOCK_ANVIL_STEP: obSound;
      static BLOCK_ANVIL_USE: obSound;
      static BLOCK_BAMBOO_BREAK: obSound;
      static BLOCK_BAMBOO_FALL: obSound;
      static BLOCK_BAMBOO_HIT: obSound;
      static BLOCK_BAMBOO_PLACE: obSound;
      static BLOCK_BAMBOO_SAPLING_BREAK: obSound;
      static BLOCK_BAMBOO_SAPLING_HIT: obSound;
      static BLOCK_BAMBOO_SAPLING_PLACE: obSound;
      static BLOCK_BAMBOO_STEP: obSound;
      static BLOCK_BARREL_CLOSE: obSound;
      static BLOCK_BARREL_OPEN: obSound;
      static BLOCK_BASALT_BREAK: obSound;
      static BLOCK_BASALT_FALL: obSound;
      static BLOCK_BASALT_HIT: obSound;
      static BLOCK_BASALT_PLACE: obSound;
      static BLOCK_BASALT_STEP: obSound;
      static BLOCK_BEACON_ACTIVATE: obSound;
      static BLOCK_BEACON_AMBIENT: obSound;
      static BLOCK_BEACON_DEACTIVATE: obSound;
      static BLOCK_BEACON_POWER_SELECT: obSound;
      static BLOCK_BEEHIVE_DRIP: obSound;
      static BLOCK_BEEHIVE_ENTER: obSound;
      static BLOCK_BEEHIVE_EXIT: obSound;
      static BLOCK_BEEHIVE_SHEAR: obSound;
      static BLOCK_BEEHIVE_WORK: obSound;
      static BLOCK_BELL_RESONATE: obSound;
      static BLOCK_BELL_USE: obSound;
      static BLOCK_BLASTFURNACE_FIRE_CRACKLE: obSound;
      static BLOCK_BONE_BLOCK_BREAK: obSound;
      static BLOCK_BONE_BLOCK_FALL: obSound;
      static BLOCK_BONE_BLOCK_HIT: obSound;
      static BLOCK_BONE_BLOCK_PLACE: obSound;
      static BLOCK_BONE_BLOCK_STEP: obSound;
      static BLOCK_BREWING_STAND_BREW: obSound;
      static BLOCK_BUBBLE_COLUMN_BUBBLE_POP: obSound;
      static BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT: obSound;
      static BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE: obSound;
      static BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT: obSound;
      static BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE: obSound;
      static BLOCK_CAMPFIRE_CRACKLE: obSound;
      static BLOCK_CHAIN_BREAK: obSound;
      static BLOCK_CHAIN_FALL: obSound;
      static BLOCK_CHAIN_HIT: obSound;
      static BLOCK_CHAIN_PLACE: obSound;
      static BLOCK_CHAIN_STEP: obSound;
      static BLOCK_CHEST_CLOSE: obSound;
      static BLOCK_CHEST_LOCKED: obSound;
      static BLOCK_CHEST_OPEN: obSound;
      static BLOCK_CHORUS_FLOWER_DEATH: obSound;
      static BLOCK_CHORUS_FLOWER_GROW: obSound;
      static BLOCK_COMPARATOR_CLICK: obSound;
      static BLOCK_COMPOSTER_EMPTY: obSound;
      static BLOCK_COMPOSTER_FILL: obSound;
      static BLOCK_COMPOSTER_FILL_SUCCESS: obSound;
      static BLOCK_COMPOSTER_READY: obSound;
      static BLOCK_CONDUIT_ACTIVATE: obSound;
      static BLOCK_CONDUIT_AMBIENT: obSound;
      static BLOCK_CONDUIT_AMBIENT_SHORT: obSound;
      static BLOCK_CONDUIT_ATTACK_TARGET: obSound;
      static BLOCK_CONDUIT_DEACTIVATE: obSound;
      static BLOCK_CORAL_BLOCK_BREAK: obSound;
      static BLOCK_CORAL_BLOCK_FALL: obSound;
      static BLOCK_CORAL_BLOCK_HIT: obSound;
      static BLOCK_CORAL_BLOCK_PLACE: obSound;
      static BLOCK_CORAL_BLOCK_STEP: obSound;
      static BLOCK_CROP_BREAK: obSound;
      static BLOCK_DISPENSER_DISPENSE: obSound;
      static BLOCK_DISPENSER_FAIL: obSound;
      static BLOCK_DISPENSER_LAUNCH: obSound;
      static BLOCK_ENCHANTMENT_TABLE_USE: obSound;
      static BLOCK_END_GATEWAY_SPAWN: obSound;
      static BLOCK_END_PORTAL_FRAME_FILL: obSound;
      static BLOCK_END_PORTAL_SPAWN: obSound;
      static BLOCK_ENDER_CHEST_CLOSE: obSound;
      static BLOCK_ENDER_CHEST_OPEN: obSound;
      static BLOCK_FENCE_GATE_CLOSE: obSound;
      static BLOCK_FENCE_GATE_OPEN: obSound;
      static BLOCK_FIRE_AMBIENT: obSound;
      static BLOCK_FIRE_EXTINGUISH: obSound;
      static BLOCK_FUNGUS_BREAK: obSound;
      static BLOCK_FUNGUS_FALL: obSound;
      static BLOCK_FUNGUS_HIT: obSound;
      static BLOCK_FUNGUS_PLACE: obSound;
      static BLOCK_FUNGUS_STEP: obSound;
      static BLOCK_FURNACE_FIRE_CRACKLE: obSound;
      static BLOCK_GILDED_BLACKSTONE_BREAK: obSound;
      static BLOCK_GILDED_BLACKSTONE_FALL: obSound;
      static BLOCK_GILDED_BLACKSTONE_HIT: obSound;
      static BLOCK_GILDED_BLACKSTONE_PLACE: obSound;
      static BLOCK_GILDED_BLACKSTONE_STEP: obSound;
      static BLOCK_GLASS_BREAK: obSound;
      static BLOCK_GLASS_FALL: obSound;
      static BLOCK_GLASS_HIT: obSound;
      static BLOCK_GLASS_PLACE: obSound;
      static BLOCK_GLASS_STEP: obSound;
      static BLOCK_GRASS_BREAK: obSound;
      static BLOCK_GRASS_FALL: obSound;
      static BLOCK_GRASS_HIT: obSound;
      static BLOCK_GRASS_PLACE: obSound;
      static BLOCK_GRASS_STEP: obSound;
      static BLOCK_GRAVEL_BREAK: obSound;
      static BLOCK_GRAVEL_FALL: obSound;
      static BLOCK_GRAVEL_HIT: obSound;
      static BLOCK_GRAVEL_PLACE: obSound;
      static BLOCK_GRAVEL_STEP: obSound;
      static BLOCK_GRINDSTONE_USE: obSound;
      static BLOCK_HONEY_BLOCK_BREAK: obSound;
      static BLOCK_HONEY_BLOCK_FALL: obSound;
      static BLOCK_HONEY_BLOCK_HIT: obSound;
      static BLOCK_HONEY_BLOCK_PLACE: obSound;
      static BLOCK_HONEY_BLOCK_SLIDE: obSound;
      static BLOCK_HONEY_BLOCK_STEP: obSound;
      static BLOCK_IRON_DOOR_CLOSE: obSound;
      static BLOCK_IRON_DOOR_OPEN: obSound;
      static BLOCK_IRON_TRAPDOOR_CLOSE: obSound;
      static BLOCK_IRON_TRAPDOOR_OPEN: obSound;
      static BLOCK_LADDER_BREAK: obSound;
      static BLOCK_LADDER_FALL: obSound;
      static BLOCK_LADDER_HIT: obSound;
      static BLOCK_LADDER_PLACE: obSound;
      static BLOCK_LADDER_STEP: obSound;
      static BLOCK_LANTERN_BREAK: obSound;
      static BLOCK_LANTERN_FALL: obSound;
      static BLOCK_LANTERN_HIT: obSound;
      static BLOCK_LANTERN_PLACE: obSound;
      static BLOCK_LANTERN_STEP: obSound;
      static BLOCK_LAVA_AMBIENT: obSound;
      static BLOCK_LAVA_EXTINGUISH: obSound;
      static BLOCK_LAVA_POP: obSound;
      static BLOCK_LEVER_CLICK: obSound;
      static BLOCK_LILY_PAD_PLACE: obSound;
      static BLOCK_LODESTONE_BREAK: obSound;
      static BLOCK_LODESTONE_FALL: obSound;
      static BLOCK_LODESTONE_HIT: obSound;
      static BLOCK_LODESTONE_PLACE: obSound;
      static BLOCK_LODESTONE_STEP: obSound;
      static BLOCK_METAL_BREAK: obSound;
      static BLOCK_METAL_FALL: obSound;
      static BLOCK_METAL_HIT: obSound;
      static BLOCK_METAL_PLACE: obSound;
      static BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF: obSound;
      static BLOCK_METAL_PRESSURE_PLATE_CLICK_ON: obSound;
      static BLOCK_METAL_STEP: obSound;
      static BLOCK_NETHER_BRICKS_BREAK: obSound;
      static BLOCK_NETHER_BRICKS_FALL: obSound;
      static BLOCK_NETHER_BRICKS_HIT: obSound;
      static BLOCK_NETHER_BRICKS_PLACE: obSound;
      static BLOCK_NETHER_BRICKS_STEP: obSound;
      static BLOCK_NETHER_GOLD_ORE_BREAK: obSound;
      static BLOCK_NETHER_GOLD_ORE_FALL: obSound;
      static BLOCK_NETHER_GOLD_ORE_HIT: obSound;
      static BLOCK_NETHER_GOLD_ORE_PLACE: obSound;
      static BLOCK_NETHER_GOLD_ORE_STEP: obSound;
      static BLOCK_NETHER_ORE_BREAK: obSound;
      static BLOCK_NETHER_ORE_FALL: obSound;
      static BLOCK_NETHER_ORE_HIT: obSound;
      static BLOCK_NETHER_ORE_PLACE: obSound;
      static BLOCK_NETHER_ORE_STEP: obSound;
      static BLOCK_NETHER_SPROUTS_BREAK: obSound;
      static BLOCK_NETHER_SPROUTS_FALL: obSound;
      static BLOCK_NETHER_SPROUTS_HIT: obSound;
      static BLOCK_NETHER_SPROUTS_PLACE: obSound;
      static BLOCK_NETHER_SPROUTS_STEP: obSound;
      static BLOCK_NETHER_WART_BREAK: obSound;
      static BLOCK_NETHERITE_BLOCK_BREAK: obSound;
      static BLOCK_NETHERITE_BLOCK_FALL: obSound;
      static BLOCK_NETHERITE_BLOCK_HIT: obSound;
      static BLOCK_NETHERITE_BLOCK_PLACE: obSound;
      static BLOCK_NETHERITE_BLOCK_STEP: obSound;
      static BLOCK_NETHERRACK_BREAK: obSound;
      static BLOCK_NETHERRACK_FALL: obSound;
      static BLOCK_NETHERRACK_HIT: obSound;
      static BLOCK_NETHERRACK_PLACE: obSound;
      static BLOCK_NETHERRACK_STEP: obSound;
      static BLOCK_NOTE_BLOCK_BANJO: obSound;
      static BLOCK_NOTE_BLOCK_BASEDRUM: obSound;
      static BLOCK_NOTE_BLOCK_BASS: obSound;
      static BLOCK_NOTE_BLOCK_BELL: obSound;
      static BLOCK_NOTE_BLOCK_BIT: obSound;
      static BLOCK_NOTE_BLOCK_CHIME: obSound;
      static BLOCK_NOTE_BLOCK_COW_BELL: obSound;
      static BLOCK_NOTE_BLOCK_DIDGERIDOO: obSound;
      static BLOCK_NOTE_BLOCK_FLUTE: obSound;
      static BLOCK_NOTE_BLOCK_GUITAR: obSound;
      static BLOCK_NOTE_BLOCK_HARP: obSound;
      static BLOCK_NOTE_BLOCK_HAT: obSound;
      static BLOCK_NOTE_BLOCK_IRON_XYLOPHONE: obSound;
      static BLOCK_NOTE_BLOCK_PLING: obSound;
      static BLOCK_NOTE_BLOCK_SNARE: obSound;
      static BLOCK_NOTE_BLOCK_XYLOPHONE: obSound;
      static BLOCK_NYLIUM_BREAK: obSound;
      static BLOCK_NYLIUM_FALL: obSound;
      static BLOCK_NYLIUM_HIT: obSound;
      static BLOCK_NYLIUM_PLACE: obSound;
      static BLOCK_NYLIUM_STEP: obSound;
      static BLOCK_PISTON_CONTRACT: obSound;
      static BLOCK_PISTON_EXTEND: obSound;
      static BLOCK_PORTAL_AMBIENT: obSound;
      static BLOCK_PORTAL_TRAVEL: obSound;
      static BLOCK_PORTAL_TRIGGER: obSound;
      static BLOCK_PUMPKIN_CARVE: obSound;
      static BLOCK_REDSTONE_TORCH_BURNOUT: obSound;
      static BLOCK_RESPAWN_ANCHOR_AMBIENT: obSound;
      static BLOCK_RESPAWN_ANCHOR_CHARGE: obSound;
      static BLOCK_RESPAWN_ANCHOR_DEPLETE: obSound;
      static BLOCK_RESPAWN_ANCHOR_SET_SPAWN: obSound;
      static BLOCK_ROOTS_BREAK: obSound;
      static BLOCK_ROOTS_FALL: obSound;
      static BLOCK_ROOTS_HIT: obSound;
      static BLOCK_ROOTS_PLACE: obSound;
      static BLOCK_ROOTS_STEP: obSound;
      static BLOCK_SAND_BREAK: obSound;
      static BLOCK_SAND_FALL: obSound;
      static BLOCK_SAND_HIT: obSound;
      static BLOCK_SAND_PLACE: obSound;
      static BLOCK_SAND_STEP: obSound;
      static BLOCK_SCAFFOLDING_BREAK: obSound;
      static BLOCK_SCAFFOLDING_FALL: obSound;
      static BLOCK_SCAFFOLDING_HIT: obSound;
      static BLOCK_SCAFFOLDING_PLACE: obSound;
      static BLOCK_SCAFFOLDING_STEP: obSound;
      static BLOCK_SHROOMLIGHT_BREAK: obSound;
      static BLOCK_SHROOMLIGHT_FALL: obSound;
      static BLOCK_SHROOMLIGHT_HIT: obSound;
      static BLOCK_SHROOMLIGHT_PLACE: obSound;
      static BLOCK_SHROOMLIGHT_STEP: obSound;
      static BLOCK_SHULKER_BOX_CLOSE: obSound;
      static BLOCK_SHULKER_BOX_OPEN: obSound;
      static BLOCK_SLIME_BLOCK_BREAK: obSound;
      static BLOCK_SLIME_BLOCK_FALL: obSound;
      static BLOCK_SLIME_BLOCK_HIT: obSound;
      static BLOCK_SLIME_BLOCK_PLACE: obSound;
      static BLOCK_SLIME_BLOCK_STEP: obSound;
      static BLOCK_SMITHING_TABLE_USE: obSound;
      static BLOCK_SMOKER_SMOKE: obSound;
      static BLOCK_SNOW_BREAK: obSound;
      static BLOCK_SNOW_FALL: obSound;
      static BLOCK_SNOW_HIT: obSound;
      static BLOCK_SNOW_PLACE: obSound;
      static BLOCK_SNOW_STEP: obSound;
      static BLOCK_SOUL_SAND_BREAK: obSound;
      static BLOCK_SOUL_SAND_FALL: obSound;
      static BLOCK_SOUL_SAND_HIT: obSound;
      static BLOCK_SOUL_SAND_PLACE: obSound;
      static BLOCK_SOUL_SAND_STEP: obSound;
      static BLOCK_SOUL_SOIL_BREAK: obSound;
      static BLOCK_SOUL_SOIL_FALL: obSound;
      static BLOCK_SOUL_SOIL_HIT: obSound;
      static BLOCK_SOUL_SOIL_PLACE: obSound;
      static BLOCK_SOUL_SOIL_STEP: obSound;
      static BLOCK_STEM_BREAK: obSound;
      static BLOCK_STEM_FALL: obSound;
      static BLOCK_STEM_HIT: obSound;
      static BLOCK_STEM_PLACE: obSound;
      static BLOCK_STEM_STEP: obSound;
      static BLOCK_STONE_BREAK: obSound;
      static BLOCK_STONE_BUTTON_CLICK_OFF: obSound;
      static BLOCK_STONE_BUTTON_CLICK_ON: obSound;
      static BLOCK_STONE_FALL: obSound;
      static BLOCK_STONE_HIT: obSound;
      static BLOCK_STONE_PLACE: obSound;
      static BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF: obSound;
      static BLOCK_STONE_PRESSURE_PLATE_CLICK_ON: obSound;
      static BLOCK_STONE_STEP: obSound;
      static BLOCK_SWEET_BERRY_BUSH_BREAK: obSound;
      static BLOCK_SWEET_BERRY_BUSH_PLACE: obSound;
      static BLOCK_TRIPWIRE_ATTACH: obSound;
      static BLOCK_TRIPWIRE_CLICK_OFF: obSound;
      static BLOCK_TRIPWIRE_CLICK_ON: obSound;
      static BLOCK_TRIPWIRE_DETACH: obSound;
      static BLOCK_VINE_STEP: obSound;
      static BLOCK_WART_BLOCK_BREAK: obSound;
      static BLOCK_WART_BLOCK_FALL: obSound;
      static BLOCK_WART_BLOCK_HIT: obSound;
      static BLOCK_WART_BLOCK_PLACE: obSound;
      static BLOCK_WART_BLOCK_STEP: obSound;
      static BLOCK_WATER_AMBIENT: obSound;
      static BLOCK_WEEPING_VINES_BREAK: obSound;
      static BLOCK_WEEPING_VINES_FALL: obSound;
      static BLOCK_WEEPING_VINES_HIT: obSound;
      static BLOCK_WEEPING_VINES_PLACE: obSound;
      static BLOCK_WEEPING_VINES_STEP: obSound;
      static BLOCK_WET_GRASS_BREAK: obSound;
      static BLOCK_WET_GRASS_FALL: obSound;
      static BLOCK_WET_GRASS_HIT: obSound;
      static BLOCK_WET_GRASS_PLACE: obSound;
      static BLOCK_WET_GRASS_STEP: obSound;
      static BLOCK_WOOD_BREAK: obSound;
      static BLOCK_WOOD_FALL: obSound;
      static BLOCK_WOOD_HIT: obSound;
      static BLOCK_WOOD_PLACE: obSound;
      static BLOCK_WOOD_STEP: obSound;
      static BLOCK_WOODEN_BUTTON_CLICK_OFF: obSound;
      static BLOCK_WOODEN_BUTTON_CLICK_ON: obSound;
      static BLOCK_WOODEN_DOOR_CLOSE: obSound;
      static BLOCK_WOODEN_DOOR_OPEN: obSound;
      static BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF: obSound;
      static BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON: obSound;
      static BLOCK_WOODEN_TRAPDOOR_CLOSE: obSound;
      static BLOCK_WOODEN_TRAPDOOR_OPEN: obSound;
      static BLOCK_WOOL_BREAK: obSound;
      static BLOCK_WOOL_FALL: obSound;
      static BLOCK_WOOL_HIT: obSound;
      static BLOCK_WOOL_PLACE: obSound;
      static BLOCK_WOOL_STEP: obSound;
      static ENCHANT_THORNS_HIT: obSound;
      static ENTITY_ARMOR_STAND_BREAK: obSound;
      static ENTITY_ARMOR_STAND_FALL: obSound;
      static ENTITY_ARMOR_STAND_HIT: obSound;
      static ENTITY_ARMOR_STAND_PLACE: obSound;
      static ENTITY_ARROW_HIT: obSound;
      static ENTITY_ARROW_HIT_PLAYER: obSound;
      static ENTITY_ARROW_SHOOT: obSound;
      static ENTITY_BAT_AMBIENT: obSound;
      static ENTITY_BAT_DEATH: obSound;
      static ENTITY_BAT_HURT: obSound;
      static ENTITY_BAT_LOOP: obSound;
      static ENTITY_BAT_TAKEOFF: obSound;
      static ENTITY_BEE_DEATH: obSound;
      static ENTITY_BEE_HURT: obSound;
      static ENTITY_BEE_LOOP: obSound;
      static ENTITY_BEE_LOOP_AGGRESSIVE: obSound;
      static ENTITY_BEE_POLLINATE: obSound;
      static ENTITY_BEE_STING: obSound;
      static ENTITY_BLAZE_AMBIENT: obSound;
      static ENTITY_BLAZE_BURN: obSound;
      static ENTITY_BLAZE_DEATH: obSound;
      static ENTITY_BLAZE_HURT: obSound;
      static ENTITY_BLAZE_SHOOT: obSound;
      static ENTITY_BOAT_PADDLE_LAND: obSound;
      static ENTITY_BOAT_PADDLE_WATER: obSound;
      static ENTITY_CAT_AMBIENT: obSound;
      static ENTITY_CAT_BEG_FOR_FOOD: obSound;
      static ENTITY_CAT_DEATH: obSound;
      static ENTITY_CAT_EAT: obSound;
      static ENTITY_CAT_HISS: obSound;
      static ENTITY_CAT_HURT: obSound;
      static ENTITY_CAT_PURR: obSound;
      static ENTITY_CAT_PURREOW: obSound;
      static ENTITY_CAT_STRAY_AMBIENT: obSound;
      static ENTITY_CHICKEN_AMBIENT: obSound;
      static ENTITY_CHICKEN_DEATH: obSound;
      static ENTITY_CHICKEN_EGG: obSound;
      static ENTITY_CHICKEN_HURT: obSound;
      static ENTITY_CHICKEN_STEP: obSound;
      static ENTITY_COD_AMBIENT: obSound;
      static ENTITY_COD_DEATH: obSound;
      static ENTITY_COD_FLOP: obSound;
      static ENTITY_COD_HURT: obSound;
      static ENTITY_COW_AMBIENT: obSound;
      static ENTITY_COW_DEATH: obSound;
      static ENTITY_COW_HURT: obSound;
      static ENTITY_COW_MILK: obSound;
      static ENTITY_COW_STEP: obSound;
      static ENTITY_CREEPER_DEATH: obSound;
      static ENTITY_CREEPER_HURT: obSound;
      static ENTITY_CREEPER_PRIMED: obSound;
      static ENTITY_DOLPHIN_AMBIENT: obSound;
      static ENTITY_DOLPHIN_AMBIENT_WATER: obSound;
      static ENTITY_DOLPHIN_ATTACK: obSound;
      static ENTITY_DOLPHIN_DEATH: obSound;
      static ENTITY_DOLPHIN_EAT: obSound;
      static ENTITY_DOLPHIN_HURT: obSound;
      static ENTITY_DOLPHIN_JUMP: obSound;
      static ENTITY_DOLPHIN_PLAY: obSound;
      static ENTITY_DOLPHIN_SPLASH: obSound;
      static ENTITY_DOLPHIN_SWIM: obSound;
      static ENTITY_DONKEY_AMBIENT: obSound;
      static ENTITY_DONKEY_ANGRY: obSound;
      static ENTITY_DONKEY_CHEST: obSound;
      static ENTITY_DONKEY_DEATH: obSound;
      static ENTITY_DONKEY_EAT: obSound;
      static ENTITY_DONKEY_HURT: obSound;
      static ENTITY_DRAGON_FIREBALL_EXPLODE: obSound;
      static ENTITY_DROWNED_AMBIENT: obSound;
      static ENTITY_DROWNED_AMBIENT_WATER: obSound;
      static ENTITY_DROWNED_DEATH: obSound;
      static ENTITY_DROWNED_DEATH_WATER: obSound;
      static ENTITY_DROWNED_HURT: obSound;
      static ENTITY_DROWNED_HURT_WATER: obSound;
      static ENTITY_DROWNED_SHOOT: obSound;
      static ENTITY_DROWNED_STEP: obSound;
      static ENTITY_DROWNED_SWIM: obSound;
      static ENTITY_EGG_THROW: obSound;
      static ENTITY_ELDER_GUARDIAN_AMBIENT: obSound;
      static ENTITY_ELDER_GUARDIAN_AMBIENT_LAND: obSound;
      static ENTITY_ELDER_GUARDIAN_CURSE: obSound;
      static ENTITY_ELDER_GUARDIAN_DEATH: obSound;
      static ENTITY_ELDER_GUARDIAN_DEATH_LAND: obSound;
      static ENTITY_ELDER_GUARDIAN_FLOP: obSound;
      static ENTITY_ELDER_GUARDIAN_HURT: obSound;
      static ENTITY_ELDER_GUARDIAN_HURT_LAND: obSound;
      static ENTITY_ENDER_DRAGON_AMBIENT: obSound;
      static ENTITY_ENDER_DRAGON_DEATH: obSound;
      static ENTITY_ENDER_DRAGON_FLAP: obSound;
      static ENTITY_ENDER_DRAGON_GROWL: obSound;
      static ENTITY_ENDER_DRAGON_HURT: obSound;
      static ENTITY_ENDER_DRAGON_SHOOT: obSound;
      static ENTITY_ENDER_EYE_DEATH: obSound;
      static ENTITY_ENDER_EYE_LAUNCH: obSound;
      static ENTITY_ENDER_PEARL_THROW: obSound;
      static ENTITY_ENDERMAN_AMBIENT: obSound;
      static ENTITY_ENDERMAN_DEATH: obSound;
      static ENTITY_ENDERMAN_HURT: obSound;
      static ENTITY_ENDERMAN_SCREAM: obSound;
      static ENTITY_ENDERMAN_STARE: obSound;
      static ENTITY_ENDERMAN_TELEPORT: obSound;
      static ENTITY_ENDERMITE_AMBIENT: obSound;
      static ENTITY_ENDERMITE_DEATH: obSound;
      static ENTITY_ENDERMITE_HURT: obSound;
      static ENTITY_ENDERMITE_STEP: obSound;
      static ENTITY_EVOKER_AMBIENT: obSound;
      static ENTITY_EVOKER_CAST_SPELL: obSound;
      static ENTITY_EVOKER_CELEBRATE: obSound;
      static ENTITY_EVOKER_DEATH: obSound;
      static ENTITY_EVOKER_FANGS_ATTACK: obSound;
      static ENTITY_EVOKER_HURT: obSound;
      static ENTITY_EVOKER_PREPARE_ATTACK: obSound;
      static ENTITY_EVOKER_PREPARE_SUMMON: obSound;
      static ENTITY_EVOKER_PREPARE_WOLOLO: obSound;
      static ENTITY_EXPERIENCE_BOTTLE_THROW: obSound;
      static ENTITY_EXPERIENCE_ORB_PICKUP: obSound;
      static ENTITY_FIREWORK_ROCKET_BLAST: obSound;
      static ENTITY_FIREWORK_ROCKET_BLAST_FAR: obSound;
      static ENTITY_FIREWORK_ROCKET_LARGE_BLAST: obSound;
      static ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR: obSound;
      static ENTITY_FIREWORK_ROCKET_LAUNCH: obSound;
      static ENTITY_FIREWORK_ROCKET_SHOOT: obSound;
      static ENTITY_FIREWORK_ROCKET_TWINKLE: obSound;
      static ENTITY_FIREWORK_ROCKET_TWINKLE_FAR: obSound;
      static ENTITY_FISH_SWIM: obSound;
      static ENTITY_FISHING_BOBBER_RETRIEVE: obSound;
      static ENTITY_FISHING_BOBBER_SPLASH: obSound;
      static ENTITY_FISHING_BOBBER_THROW: obSound;
      static ENTITY_FOX_AGGRO: obSound;
      static ENTITY_FOX_AMBIENT: obSound;
      static ENTITY_FOX_BITE: obSound;
      static ENTITY_FOX_DEATH: obSound;
      static ENTITY_FOX_EAT: obSound;
      static ENTITY_FOX_HURT: obSound;
      static ENTITY_FOX_SCREECH: obSound;
      static ENTITY_FOX_SLEEP: obSound;
      static ENTITY_FOX_SNIFF: obSound;
      static ENTITY_FOX_SPIT: obSound;
      static ENTITY_FOX_TELEPORT: obSound;
      static ENTITY_GENERIC_BIG_FALL: obSound;
      static ENTITY_GENERIC_BURN: obSound;
      static ENTITY_GENERIC_DEATH: obSound;
      static ENTITY_GENERIC_DRINK: obSound;
      static ENTITY_GENERIC_EAT: obSound;
      static ENTITY_GENERIC_EXPLODE: obSound;
      static ENTITY_GENERIC_EXTINGUISH_FIRE: obSound;
      static ENTITY_GENERIC_HURT: obSound;
      static ENTITY_GENERIC_SMALL_FALL: obSound;
      static ENTITY_GENERIC_SPLASH: obSound;
      static ENTITY_GENERIC_SWIM: obSound;
      static ENTITY_GHAST_AMBIENT: obSound;
      static ENTITY_GHAST_DEATH: obSound;
      static ENTITY_GHAST_HURT: obSound;
      static ENTITY_GHAST_SCREAM: obSound;
      static ENTITY_GHAST_SHOOT: obSound;
      static ENTITY_GHAST_WARN: obSound;
      static ENTITY_GUARDIAN_AMBIENT: obSound;
      static ENTITY_GUARDIAN_AMBIENT_LAND: obSound;
      static ENTITY_GUARDIAN_ATTACK: obSound;
      static ENTITY_GUARDIAN_DEATH: obSound;
      static ENTITY_GUARDIAN_DEATH_LAND: obSound;
      static ENTITY_GUARDIAN_FLOP: obSound;
      static ENTITY_GUARDIAN_HURT: obSound;
      static ENTITY_GUARDIAN_HURT_LAND: obSound;
      static ENTITY_HOGLIN_AMBIENT: obSound;
      static ENTITY_HOGLIN_ANGRY: obSound;
      static ENTITY_HOGLIN_ATTACK: obSound;
      static ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED: obSound;
      static ENTITY_HOGLIN_DEATH: obSound;
      static ENTITY_HOGLIN_HURT: obSound;
      static ENTITY_HOGLIN_RETREAT: obSound;
      static ENTITY_HOGLIN_STEP: obSound;
      static ENTITY_HORSE_AMBIENT: obSound;
      static ENTITY_HORSE_ANGRY: obSound;
      static ENTITY_HORSE_ARMOR: obSound;
      static ENTITY_HORSE_BREATHE: obSound;
      static ENTITY_HORSE_DEATH: obSound;
      static ENTITY_HORSE_EAT: obSound;
      static ENTITY_HORSE_GALLOP: obSound;
      static ENTITY_HORSE_HURT: obSound;
      static ENTITY_HORSE_JUMP: obSound;
      static ENTITY_HORSE_LAND: obSound;
      static ENTITY_HORSE_SADDLE: obSound;
      static ENTITY_HORSE_STEP: obSound;
      static ENTITY_HORSE_STEP_WOOD: obSound;
      static ENTITY_HOSTILE_BIG_FALL: obSound;
      static ENTITY_HOSTILE_DEATH: obSound;
      static ENTITY_HOSTILE_HURT: obSound;
      static ENTITY_HOSTILE_SMALL_FALL: obSound;
      static ENTITY_HOSTILE_SPLASH: obSound;
      static ENTITY_HOSTILE_SWIM: obSound;
      static ENTITY_HUSK_AMBIENT: obSound;
      static ENTITY_HUSK_CONVERTED_TO_ZOMBIE: obSound;
      static ENTITY_HUSK_DEATH: obSound;
      static ENTITY_HUSK_HURT: obSound;
      static ENTITY_HUSK_STEP: obSound;
      static ENTITY_ILLUSIONER_AMBIENT: obSound;
      static ENTITY_ILLUSIONER_CAST_SPELL: obSound;
      static ENTITY_ILLUSIONER_DEATH: obSound;
      static ENTITY_ILLUSIONER_HURT: obSound;
      static ENTITY_ILLUSIONER_MIRROR_MOVE: obSound;
      static ENTITY_ILLUSIONER_PREPARE_BLINDNESS: obSound;
      static ENTITY_ILLUSIONER_PREPARE_MIRROR: obSound;
      static ENTITY_IRON_GOLEM_ATTACK: obSound;
      static ENTITY_IRON_GOLEM_DAMAGE: obSound;
      static ENTITY_IRON_GOLEM_DEATH: obSound;
      static ENTITY_IRON_GOLEM_HURT: obSound;
      static ENTITY_IRON_GOLEM_REPAIR: obSound;
      static ENTITY_IRON_GOLEM_STEP: obSound;
      static ENTITY_ITEM_BREAK: obSound;
      static ENTITY_ITEM_FRAME_ADD_ITEM: obSound;
      static ENTITY_ITEM_FRAME_BREAK: obSound;
      static ENTITY_ITEM_FRAME_PLACE: obSound;
      static ENTITY_ITEM_FRAME_REMOVE_ITEM: obSound;
      static ENTITY_ITEM_FRAME_ROTATE_ITEM: obSound;
      static ENTITY_ITEM_PICKUP: obSound;
      static ENTITY_LEASH_KNOT_BREAK: obSound;
      static ENTITY_LEASH_KNOT_PLACE: obSound;
      static ENTITY_LIGHTNING_BOLT_IMPACT: obSound;
      static ENTITY_LIGHTNING_BOLT_THUNDER: obSound;
      static ENTITY_LINGERING_POTION_THROW: obSound;
      static ENTITY_LLAMA_AMBIENT: obSound;
      static ENTITY_LLAMA_ANGRY: obSound;
      static ENTITY_LLAMA_CHEST: obSound;
      static ENTITY_LLAMA_DEATH: obSound;
      static ENTITY_LLAMA_EAT: obSound;
      static ENTITY_LLAMA_HURT: obSound;
      static ENTITY_LLAMA_SPIT: obSound;
      static ENTITY_LLAMA_STEP: obSound;
      static ENTITY_LLAMA_SWAG: obSound;
      static ENTITY_MAGMA_CUBE_DEATH: obSound;
      static ENTITY_MAGMA_CUBE_DEATH_SMALL: obSound;
      static ENTITY_MAGMA_CUBE_HURT: obSound;
      static ENTITY_MAGMA_CUBE_HURT_SMALL: obSound;
      static ENTITY_MAGMA_CUBE_JUMP: obSound;
      static ENTITY_MAGMA_CUBE_SQUISH: obSound;
      static ENTITY_MAGMA_CUBE_SQUISH_SMALL: obSound;
      static ENTITY_MINECART_INSIDE: obSound;
      static ENTITY_MINECART_RIDING: obSound;
      static ENTITY_MOOSHROOM_CONVERT: obSound;
      static ENTITY_MOOSHROOM_EAT: obSound;
      static ENTITY_MOOSHROOM_MILK: obSound;
      static ENTITY_MOOSHROOM_SHEAR: obSound;
      static ENTITY_MOOSHROOM_SUSPICIOUS_MILK: obSound;
      static ENTITY_MULE_AMBIENT: obSound;
      static ENTITY_MULE_ANGRY: obSound;
      static ENTITY_MULE_CHEST: obSound;
      static ENTITY_MULE_DEATH: obSound;
      static ENTITY_MULE_EAT: obSound;
      static ENTITY_MULE_HURT: obSound;
      static ENTITY_OCELOT_AMBIENT: obSound;
      static ENTITY_OCELOT_DEATH: obSound;
      static ENTITY_OCELOT_HURT: obSound;
      static ENTITY_PAINTING_BREAK: obSound;
      static ENTITY_PAINTING_PLACE: obSound;
      static ENTITY_PANDA_AGGRESSIVE_AMBIENT: obSound;
      static ENTITY_PANDA_AMBIENT: obSound;
      static ENTITY_PANDA_BITE: obSound;
      static ENTITY_PANDA_CANT_BREED: obSound;
      static ENTITY_PANDA_DEATH: obSound;
      static ENTITY_PANDA_EAT: obSound;
      static ENTITY_PANDA_HURT: obSound;
      static ENTITY_PANDA_PRE_SNEEZE: obSound;
      static ENTITY_PANDA_SNEEZE: obSound;
      static ENTITY_PANDA_STEP: obSound;
      static ENTITY_PANDA_WORRIED_AMBIENT: obSound;
      static ENTITY_PARROT_AMBIENT: obSound;
      static ENTITY_PARROT_DEATH: obSound;
      static ENTITY_PARROT_EAT: obSound;
      static ENTITY_PARROT_FLY: obSound;
      static ENTITY_PARROT_HURT: obSound;
      static ENTITY_PARROT_IMITATE_BLAZE: obSound;
      static ENTITY_PARROT_IMITATE_CREEPER: obSound;
      static ENTITY_PARROT_IMITATE_DROWNED: obSound;
      static ENTITY_PARROT_IMITATE_ELDER_GUARDIAN: obSound;
      static ENTITY_PARROT_IMITATE_ENDER_DRAGON: obSound;
      static ENTITY_PARROT_IMITATE_ENDERMITE: obSound;
      static ENTITY_PARROT_IMITATE_EVOKER: obSound;
      static ENTITY_PARROT_IMITATE_GHAST: obSound;
      static ENTITY_PARROT_IMITATE_GUARDIAN: obSound;
      static ENTITY_PARROT_IMITATE_HOGLIN: obSound;
      static ENTITY_PARROT_IMITATE_HUSK: obSound;
      static ENTITY_PARROT_IMITATE_ILLUSIONER: obSound;
      static ENTITY_PARROT_IMITATE_MAGMA_CUBE: obSound;
      static ENTITY_PARROT_IMITATE_PHANTOM: obSound;
      static ENTITY_PARROT_IMITATE_PIGLIN: obSound;
      static ENTITY_PARROT_IMITATE_PIGLIN_BRUTE: obSound;
      static ENTITY_PARROT_IMITATE_PILLAGER: obSound;
      static ENTITY_PARROT_IMITATE_RAVAGER: obSound;
      static ENTITY_PARROT_IMITATE_SHULKER: obSound;
      static ENTITY_PARROT_IMITATE_SILVERFISH: obSound;
      static ENTITY_PARROT_IMITATE_SKELETON: obSound;
      static ENTITY_PARROT_IMITATE_SLIME: obSound;
      static ENTITY_PARROT_IMITATE_SPIDER: obSound;
      static ENTITY_PARROT_IMITATE_STRAY: obSound;
      static ENTITY_PARROT_IMITATE_VEX: obSound;
      static ENTITY_PARROT_IMITATE_VINDICATOR: obSound;
      static ENTITY_PARROT_IMITATE_WITCH: obSound;
      static ENTITY_PARROT_IMITATE_WITHER: obSound;
      static ENTITY_PARROT_IMITATE_WITHER_SKELETON: obSound;
      static ENTITY_PARROT_IMITATE_ZOGLIN: obSound;
      static ENTITY_PARROT_IMITATE_ZOMBIE: obSound;
      static ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER: obSound;
      static ENTITY_PARROT_STEP: obSound;
      static ENTITY_PHANTOM_AMBIENT: obSound;
      static ENTITY_PHANTOM_BITE: obSound;
      static ENTITY_PHANTOM_DEATH: obSound;
      static ENTITY_PHANTOM_FLAP: obSound;
      static ENTITY_PHANTOM_HURT: obSound;
      static ENTITY_PHANTOM_SWOOP: obSound;
      static ENTITY_PIG_AMBIENT: obSound;
      static ENTITY_PIG_DEATH: obSound;
      static ENTITY_PIG_HURT: obSound;
      static ENTITY_PIG_SADDLE: obSound;
      static ENTITY_PIG_STEP: obSound;
      static ENTITY_PIGLIN_ADMIRING_ITEM: obSound;
      static ENTITY_PIGLIN_AMBIENT: obSound;
      static ENTITY_PIGLIN_ANGRY: obSound;
      static ENTITY_PIGLIN_BRUTE_AMBIENT: obSound;
      static ENTITY_PIGLIN_BRUTE_ANGRY: obSound;
      static ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED: obSound;
      static ENTITY_PIGLIN_BRUTE_DEATH: obSound;
      static ENTITY_PIGLIN_BRUTE_HURT: obSound;
      static ENTITY_PIGLIN_BRUTE_STEP: obSound;
      static ENTITY_PIGLIN_CELEBRATE: obSound;
      static ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED: obSound;
      static ENTITY_PIGLIN_DEATH: obSound;
      static ENTITY_PIGLIN_HURT: obSound;
      static ENTITY_PIGLIN_JEALOUS: obSound;
      static ENTITY_PIGLIN_RETREAT: obSound;
      static ENTITY_PIGLIN_STEP: obSound;
      static ENTITY_PILLAGER_AMBIENT: obSound;
      static ENTITY_PILLAGER_CELEBRATE: obSound;
      static ENTITY_PILLAGER_DEATH: obSound;
      static ENTITY_PILLAGER_HURT: obSound;
      static ENTITY_PLAYER_ATTACK_CRIT: obSound;
      static ENTITY_PLAYER_ATTACK_KNOCKBACK: obSound;
      static ENTITY_PLAYER_ATTACK_NODAMAGE: obSound;
      static ENTITY_PLAYER_ATTACK_STRONG: obSound;
      static ENTITY_PLAYER_ATTACK_SWEEP: obSound;
      static ENTITY_PLAYER_ATTACK_WEAK: obSound;
      static ENTITY_PLAYER_BIG_FALL: obSound;
      static ENTITY_PLAYER_BREATH: obSound;
      static ENTITY_PLAYER_BURP: obSound;
      static ENTITY_PLAYER_DEATH: obSound;
      static ENTITY_PLAYER_HURT: obSound;
      static ENTITY_PLAYER_HURT_DROWN: obSound;
      static ENTITY_PLAYER_HURT_ON_FIRE: obSound;
      static ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH: obSound;
      static ENTITY_PLAYER_LEVELUP: obSound;
      static ENTITY_PLAYER_SMALL_FALL: obSound;
      static ENTITY_PLAYER_SPLASH: obSound;
      static ENTITY_PLAYER_SPLASH_HIGH_SPEED: obSound;
      static ENTITY_PLAYER_SWIM: obSound;
      static ENTITY_POLAR_BEAR_AMBIENT: obSound;
      static ENTITY_POLAR_BEAR_AMBIENT_BABY: obSound;
      static ENTITY_POLAR_BEAR_DEATH: obSound;
      static ENTITY_POLAR_BEAR_HURT: obSound;
      static ENTITY_POLAR_BEAR_STEP: obSound;
      static ENTITY_POLAR_BEAR_WARNING: obSound;
      static ENTITY_PUFFER_FISH_AMBIENT: obSound;
      static ENTITY_PUFFER_FISH_BLOW_OUT: obSound;
      static ENTITY_PUFFER_FISH_BLOW_UP: obSound;
      static ENTITY_PUFFER_FISH_DEATH: obSound;
      static ENTITY_PUFFER_FISH_FLOP: obSound;
      static ENTITY_PUFFER_FISH_HURT: obSound;
      static ENTITY_PUFFER_FISH_STING: obSound;
      static ENTITY_RABBIT_AMBIENT: obSound;
      static ENTITY_RABBIT_ATTACK: obSound;
      static ENTITY_RABBIT_DEATH: obSound;
      static ENTITY_RABBIT_HURT: obSound;
      static ENTITY_RABBIT_JUMP: obSound;
      static ENTITY_RAVAGER_AMBIENT: obSound;
      static ENTITY_RAVAGER_ATTACK: obSound;
      static ENTITY_RAVAGER_CELEBRATE: obSound;
      static ENTITY_RAVAGER_DEATH: obSound;
      static ENTITY_RAVAGER_HURT: obSound;
      static ENTITY_RAVAGER_ROAR: obSound;
      static ENTITY_RAVAGER_STEP: obSound;
      static ENTITY_RAVAGER_STUNNED: obSound;
      static ENTITY_SALMON_AMBIENT: obSound;
      static ENTITY_SALMON_DEATH: obSound;
      static ENTITY_SALMON_FLOP: obSound;
      static ENTITY_SALMON_HURT: obSound;
      static ENTITY_SHEEP_AMBIENT: obSound;
      static ENTITY_SHEEP_DEATH: obSound;
      static ENTITY_SHEEP_HURT: obSound;
      static ENTITY_SHEEP_SHEAR: obSound;
      static ENTITY_SHEEP_STEP: obSound;
      static ENTITY_SHULKER_AMBIENT: obSound;
      static ENTITY_SHULKER_BULLET_HIT: obSound;
      static ENTITY_SHULKER_BULLET_HURT: obSound;
      static ENTITY_SHULKER_CLOSE: obSound;
      static ENTITY_SHULKER_DEATH: obSound;
      static ENTITY_SHULKER_HURT: obSound;
      static ENTITY_SHULKER_HURT_CLOSED: obSound;
      static ENTITY_SHULKER_OPEN: obSound;
      static ENTITY_SHULKER_SHOOT: obSound;
      static ENTITY_SHULKER_TELEPORT: obSound;
      static ENTITY_SILVERFISH_AMBIENT: obSound;
      static ENTITY_SILVERFISH_DEATH: obSound;
      static ENTITY_SILVERFISH_HURT: obSound;
      static ENTITY_SILVERFISH_STEP: obSound;
      static ENTITY_SKELETON_AMBIENT: obSound;
      static ENTITY_SKELETON_DEATH: obSound;
      static ENTITY_SKELETON_HORSE_AMBIENT: obSound;
      static ENTITY_SKELETON_HORSE_AMBIENT_WATER: obSound;
      static ENTITY_SKELETON_HORSE_DEATH: obSound;
      static ENTITY_SKELETON_HORSE_GALLOP_WATER: obSound;
      static ENTITY_SKELETON_HORSE_HURT: obSound;
      static ENTITY_SKELETON_HORSE_JUMP_WATER: obSound;
      static ENTITY_SKELETON_HORSE_STEP_WATER: obSound;
      static ENTITY_SKELETON_HORSE_SWIM: obSound;
      static ENTITY_SKELETON_HURT: obSound;
      static ENTITY_SKELETON_SHOOT: obSound;
      static ENTITY_SKELETON_STEP: obSound;
      static ENTITY_SLIME_ATTACK: obSound;
      static ENTITY_SLIME_DEATH: obSound;
      static ENTITY_SLIME_DEATH_SMALL: obSound;
      static ENTITY_SLIME_HURT: obSound;
      static ENTITY_SLIME_HURT_SMALL: obSound;
      static ENTITY_SLIME_JUMP: obSound;
      static ENTITY_SLIME_JUMP_SMALL: obSound;
      static ENTITY_SLIME_SQUISH: obSound;
      static ENTITY_SLIME_SQUISH_SMALL: obSound;
      static ENTITY_SNOW_GOLEM_AMBIENT: obSound;
      static ENTITY_SNOW_GOLEM_DEATH: obSound;
      static ENTITY_SNOW_GOLEM_HURT: obSound;
      static ENTITY_SNOW_GOLEM_SHEAR: obSound;
      static ENTITY_SNOW_GOLEM_SHOOT: obSound;
      static ENTITY_SNOWBALL_THROW: obSound;
      static ENTITY_SPIDER_AMBIENT: obSound;
      static ENTITY_SPIDER_DEATH: obSound;
      static ENTITY_SPIDER_HURT: obSound;
      static ENTITY_SPIDER_STEP: obSound;
      static ENTITY_SPLASH_POTION_BREAK: obSound;
      static ENTITY_SPLASH_POTION_THROW: obSound;
      static ENTITY_SQUID_AMBIENT: obSound;
      static ENTITY_SQUID_DEATH: obSound;
      static ENTITY_SQUID_HURT: obSound;
      static ENTITY_SQUID_SQUIRT: obSound;
      static ENTITY_STRAY_AMBIENT: obSound;
      static ENTITY_STRAY_DEATH: obSound;
      static ENTITY_STRAY_HURT: obSound;
      static ENTITY_STRAY_STEP: obSound;
      static ENTITY_STRIDER_AMBIENT: obSound;
      static ENTITY_STRIDER_DEATH: obSound;
      static ENTITY_STRIDER_EAT: obSound;
      static ENTITY_STRIDER_HAPPY: obSound;
      static ENTITY_STRIDER_HURT: obSound;
      static ENTITY_STRIDER_RETREAT: obSound;
      static ENTITY_STRIDER_SADDLE: obSound;
      static ENTITY_STRIDER_STEP: obSound;
      static ENTITY_STRIDER_STEP_LAVA: obSound;
      static ENTITY_TNT_PRIMED: obSound;
      static ENTITY_TROPICAL_FISH_AMBIENT: obSound;
      static ENTITY_TROPICAL_FISH_DEATH: obSound;
      static ENTITY_TROPICAL_FISH_FLOP: obSound;
      static ENTITY_TROPICAL_FISH_HURT: obSound;
      static ENTITY_TURTLE_AMBIENT_LAND: obSound;
      static ENTITY_TURTLE_DEATH: obSound;
      static ENTITY_TURTLE_DEATH_BABY: obSound;
      static ENTITY_TURTLE_EGG_BREAK: obSound;
      static ENTITY_TURTLE_EGG_CRACK: obSound;
      static ENTITY_TURTLE_EGG_HATCH: obSound;
      static ENTITY_TURTLE_HURT: obSound;
      static ENTITY_TURTLE_HURT_BABY: obSound;
      static ENTITY_TURTLE_LAY_EGG: obSound;
      static ENTITY_TURTLE_SHAMBLE: obSound;
      static ENTITY_TURTLE_SHAMBLE_BABY: obSound;
      static ENTITY_TURTLE_SWIM: obSound;
      static ENTITY_VEX_AMBIENT: obSound;
      static ENTITY_VEX_CHARGE: obSound;
      static ENTITY_VEX_DEATH: obSound;
      static ENTITY_VEX_HURT: obSound;
      static ENTITY_VILLAGER_AMBIENT: obSound;
      static ENTITY_VILLAGER_CELEBRATE: obSound;
      static ENTITY_VILLAGER_DEATH: obSound;
      static ENTITY_VILLAGER_HURT: obSound;
      static ENTITY_VILLAGER_NO: obSound;
      static ENTITY_VILLAGER_TRADE: obSound;
      static ENTITY_VILLAGER_WORK_ARMORER: obSound;
      static ENTITY_VILLAGER_WORK_BUTCHER: obSound;
      static ENTITY_VILLAGER_WORK_CARTOGRAPHER: obSound;
      static ENTITY_VILLAGER_WORK_CLERIC: obSound;
      static ENTITY_VILLAGER_WORK_FARMER: obSound;
      static ENTITY_VILLAGER_WORK_FISHERMAN: obSound;
      static ENTITY_VILLAGER_WORK_FLETCHER: obSound;
      static ENTITY_VILLAGER_WORK_LEATHERWORKER: obSound;
      static ENTITY_VILLAGER_WORK_LIBRARIAN: obSound;
      static ENTITY_VILLAGER_WORK_MASON: obSound;
      static ENTITY_VILLAGER_WORK_SHEPHERD: obSound;
      static ENTITY_VILLAGER_WORK_TOOLSMITH: obSound;
      static ENTITY_VILLAGER_WORK_WEAPONSMITH: obSound;
      static ENTITY_VILLAGER_YES: obSound;
      static ENTITY_VINDICATOR_AMBIENT: obSound;
      static ENTITY_VINDICATOR_CELEBRATE: obSound;
      static ENTITY_VINDICATOR_DEATH: obSound;
      static ENTITY_VINDICATOR_HURT: obSound;
      static ENTITY_WANDERING_TRADER_AMBIENT: obSound;
      static ENTITY_WANDERING_TRADER_DEATH: obSound;
      static ENTITY_WANDERING_TRADER_DISAPPEARED: obSound;
      static ENTITY_WANDERING_TRADER_DRINK_MILK: obSound;
      static ENTITY_WANDERING_TRADER_DRINK_POTION: obSound;
      static ENTITY_WANDERING_TRADER_HURT: obSound;
      static ENTITY_WANDERING_TRADER_NO: obSound;
      static ENTITY_WANDERING_TRADER_REAPPEARED: obSound;
      static ENTITY_WANDERING_TRADER_TRADE: obSound;
      static ENTITY_WANDERING_TRADER_YES: obSound;
      static ENTITY_WITCH_AMBIENT: obSound;
      static ENTITY_WITCH_CELEBRATE: obSound;
      static ENTITY_WITCH_DEATH: obSound;
      static ENTITY_WITCH_DRINK: obSound;
      static ENTITY_WITCH_HURT: obSound;
      static ENTITY_WITCH_THROW: obSound;
      static ENTITY_WITHER_AMBIENT: obSound;
      static ENTITY_WITHER_BREAK_BLOCK: obSound;
      static ENTITY_WITHER_DEATH: obSound;
      static ENTITY_WITHER_HURT: obSound;
      static ENTITY_WITHER_SHOOT: obSound;
      static ENTITY_WITHER_SKELETON_AMBIENT: obSound;
      static ENTITY_WITHER_SKELETON_DEATH: obSound;
      static ENTITY_WITHER_SKELETON_HURT: obSound;
      static ENTITY_WITHER_SKELETON_STEP: obSound;
      static ENTITY_WITHER_SPAWN: obSound;
      static ENTITY_WOLF_AMBIENT: obSound;
      static ENTITY_WOLF_DEATH: obSound;
      static ENTITY_WOLF_GROWL: obSound;
      static ENTITY_WOLF_HOWL: obSound;
      static ENTITY_WOLF_HURT: obSound;
      static ENTITY_WOLF_PANT: obSound;
      static ENTITY_WOLF_SHAKE: obSound;
      static ENTITY_WOLF_STEP: obSound;
      static ENTITY_WOLF_WHINE: obSound;
      static ENTITY_ZOGLIN_AMBIENT: obSound;
      static ENTITY_ZOGLIN_ANGRY: obSound;
      static ENTITY_ZOGLIN_ATTACK: obSound;
      static ENTITY_ZOGLIN_DEATH: obSound;
      static ENTITY_ZOGLIN_HURT: obSound;
      static ENTITY_ZOGLIN_STEP: obSound;
      static ENTITY_ZOMBIE_AMBIENT: obSound;
      static ENTITY_ZOMBIE_ATTACK_IRON_DOOR: obSound;
      static ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR: obSound;
      static ENTITY_ZOMBIE_BREAK_WOODEN_DOOR: obSound;
      static ENTITY_ZOMBIE_CONVERTED_TO_DROWNED: obSound;
      static ENTITY_ZOMBIE_DEATH: obSound;
      static ENTITY_ZOMBIE_DESTROY_EGG: obSound;
      static ENTITY_ZOMBIE_HORSE_AMBIENT: obSound;
      static ENTITY_ZOMBIE_HORSE_DEATH: obSound;
      static ENTITY_ZOMBIE_HORSE_HURT: obSound;
      static ENTITY_ZOMBIE_HURT: obSound;
      static ENTITY_ZOMBIE_INFECT: obSound;
      static ENTITY_ZOMBIE_STEP: obSound;
      static ENTITY_ZOMBIE_VILLAGER_AMBIENT: obSound;
      static ENTITY_ZOMBIE_VILLAGER_CONVERTED: obSound;
      static ENTITY_ZOMBIE_VILLAGER_CURE: obSound;
      static ENTITY_ZOMBIE_VILLAGER_DEATH: obSound;
      static ENTITY_ZOMBIE_VILLAGER_HURT: obSound;
      static ENTITY_ZOMBIE_VILLAGER_STEP: obSound;
      static ENTITY_ZOMBIFIED_PIGLIN_AMBIENT: obSound;
      static ENTITY_ZOMBIFIED_PIGLIN_ANGRY: obSound;
      static ENTITY_ZOMBIFIED_PIGLIN_DEATH: obSound;
      static ENTITY_ZOMBIFIED_PIGLIN_HURT: obSound;
      static EVENT_RAID_HORN: obSound;
      static ITEM_ARMOR_EQUIP_CHAIN: obSound;
      static ITEM_ARMOR_EQUIP_DIAMOND: obSound;
      static ITEM_ARMOR_EQUIP_ELYTRA: obSound;
      static ITEM_ARMOR_EQUIP_GENERIC: obSound;
      static ITEM_ARMOR_EQUIP_GOLD: obSound;
      static ITEM_ARMOR_EQUIP_IRON: obSound;
      static ITEM_ARMOR_EQUIP_LEATHER: obSound;
      static ITEM_ARMOR_EQUIP_NETHERITE: obSound;
      static ITEM_ARMOR_EQUIP_TURTLE: obSound;
      static ITEM_AXE_STRIP: obSound;
      static ITEM_BOOK_PAGE_TURN: obSound;
      static ITEM_BOOK_PUT: obSound;
      static ITEM_BOTTLE_EMPTY: obSound;
      static ITEM_BOTTLE_FILL: obSound;
      static ITEM_BOTTLE_FILL_DRAGONBREATH: obSound;
      static ITEM_BUCKET_EMPTY: obSound;
      static ITEM_BUCKET_EMPTY_FISH: obSound;
      static ITEM_BUCKET_EMPTY_LAVA: obSound;
      static ITEM_BUCKET_FILL: obSound;
      static ITEM_BUCKET_FILL_FISH: obSound;
      static ITEM_BUCKET_FILL_LAVA: obSound;
      static ITEM_CHORUS_FRUIT_TELEPORT: obSound;
      static ITEM_CROP_PLANT: obSound;
      static ITEM_CROSSBOW_HIT: obSound;
      static ITEM_CROSSBOW_LOADING_END: obSound;
      static ITEM_CROSSBOW_LOADING_MIDDLE: obSound;
      static ITEM_CROSSBOW_LOADING_START: obSound;
      static ITEM_CROSSBOW_QUICK_CHARGE_1: obSound;
      static ITEM_CROSSBOW_QUICK_CHARGE_2: obSound;
      static ITEM_CROSSBOW_QUICK_CHARGE_3: obSound;
      static ITEM_CROSSBOW_SHOOT: obSound;
      static ITEM_ELYTRA_FLYING: obSound;
      static ITEM_FIRECHARGE_USE: obSound;
      static ITEM_FLINTANDSTEEL_USE: obSound;
      static ITEM_HOE_TILL: obSound;
      static ITEM_HONEY_BOTTLE_DRINK: obSound;
      static ITEM_LODESTONE_COMPASS_LOCK: obSound;
      static ITEM_NETHER_WART_PLANT: obSound;
      static ITEM_SHIELD_BLOCK: obSound;
      static ITEM_SHIELD_BREAK: obSound;
      static ITEM_SHOVEL_FLATTEN: obSound;
      static ITEM_SWEET_BERRIES_PICK_FROM_BUSH: obSound;
      static ITEM_TOTEM_USE: obSound;
      static ITEM_TRIDENT_HIT: obSound;
      static ITEM_TRIDENT_HIT_GROUND: obSound;
      static ITEM_TRIDENT_RETURN: obSound;
      static ITEM_TRIDENT_RIPTIDE_1: obSound;
      static ITEM_TRIDENT_RIPTIDE_2: obSound;
      static ITEM_TRIDENT_RIPTIDE_3: obSound;
      static ITEM_TRIDENT_THROW: obSound;
      static ITEM_TRIDENT_THUNDER: obSound;
      static MUSIC_CREATIVE: obSound;
      static MUSIC_CREDITS: obSound;
      static MUSIC_DISC_11: obSound;
      static MUSIC_DISC_13: obSound;
      static MUSIC_DISC_BLOCKS: obSound;
      static MUSIC_DISC_CAT: obSound;
      static MUSIC_DISC_CHIRP: obSound;
      static MUSIC_DISC_FAR: obSound;
      static MUSIC_DISC_MALL: obSound;
      static MUSIC_DISC_MELLOHI: obSound;
      static MUSIC_DISC_PIGSTEP: obSound;
      static MUSIC_DISC_STAL: obSound;
      static MUSIC_DISC_STRAD: obSound;
      static MUSIC_DISC_WAIT: obSound;
      static MUSIC_DISC_WARD: obSound;
      static MUSIC_DRAGON: obSound;
      static MUSIC_END: obSound;
      static MUSIC_GAME: obSound;
      static MUSIC_MENU: obSound;
      static MUSIC_NETHER_BASALT_DELTAS: obSound;
      static MUSIC_NETHER_CRIMSON_FOREST: obSound;
      static MUSIC_NETHER_NETHER_WASTES: obSound;
      static MUSIC_NETHER_SOUL_SAND_VALLEY: obSound;
      static MUSIC_NETHER_WARPED_FOREST: obSound;
      static MUSIC_UNDER_WATER: obSound;
      static PARTICLE_SOUL_ESCAPE: obSound;
      static UI_BUTTON_CLICK: obSound;
      static UI_CARTOGRAPHY_TABLE_TAKE_RESULT: obSound;
      static UI_LOOM_SELECT_PATTERN: obSound;
      static UI_LOOM_TAKE_RESULT: obSound;
      static UI_STONECUTTER_SELECT_RECIPE: obSound;
      static UI_STONECUTTER_TAKE_RESULT: obSound;
      static UI_TOAST_CHALLENGE_COMPLETE: obSound;
      static UI_TOAST_IN: obSound;
      static UI_TOAST_OUT: obSound;
      static WEATHER_RAIN: obSound;
      static WEATHER_RAIN_ABOVE: obSound;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obSound;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obSound[];
   }
   /**An Enum of categories for sounds.*/
   export class obSoundCategory extends jlEnum<obSoundCategory> {
      static AMBIENT: obSoundCategory;
      static BLOCKS: obSoundCategory;
      static HOSTILE: obSoundCategory;
      static MASTER: obSoundCategory;
      static MUSIC: obSoundCategory;
      static NEUTRAL: obSoundCategory;
      static PLAYERS: obSoundCategory;
      static RECORDS: obSoundCategory;
      static VOICE: obSoundCategory;
      static WEATHER: obSoundCategory;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obSoundCategory;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obSoundCategory[];
   }
   /**Represents a group of sounds for blocks that are played when various actions  happen (ie stepping, breaking, hitting, etc).*/
   export interface obSoundGroup {
      /**Gets the corresponding breaking sound for this group.*/
      getBreakSound(): obSound;
      /**Gets the corresponding fall sound for this group.*/
      getFallSound(): obSound;
      /**Gets the corresponding hit sound for this group.*/
      getHitSound(): obSound;
      /**Gets the pitch these sounds are played at.*/
      getPitch(): number;
      /**Gets the corresponding place sound for this group.*/
      getPlaceSound(): obSound;
      /**Gets the corresponding step sound for this group.*/
      getStepSound(): obSound;
      /**Get the volume these sounds are played at.*/
      getVolume(): number;
   }
   /**An event that is called when a world's spawn changes. The world's previous  spawn location is included.*/
   export class obewSpawnChangeEvent extends obewWorldEvent {
      constructor (world: obWorld, previousLocation: obLocation);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the previous spawn location*/
      getPreviousLocation (): obLocation;
   }
   /**Represents a spawn egg and it's spawned type.*/
   export interface obimSpawnEggMeta extends obimItemMeta {
      clone(): obimSpawnEggMeta;
   }
   /**Represents a Minecart with an entity spawner inside it.*/
   export interface obemSpawnerMinecart extends obeMinecart {}
   /**Called when an entity is spawned into a world by a spawner.    If a Spawner Spawn event is cancelled, the entity will not spawn.*/
   export class obeeSpawnerSpawnEvent extends obeeEntitySpawnEvent {
      constructor (spawnee: obeEntity, spawner: obbCreatureSpawner);
      getSpawner (): obbCreatureSpawner;
   }
   /**Represents a spectral arrow.*/
   export interface obeSpectralArrow extends obeAbstractArrow {
      /**Returns the amount of time that this arrow will apply  the glowing effect for.*/
      getGlowingTicks(): number;
      /**Sets the amount of time to apply the glowing effect for.*/
      setGlowingTicks(duration: number): void;
   }
   /**Represents a spell casting "Illager".*/
   export interface obeSpellcaster extends obeIllager {
      /**Gets the Spellcaster.Spell the entity is currently using.*/
      getSpell(): obeSSpell;
      /**Sets the Spellcaster.Spell the entity is currently using.*/
      setSpell(spell: obeSSpell): void;
   }
   /**Represents the current spell the entity is using.*/
   export class obeSSpell extends jlEnum<obeSSpell> {
      /**The spell that makes the target blind.*/
      static BLINDNESS: obeSSpell;
      /**The spell that makes the casting entity invisible.*/
      static DISAPPEAR: obeSSpell;
      /**The spell that summons Fangs.*/
      static FANGS: obeSSpell;
      /**No spell is being used..*/
      static NONE: obeSSpell;
      /**The spell that summons Vexes.*/
      static SUMMON_VEX: obeSSpell;
      /**The "wololo" spell.*/
      static WOLOLO: obeSSpell;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeSSpell;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeSSpell[];
   }
   /**Represents a Spider.*/
   export interface obeSpider extends obeMonster {}
   /**Called when a sponge absorbs water from the world.    The world will be in its previous state, and getBlocks() will  represent the changes to be made to the world, if the event is not cancelled.    As this is a physics based event it may be called multiple times for "the  same" changes.*/
   export class obebSpongeAbsorbEvent extends obebBlockEvent implements obeCancellable {
      constructor (block: obbBlock, waterblocks: juList<obbBlockState>);
      /**Get a list of all blocks to be removed by the sponge.*/
      getBlocks (): juList<obbBlockState>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Represents a Squid.*/
   export interface obeSquid extends obeWaterMob {}
   /**'shape' represents the texture and bounding box shape of these stairs.*/
   export interface obbdtStairs extends obbdBisected, obbdDirectional, obbdWaterlogged {
      /**Gets the value of the 'shape' property.*/
      getShape(): obbdtSShape;
      /**Sets the value of the 'shape' property.*/
      setShape(shape: obbdtSShape): void;
   }
   /**The shape of a stair block - used for constructing corners.*/
   export class obbdtSShape extends jlEnum<obbdtSShape> {
      /**Inner corner stair block with higher left side.*/
      static INNER_LEFT: obbdtSShape;
      /**Inner corner stair block with higher right side.*/
      static INNER_RIGHT: obbdtSShape;
      /**Outer corner stair block with higher left side.*/
      static OUTER_LEFT: obbdtSShape;
      /**Outer corner stair block with higher right side.*/
      static OUTER_RIGHT: obbdtSShape;
      /**Regular stair block.*/
      static STRAIGHT: obbdtSShape;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtSShape;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtSShape[];
   }
   /**Standard implementation to Messenger*/
   export class obpmStandardMessenger extends jlObject implements obpmMessenger {
      constructor ();
      /**Dispatches the specified incoming message to any registered listeners.*/
      dispatchIncomingMessage (source: obePlayer, channel: string, message: number[]): void;
      /**Gets a set containing all the incoming plugin channel registrations  that are on the requested channel.*/
      getIncomingChannelRegistrations (channel: string): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channel registrations  that the specified plugin has.*/
      getIncomingChannelRegistrations (plugin: obpPlugin): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channel registrations  that the specified plugin has on the requested channel.*/
      getIncomingChannelRegistrations (plugin: obpPlugin, channel: string): juSet<obpmPluginMessageListenerRegistration>;
      /**Gets a set containing all the incoming plugin channels.*/
      getIncomingChannels (): juSet<string>;
      /**Gets a set containing all the incoming plugin channels that the  specified plugin is registered for.*/
      getIncomingChannels (plugin: obpPlugin): juSet<string>;
      /**Gets a set containing all the outgoing plugin channels.*/
      getOutgoingChannels (): juSet<string>;
      /**Gets a set containing all the outgoing plugin channels that the  specified plugin is registered to.*/
      getOutgoingChannels (plugin: obpPlugin): juSet<string>;
      /**Checks if the specified plugin has registered to receive incoming  messages through the requested channel.*/
      isIncomingChannelRegistered (plugin: obpPlugin, channel: string): boolean;
      /**Checks if the specified plugin has registered to send outgoing messages  through the requested channel.*/
      isOutgoingChannelRegistered (plugin: obpPlugin, channel: string): boolean;
      /**Checks if the specified plugin message listener registration is valid.*/
      isRegistrationValid (registration: obpmPluginMessageListenerRegistration): boolean;
      /**Checks if the specified channel is a reserved name.*/
      isReservedChannel (channel: string): boolean;
      /**Registers the specific plugin for listening on the requested incoming  plugin channel, allowing it to act upon any plugin messages.*/
      registerIncomingPluginChannel (
         plugin: obpPlugin,
         channel: string,
         listener: obpmPluginMessageListener
      ): obpmPluginMessageListenerRegistration;
      /**Registers the specific plugin to the requested outgoing plugin channel,  allowing it to send messages through that channel to any clients.*/
      registerOutgoingPluginChannel (plugin: obpPlugin, channel: string): void;
      /**Unregisters the specific plugin from listening on all plugin channels  through all listeners.*/
      unregisterIncomingPluginChannel (plugin: obpPlugin): void;
      /**Unregisters the specific plugin from listening on the requested  incoming plugin channel, no longer allowing it to act upon any plugin  messages.*/
      unregisterIncomingPluginChannel (plugin: obpPlugin, channel: string): void;
      /**Unregisters the specific plugin's listener from listening on the  requested incoming plugin channel, no longer allowing it to act upon  any plugin messages.*/
      unregisterIncomingPluginChannel (plugin: obpPlugin, channel: string, listener: obpmPluginMessageListener): void;
      /**Unregisters the specific plugin from all outgoing plugin channels, no  longer allowing it to send any plugin messages.*/
      unregisterOutgoingPluginChannel (plugin: obpPlugin): void;
      /**Unregisters the specific plugin from the requested outgoing plugin  channel, no longer allowing it to send messages through that channel to  any clients.*/
      unregisterOutgoingPluginChannel (plugin: obpPlugin, channel: string): void;
      /**Validates the input of a Plugin Message, ensuring the arguments are all  valid.*/
      static validatePluginMessage (messenger: obpmMessenger, source: obpPlugin, channel: string, message: number[]): void;
   }
   export class cdpeeStaticMethodHandleEventExecutor extends jlObject implements obpEventExecutor {
      constructor (eventClass: jlClass<obeEvent>, m: jlrMethod);
      execute (listener: obeListener, event: obeEvent): void;
   }
   /**Represents a countable statistic, which is tracked by the server.*/
   export class obStatistic extends jlEnum<obStatistic> implements obKeyed {
      static ANIMALS_BRED: obStatistic;
      static ARMOR_CLEANED: obStatistic;
      static AVIATE_ONE_CM: obStatistic;
      static BANNER_CLEANED: obStatistic;
      static BEACON_INTERACTION: obStatistic;
      static BELL_RING: obStatistic;
      static BOAT_ONE_CM: obStatistic;
      static BREAK_ITEM: obStatistic;
      static BREWINGSTAND_INTERACTION: obStatistic;
      static CAKE_SLICES_EATEN: obStatistic;
      static CAULDRON_FILLED: obStatistic;
      static CAULDRON_USED: obStatistic;
      static CHEST_OPENED: obStatistic;
      static CLEAN_SHULKER_BOX: obStatistic;
      static CLIMB_ONE_CM: obStatistic;
      static CRAFT_ITEM: obStatistic;
      static CRAFTING_TABLE_INTERACTION: obStatistic;
      static CROUCH_ONE_CM: obStatistic;
      static DAMAGE_ABSORBED: obStatistic;
      static DAMAGE_BLOCKED_BY_SHIELD: obStatistic;
      static DAMAGE_DEALT: obStatistic;
      static DAMAGE_DEALT_ABSORBED: obStatistic;
      static DAMAGE_DEALT_RESISTED: obStatistic;
      static DAMAGE_RESISTED: obStatistic;
      static DAMAGE_TAKEN: obStatistic;
      static DEATHS: obStatistic;
      static DISPENSER_INSPECTED: obStatistic;
      static DROP: obStatistic;
      static DROP_COUNT: obStatistic;
      static DROPPER_INSPECTED: obStatistic;
      static ENDERCHEST_OPENED: obStatistic;
      static ENTITY_KILLED_BY: obStatistic;
      static FALL_ONE_CM: obStatistic;
      static FISH_CAUGHT: obStatistic;
      static FLOWER_POTTED: obStatistic;
      static FLY_ONE_CM: obStatistic;
      static FURNACE_INTERACTION: obStatistic;
      static HOPPER_INSPECTED: obStatistic;
      static HORSE_ONE_CM: obStatistic;
      static INTERACT_WITH_ANVIL: obStatistic;
      static INTERACT_WITH_BLAST_FURNACE: obStatistic;
      static INTERACT_WITH_CAMPFIRE: obStatistic;
      static INTERACT_WITH_CARTOGRAPHY_TABLE: obStatistic;
      static INTERACT_WITH_GRINDSTONE: obStatistic;
      static INTERACT_WITH_LECTERN: obStatistic;
      static INTERACT_WITH_LOOM: obStatistic;
      static INTERACT_WITH_SMITHING_TABLE: obStatistic;
      static INTERACT_WITH_SMOKER: obStatistic;
      static INTERACT_WITH_STONECUTTER: obStatistic;
      static ITEM_ENCHANTED: obStatistic;
      static JUMP: obStatistic;
      static KILL_ENTITY: obStatistic;
      static LEAVE_GAME: obStatistic;
      static MINE_BLOCK: obStatistic;
      static MINECART_ONE_CM: obStatistic;
      static MOB_KILLS: obStatistic;
      static NOTEBLOCK_PLAYED: obStatistic;
      static NOTEBLOCK_TUNED: obStatistic;
      static OPEN_BARREL: obStatistic;
      static PICKUP: obStatistic;
      static PIG_ONE_CM: obStatistic;
      /**Name is misleading, actually records ticks played.*/
      static PLAY_ONE_MINUTE: obStatistic;
      static PLAYER_KILLS: obStatistic;
      static RAID_TRIGGER: obStatistic;
      static RAID_WIN: obStatistic;
      static RECORD_PLAYED: obStatistic;
      static SHULKER_BOX_OPENED: obStatistic;
      static SLEEP_IN_BED: obStatistic;
      static SNEAK_TIME: obStatistic;
      static SPRINT_ONE_CM: obStatistic;
      static STRIDER_ONE_CM: obStatistic;
      static SWIM_ONE_CM: obStatistic;
      static TALKED_TO_VILLAGER: obStatistic;
      static TARGET_HIT: obStatistic;
      static TIME_SINCE_DEATH: obStatistic;
      static TIME_SINCE_REST: obStatistic;
      static TRADED_WITH_VILLAGER: obStatistic;
      static TRAPPED_CHEST_TRIGGERED: obStatistic;
      static USE_ITEM: obStatistic;
      static WALK_ON_WATER_ONE_CM: obStatistic;
      static WALK_ONE_CM: obStatistic;
      static WALK_UNDER_WATER_ONE_CM: obStatistic;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Gets the type of this statistic.*/
      getType (): obSType;
      /**Checks if this is a substatistic dealing with blocks.*/
      isBlock (): boolean;
      /**Checks if this is a substatistic.*/
      isSubstatistic (): boolean;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obStatistic;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obStatistic[];
   }
   /**The type of statistic.*/
   export class obSType extends jlEnum<obSType> {
      /**Statistics of this type require a Block Material qualifier.*/
      static BLOCK: obSType;
      /**Statistics of this type require an EntityType qualifier.*/
      static ENTITY: obSType;
      /**Statistics of this type require an Item Material qualifier.*/
      static ITEM: obSType;
      /**Statistics of this type do not require a qualifier.*/
      static UNTYPED: obSType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obSType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obSType[];
   }
   /**Represents a client requesting the current status from the server (e.g. from  the server list).*/
   export interface cdpnStatusClient extends cdpnNetworkClient {
      /**Returns whether the client is using an older version that doesn't  support all of the features in PaperServerListPingEvent.*/
      isLegacy(): boolean;
   }
   /**Represents an entity which may be saddled, ridden and steered using an item.*/
   export interface obeSteerable extends obeAnimals {
      /**Get the time in ticks this entity's movement is being increased.*/
      getBoostTicks(): number;
      /**Get the time in ticks this entity's movement has been increased as of the  most recent boost.*/
      getCurrentBoostTicks(): number;
      /**Get the material used to steer this entity when ridden by a player.*/
      getSteerMaterial(): obMaterial;
      /**Check if the pig has a saddle.*/
      hasSaddle(): boolean;
      /**Set the time in ticks this entity's movement will be increased.*/
      setBoostTicks(ticks: number): void;
      /**Set the time in ticks this entity's movement has been increased relative  to the most recent boost.*/
      setCurrentBoostTicks(ticks: number): void;
      /**Sets if the pig has a saddle or not*/
      setSaddle(saddled: boolean): void;
   }
   /**Interface to the inventory of a Stonecutter.*/
   export interface obiStonecutterInventory extends obiInventory {
      /**Gets the input item.*/
      getInputItem(): obiItemStack;
      /**Gets the result item.*/
      getResult(): obiItemStack;
      /**Sets the input item.*/
      setInputItem(itemStack: obiItemStack): void;
      /**Sets the result item.*/
      setResult(itemStack: obiItemStack): void;
   }
   /**Represents a Stonecutting recipe.*/
   export class obiStonecuttingRecipe extends jlObject implements obiRecipe, obKeyed {
      constructor (key: obNamespacedKey, result: obiItemStack, input: obiRecipeChoice);
      constructor (key: obNamespacedKey, result: obiItemStack, source: obMaterial);
      /**Get the group of this recipe.*/
      getGroup (): string;
      /**Get the input material.*/
      getInput (): obiItemStack;
      /**Get the input choice.*/
      getInputChoice (): obiRecipeChoice;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Get the result of this recipe.*/
      getResult (): obiItemStack;
      /**Set the group of this recipe.*/
      setGroup (group: string): void;
      /**Sets the input of this cooking recipe.*/
      setInput (input: obMaterial): obiStonecuttingRecipe;
      /**Sets the input of this cooking recipe.*/
      setInputChoice (input: obiRecipeChoice): obiStonecuttingRecipe;
   }
   /**Represents a minecart with a chest. These types of minecarts have their own inventory that can be accessed using methods  from the InventoryHolder interface.*/
   export interface obemStorageMinecart extends obeMinecart, obiInventoryHolder, cdplLootableEntityInventory {}
   /**Represents a Stray - variant of Skeleton.*/
   export interface obeStray extends obeSkeleton {}
   /**Represents a Strider.*/
   export interface obeStrider extends obeSteerable, obeVehicle {
      /**Check whether or not this strider is out of warm blocks and shivering.*/
      isShivering(): boolean;
      /**Set whether or not this strider is shivering.*/
      setShivering(shivering: boolean): void;
   }
   /**Called when a Strider's temperature has changed as a result of  entering or existing blocks it considers warm.*/
   export class obeeStriderTemperatureChangeEvent extends obeeEntityEvent {
      constructor (what: obeStrider, shivering: boolean);
      /**Returns the Entity involved in this event*/
      getEntity (): obeStrider;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the Strider's new shivering state.*/
      isShivering (): boolean;
   }
   /**StringPrompt is the base class for any prompt that accepts an arbitrary  string from the user.*/
   export class obcStringPrompt extends jlObject implements obcPrompt {
      constructor ();
      /**Ensures that the prompt waits for the user to provide input.*/
      blocksForInput (context: obcConversationContext): boolean;
   }
   export class obuStringUtil extends jlObject {
      constructor ();
      /**Copies all elements from the iterable collection of originals to the  collection provided.*/
      static copyPartialMatches<T extends juCollection<string>> (
         token: string,
         originals: jlIterable<string>,
         collection: T
      ): T;
      /**This method uses a region to check case-insensitive equality.*/
      static startsWithIgnoreCase (string: string, prefix: string): boolean;
   }
   /**Represents a structure block that can save and load blocks from a file. They  can only be used by OPs, and are not obtainable in survival.*/
   export interface obbStructure extends obbTileState {
      /**Get the name of who created this structure.*/
      getAuthor(): string;
      /**Get the integrity of this structure.*/
      getIntegrity(): number;
      /**Get the metadata function this structure block will perform when  activated.*/
      getMetadata(): string;
      /**How this structure is mirrored.*/
      getMirror(): obbsMirror;
      /**The relative position of the structure outline based on the position of  the structure block.*/
      getRelativePosition(): obuBlockVector;
      /**Get how this structure is rotated.*/
      getRotation(): obbsStructureRotation;
      /**The seed used to determine how many blocks are removed upon loading of  this structure.*/
      getSeed(): number;
      /**The name of this structure.*/
      getStructureName(): string;
      /**The distance to the opposite corner of this structure.*/
      getStructureSize(): obuBlockVector;
      /**Get the UsageMode of this structure block.*/
      getUsageMode(): obbsUsageMode;
      /**Get if this structure block is currently showing the bounding box.*/
      isBoundingBoxVisible(): boolean;
      /**Get if this structure block should ignore entities.*/
      isIgnoreEntities(): boolean;
      /**Check if this structure block is currently showing all air blocks*/
      isShowAir(): boolean;
      /**Set the name of whoever created this structure.*/
      setAuthor(author: string): void;
      /**Set the name of whoever created this structure using a  LivingEntity.*/
      setAuthor(livingEntity: obeLivingEntity): void;
      /**Set if this structure box should show the bounding box.*/
      setBoundingBoxVisible(showBoundingBox: boolean): void;
      /**While in UsageMode.SAVE mode, this will ignore any entities when  saving the structure.*/
      setIgnoreEntities(ignoreEntities: boolean): void;
      /**Set the integrity of the structure.*/
      setIntegrity(integrity: number): void;
      /**Only applicable while in UsageMode.DATA.*/
      setMetadata(metadata: string): void;
      /**Sets the mirroring of the structure.*/
      setMirror(mirror: obbsMirror): void;
      /**Set the relative position from the structure block.*/
      setRelativePosition(vector: obuBlockVector): void;
      /**Set how this structure is rotated.*/
      setRotation(rotation: obbsStructureRotation): void;
      /**The seed used to determine which blocks will be removed upon loading.*/
      setSeed(seed: number): void;
      /**Set if the structure outline should show air blocks.*/
      setShowAir(showAir: boolean): void;
      /**Set the name of this structure.*/
      setStructureName(name: string): void;
      /**Set the maximum size of this structure from the origin point.*/
      setStructureSize(vector: obuBlockVector): void;
      /**Set the UsageMode of this structure block.*/
      setUsageMode(mode: obbsUsageMode): void;
   }
   /**'mode' represents the different modes in which this structure block may  operate.*/
   export interface obbdtStructureBlock extends obbdBlockData {
      /**Gets the value of the 'mode' property.*/
      getMode(): obbdtSMode;
      /**Sets the value of the 'mode' property.*/
      setMode(mode: obbdtSMode): void;
   }
   /**Operating mode of a structure block.*/
   export class obbdtSMode extends jlEnum<obbdtSMode> {
      /**Used for detection of two opposite corners of a structure.*/
      static CORNER: obbdtSMode;
      /**Dummy block used to run a custom function during world generation  before being removed.*/
      static DATA: obbdtSMode;
      /**Allows loading of a structure.*/
      static LOAD: obbdtSMode;
      /**Allows selection and saving of a structure.*/
      static SAVE: obbdtSMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtSMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtSMode[];
   }
   /**Event that is called when an organic structure attempts to grow (Sapling ->  Tree), (Mushroom -> Huge Mushroom), naturally or using bonemeal.*/
   export class obewStructureGrowEvent extends obewWorldEvent implements obeCancellable {
      constructor (
         location: obLocation,
         species: obTreeType,
         bonemeal: boolean,
         player: obePlayer,
         blocks: juList<obbBlockState>
      );
      /**Gets a list of all blocks associated with the structure.*/
      getBlocks (): juList<obbBlockState>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the location of the structure.*/
      getLocation (): obLocation;
      /**Gets the player that created the structure.*/
      getPlayer (): obePlayer;
      /**Gets the species type (birch, normal, pine, red mushroom, brown  mushroom)*/
      getSpecies (): obTreeType;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Checks if structure was grown using bonemeal.*/
      isFromBonemeal (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Called before a structure\/feature is located.  This happens when:        The \/locate command is used.      An Eye of Ender is used.      An Explorer\/Treasure Map is activated.      World.locateNearestStructure(Location, StructureType, int, boolean) is invoked.*/
   export class ippewStructureLocateEvent extends obewWorldEvent implements obeCancellable {
      constructor (
         world: obWorld,
         origin: obLocation,
         structureType: obStructureType,
         radius: number,
         findUnexplored: boolean
      );
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the Location from which the search is to be conducted.*/
      getOrigin (): obLocation;
      /**Gets the search radius in which to attempt locating the structure.*/
      getRadius (): number;
      /**Gets the location set as the structure location, if it was defined.*/
      getResult (): obLocation;
      /**Gets the StructureType that is to be located.*/
      getType (): obStructureType;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets whether to search exclusively for unexplored structures.*/
      setFindUnexplored (findUnexplored: boolean): void;
      /**Sets the search radius in which to attempt locating the structure.*/
      setRadius (radius: number): void;
      /**Sets the result Location.*/
      setResult (result: obLocation): void;
      /**Sets the StructureType that is to be located.*/
      setType (type: obStructureType): void;
      /**Gets whether to search exclusively for unexplored structures.*/
      shouldFindUnexplored (): boolean;
   }
   /**Represents how a Structure can be rotated.*/
   export class obbsStructureRotation extends jlEnum<obbsStructureRotation> {
      /**Rotated clockwise 180 degrees.*/
      static CLOCKWISE_180: obbsStructureRotation;
      /**Rotated clockwise 90 degrees.*/
      static CLOCKWISE_90: obbsStructureRotation;
      /**Rotated counter clockwise 90 degrees.*/
      static COUNTERCLOCKWISE_90: obbsStructureRotation;
      /**No rotation.*/
      static NONE: obbsStructureRotation;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbsStructureRotation;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbsStructureRotation[];
   }
   /**This class handles the creation and storage of all structure types for  Bukkit. Structure Types are the different kinds of structures that can be  generated during world\/chunk generation. These include Villages, Mineshafts,  Mansions, etc.    The registration of new StructureTypes is case-sensitive.*/
   export class obStructureType extends jlObject {
      equals (other: jlObject): boolean;
      /**Get the MapCursor.Type that this structure can use on maps.*/
      getMapIcon (): obmMType;
      /**Get the name of this structure.*/
      getName (): string;
      /**Get all registered StructureTypes.*/
      static getStructureTypes (): juMap<string, obStructureType>;
      hashCode (): number;
      toString (): string;
   }
   /**Represents a suspicious stew that can have custom effects.*/
   export interface obimSuspiciousStewMeta extends obimItemMeta {
      /**Adds a custom potion effect to this suspicious stew.*/
      addCustomEffect(effect: obpPotionEffect, overwrite: boolean): boolean;
      /**Removes all custom potion effects from this suspicious stew.*/
      clearCustomEffects(): boolean;
      clone(): obimSuspiciousStewMeta;
      /**Gets an immutable list containing all custom potion effects applied to  this suspicious stew.*/
      getCustomEffects(): juList<obpPotionEffect>;
      /**Checks for a specific custom potion effect type on this suspicious stew.*/
      hasCustomEffect(type: obpPotionEffectType): boolean;
      /**Checks for the presence of custom potion effects.*/
      hasCustomEffects(): boolean;
      /**Removes a custom potion effect from this suspicious stew.*/
      removeCustomEffect(type: obpPotionEffectType): boolean;
   }
   export interface obbdtSwitch extends obbdDirectional, obbdFaceAttachable, obbdPowerable {}
   /**Called when a CommandSender of any description (ie: player or  console) attempts to tab complete.    Note that due to client changes, if the sender is a Player, this event will  only begin to fire once command arguments are specified, not commands  themselves. Plugins wishing to remove commands from tab completion are  advised to ensure the client does not have permission for the relevant  commands, or use PlayerCommandSendEvent.*/
   export class obesTabCompleteEvent extends obeEvent implements obeCancellable {
      constructor (sender: obcCommandSender, buffer: string, completions: juList<string>);
      constructor (
         sender: obcCommandSender,
         buffer: string,
         completions: juList<string>,
         isCommand: boolean,
         location: obLocation
      );
      /**Return the entire buffer which formed the basis of this completion.*/
      getBuffer (): string;
      /**The list of completions which will be offered to the sender, in order.*/
      getCompletions (): juList<string>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getLocation (): obLocation;
      /**Get the sender completing this command.*/
      getSender (): obcCommandSender;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isCommand (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
      /**Set the completions offered, overriding any already set.*/
      setCompletions (completions: juList<string>): void;
   }
   /**Represents a class which can suggest tab completions for commands.*/
   export interface obcTabCompleter {
      /**Requests a list of possible completions for a command argument.*/
      onTabComplete(sender: obcCommandSender, command: obcCommand, alias: string, args: string[]): juList<string>;
   }
   /**This class is provided as a convenience to implement both TabCompleter and  CommandExecutor.*/
   export interface obcTabExecutor extends obcTabCompleter, obcCommandExecutor {}
   /**Represents a tag that may be defined by the server or a resource pack to  group like things together.   Note that whilst all tags defined within this interface must be present in  implementations, their existence is not guaranteed across future versions.*/
   export interface obTag<T extends Keyed> extends obKeyed {
      /**Gets an immutable set of all tagged items.*/
      getValues(): juSet<T>;
      /**Returns whether or not this tag has an entry for the specified item.*/
      isTagged(item: T): boolean;
   }
   export interface obeTameable extends obeAnimals {
      /**Gets the current owning AnimalTamer*/
      getOwner(): obeAnimalTamer;
      /**Gets the owners UUID*/
      getOwnerUniqueId(): juUUID;
      /**Check if this is tamed*/
      isTamed(): boolean;
      /**Set this to be owned by given AnimalTamer.*/
      setOwner(tamer: obeAnimalTamer): void;
      /**Sets if this has been tamed.*/
      setTamed(tame: boolean): void;
   }
   /**Represents information about a targeted block*/
   export class cdpbTargetBlockInfo extends jlObject {
      constructor (block: obbBlock, blockFace: obbBlockFace);
      /**Get the block that is targeted*/
      getBlock (): obbBlock;
      /**Get the targeted BlockFace*/
      getBlockFace (): obbBlockFace;
      /**Get the relative Block to the targeted block on the side it is targeted at*/
      getRelativeBlock (): obbBlock;
   }
   export class cdpbTFluidMode extends jlEnum<cdpbTFluidMode> {
      static ALWAYS: cdpbTFluidMode;
      static NEVER: cdpbTFluidMode;
      static SOURCE_ONLY: cdpbTFluidMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpbTFluidMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpbTFluidMode[];
   }
   /**Represents information about a targeted entity*/
   export class cdpeTargetEntityInfo extends jlObject {
      constructor (entity: obeEntity, hitVec: obuVector);
      /**Get the entity that is targeted*/
      getEntity (): obeEntity;
      /**Get the position the entity is targeted at*/
      getHitVector (): obuVector;
   }
   /**Called when a Target Block is hit by a projectile.    Cancelling this event will stop the Target from emitting a redstone signal,  and in the case that the shooter is a player, will stop them from receiving  advancement criteria.*/
   export class ippebTargetHitEvent extends obeeProjectileHitEvent implements obeCancellable {
      constructor (projectile: obeProjectile, block: obbBlock, blockFace: obbBlockFace, signalStrength: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the strength of the redstone signal to be emitted by the Target block*/
      getSignalStrength (): number;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Whether or not to cancel any behavior that would occur from the arrow hitting the block*/
      setCancelled (cancelled: boolean): void;
      /**Sets the strength of the redstone signal to be emitted by the Target block*/
      setSignalStrength (signalStrength: number): void;
   }
   /**A team on a scoreboard that has a common display theme and other  properties. This team is only relevant to the display of the associated  scoreboard.*/
   export interface obsTeam {
      /**This puts the specified entry onto this team for the scoreboard.*/
      addEntry(entry: string): void;
      /**Gets the team friendly fire state*/
      allowFriendlyFire(): boolean;
      /**Gets the team's ability to see invisible teammates.*/
      canSeeFriendlyInvisibles(): boolean;
      /**Gets the color of the team.*/
      getColor(): obChatColor;
      /**Gets the name displayed to entries for this team*/
      getDisplayName(): string;
      /**Gets the Set of entries on the team*/
      getEntries(): juSet<string>;
      /**Gets the name of this Team*/
      getName(): string;
      /**Get an option for this team*/
      getOption(option: obsTOption): obsTOptionStatus;
      /**Gets the prefix prepended to the display of entries on this team.*/
      getPrefix(): string;
      /**Gets the Scoreboard to which this team is attached*/
      getScoreboard(): obsScoreboard;
      /**Gets the size of the team*/
      getSize(): number;
      /**Gets the suffix appended to the display of entries on this team.*/
      getSuffix(): string;
      /**Checks to see if the specified entry is a member of this team.*/
      hasEntry(entry: string): boolean;
      /**Removes the entry from this team.*/
      removeEntry(entry: string): boolean;
      /**Sets the team friendly fire state*/
      setAllowFriendlyFire(enabled: boolean): void;
      /**Sets the team's ability to see invisible teammates.*/
      setCanSeeFriendlyInvisibles(enabled: boolean): void;
      /**Sets the color of the team.*/
      setColor(color: obChatColor): void;
      /**Sets the name displayed to entries for this team*/
      setDisplayName(displayName: string): void;
      /**Set an option for this team*/
      setOption(option: obsTOption, status: obsTOptionStatus): void;
      /**Sets the prefix prepended to the display of entries on this team.*/
      setPrefix(prefix: string): void;
      /**Sets the suffix appended to the display of entries on this team.*/
      setSuffix(suffix: string): void;
      /**Unregisters this team from the Scoreboard*/
      unregister(): void;
   }
   /**Represents an option which may be applied to this team.*/
   export class obsTOption extends jlEnum<obsTOption> {
      /**How players of this team collide with others.*/
      static COLLISION_RULE: obsTOption;
      /**How to display the death messages for players on this team.*/
      static DEATH_MESSAGE_VISIBILITY: obsTOption;
      /**How to display the name tags of players on this team.*/
      static NAME_TAG_VISIBILITY: obsTOption;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obsTOption;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obsTOption[];
   }
   /**How an option may be applied to members of this team.*/
   export class obsTOptionStatus extends jlEnum<obsTOptionStatus> {
      /**Apply this option to everyone.*/
      static ALWAYS: obsTOptionStatus;
      /**Apply this option only for opposing teams.*/
      static FOR_OTHER_TEAMS: obsTOptionStatus;
      /**Apply this option for only team members.*/
      static FOR_OWN_TEAM: obsTOptionStatus;
      /**Never apply this option.*/
      static NEVER: obsTOptionStatus;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obsTOptionStatus;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obsTOptionStatus[];
   }
   /**'type' represents the type of piston which this (technical) block corresponds  to.*/
   export interface obbdtTechnicalPiston extends obbdDirectional {
      /**Gets the value of the 'type' property.*/
      getType(): obbdtTType;
      /**Sets the value of the 'type' property.*/
      setType(type: obbdtTType): void;
   }
   /**Different piston variants.*/
   export class obbdtTType extends jlEnum<obbdtTType> {
      /**A normal piston which does not pull connected blocks backwards on  retraction.*/
      static NORMAL: obbdtTType;
      /**A sticky piston which will also retract connected blocks.*/
      static STICKY: obbdtTType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtTType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtTType[];
   }
   export interface obeThrowableProjectile extends obeProjectile {
      /**Gets the ItemStack the thrown projectile will display.*/
      getItem(): obiItemStack;
      /**Sets the display ItemStack for the thrown projectile.*/
      setItem(item: obiItemStack): void;
   }
   /**Called when a thrown egg might hatch.    This event fires for all thrown eggs that may hatch, players, dispensers, etc.*/
   export class cdpeeThrownEggHatchEvent extends obeEvent {
      constructor (egg: obeEgg, hatching: boolean, numHatches: number, hatchingType: obeEntityType);
      /**Gets the egg involved in this event.*/
      getEgg (): obeEgg;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the type of the mob being hatched (EntityType.CHICKEN by default)*/
      getHatchingType (): obeEntityType;
      /**Get the number of mob hatches from the egg.*/
      getNumHatches (): number;
      /**Gets whether the egg is hatching or not.*/
      isHatching (): boolean;
      /**Sets whether the egg will hatch or not.*/
      setHatching (hatching: boolean): void;
      /**Change the type of mob being hatched by the egg*/
      setHatchingType (hatchType: obeEntityType): void;
      /**Change the number of mobs coming out of the hatched egg*/
      setNumHatches (numHatches: number): void;
   }
   /**Represents a thrown Experience bottle.*/
   export interface obeThrownExpBottle extends obeThrowableProjectile {}
   /**Represents a thrown potion bottle*/
   export interface obeThrownPotion extends obeProjectile {
      /**Returns the effects that are applied by this potion.*/
      getEffects(): juCollection<obpPotionEffect>;
      /**Returns a copy of the ItemStack for this thrown potion.*/
      getItem(): obiItemStack;
      /**Set the ItemStack for this thrown potion.*/
      setItem(item: obiItemStack): void;
   }
   /**Stores data for thunder state changing in a world*/
   export class obewThunderChangeEvent extends obewWeatherEvent implements obeCancellable {
      constructor (world: obWorld, to: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Gets the state of thunder that the world is being set to*/
      toThunderState (): boolean;
   }
   /**Represents a block state that also hosts a tile entity at the given location.   This interface alone is merely a marker that does not provide any data.   Data about the tile entities is provided by the respective interface for each  tile entity type.   After modifying the data provided by a TileState, BlockState.update() needs to  be called to store the data.*/
   export interface obbTileState extends obbBlockState, obpPersistentDataHolder {
      /**Returns a custom tag container capable of storing tags on the object.*/
      getPersistentDataContainer(): obpPersistentDataContainer;
   }
   export class catTimedEventExecutor extends jlObject implements obpEventExecutor {
      constructor (executor: obpEventExecutor, plugin: obpPlugin, method: jlrMethod, eventClass: jlClass<obeEvent>);
      execute (listener: obeListener, event: obeEvent): void;
   }
   /**Extends RegisteredListener to include timing information*/
   export class obpTimedRegisteredListener extends obpRegisteredListener {
      constructor (
         pluginListener: obeListener,
         eventExecutor: obpEventExecutor,
         eventPriority: obeEventPriority,
         registeredPlugin: obpPlugin,
         listenCancelled: boolean
      );
      /**Calls the event executor*/
      callEvent (event: obeEvent): void;
      /**Gets the total times this listener has been called*/
      getCount (): number;
      /**Gets the class of the events this listener handled.*/
      getEventClass (): jlClass<obeEvent>;
      /**Gets the total time calls to this listener have taken*/
      getTotalTime (): number;
      /**Gets whether this listener has handled multiple events, such that for  some two events, eventA.getClass() != eventB.getClass().*/
      hasMultiple (): boolean;
      /**Resets the call count and total time for this listener*/
      reset (): void;
   }
   /**Called when the time skips in a world.    If the event is cancelled the time will not change.*/
   export class obewTimeSkipEvent extends obewWorldEvent implements obeCancellable {
      constructor (world: obWorld, skipReason: obewTSkipReason, skipAmount: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the amount of time that was skipped.*/
      getSkipAmount (): number;
      /**Gets the reason why the time has skipped.*/
      getSkipReason (): obewTSkipReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the amount of time to skip.*/
      setSkipAmount (skipAmount: number): void;
   }
   /**An enum specifying the reason the time skipped.*/
   export class obewTSkipReason extends jlEnum<obewTSkipReason> {
      /**When time is changed using the vanilla \/time command.*/
      static COMMAND: obewTSkipReason;
      /**When time is changed by a plugin.*/
      static CUSTOM: obewTSkipReason;
      /**When time is changed by all players sleeping in their beds and the  night skips.*/
      static NIGHT_SKIP: obewTSkipReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obewTSkipReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obewTSkipReason[];
   }
   /**Provides an ability to time sections of code within the Minecraft Server*/
   export interface catTiming extends jlAutoCloseable {
      close(): void;
      /**Used internally to get the actual backing Handler in the case of delegated Handlers*/
      getTimingHandler(): catTimingHandler;
      /**Starts timing the execution until stopTiming() is called.*/
      startTiming(): catTiming;
      /**Starts timing the execution until stopTiming() is called.*/
      startTimingIfSync(): catTiming;
      /**Stops timing and records the data.*/
      stopTiming(): void;
      /**Stops timing and records the data.*/
      stopTimingIfSync(): void;
   }
   export class catTimingHistory extends jlObject {}
   export class catTimings extends jlObject {
      /**Generates a report and sends it to the specified listener.*/
      static generateReport (sender: catTimingsReportListener): void;
      /**Generates a report and sends it to the specified command sender.*/
      static generateReport (sender: obcCommandSender): void;
      /**Gets the interval between Timing History report generation.*/
      static getHistoryInterval (): number;
      /**Gets how long in ticks Timings history is kept for the server.*/
      static getHistoryLength (): number;
      /**Gets whether or not the Spigot Timings system is enabled*/
      static isTimingsEnabled (): boolean;
      /**Sets whether or not the Timings should monitor at Verbose level.*/
      static isVerboseTimingsEnabled (): boolean;
      /**Returns a Timing for a plugin corresponding to a name.*/
      static of (plugin: obpPlugin, name: string): catTiming;
      /**Returns a handler that has a groupHandler timer handler.*/
      static of (plugin: obpPlugin, name: string, groupHandler: catTiming): catTiming;
      /**Returns a Timing object after starting it, useful for Java7 try-with-resources.*/
      static ofStart (plugin: obpPlugin, name: string): catTiming;
      /**Returns a Timing object after starting it, useful for Java7 try-with-resources.*/
      static ofStart (plugin: obpPlugin, name: string, groupHandler: catTiming): catTiming;
      /**Resets all Timing Data*/
      static reset (): void;
      /**Sets the interval between Timing History report generations.*/
      static setHistoryInterval (interval: number): void;
      /**Sets how long Timing History reports are kept for the server.*/
      static setHistoryLength (length: number): void;
      /**Sets whether or not the Spigot Timings system should be enabled*/
      static setTimingsEnabled (enabled: boolean): void;
      /**Sets whether or not the Timings should monitor at Verbose level.*/
      static setVerboseTimingsEnabled (enabled: boolean): void;
   }
   export class catTimingsCommand extends obcdBukkitCommand {
      constructor (name: string);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, currentAlias: string, args: string[]): boolean;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
   }
   export class catTimingsManager extends jlObject {
      /**Due to access restrictions, we need a helper method to get a Command TimingHandler with String group*/
      static getCommandTiming (pluginName: string, command: obcCommand): catTiming;
      /**Looks up the class loader for the specified class, and if it is a PluginClassLoader, return the  Plugin that created this class.*/
      static getPluginByClassloader (clazz: jlClass<any>): obpPlugin;
   }
   export class catTimingsReportListener extends jlObject implements obcMessageCommandSender {
      constructor (senders: juList<obcCommandSender>);
      constructor (senders: juList<obcCommandSender>, onDone: jlRunnable);
      constructor (senders: obcCommandSender);
      constructor (sender: obcCommandSender, onDone: jlRunnable);
      addConsoleIfNeeded (): void;
      done (): void;
      done (url: string): void;
      getTimingsURL (): string;
      /**Sends this sender a message*/
      sendMessage (message: string): void;
   }
   /**Represents a title to may be sent to a Player.   A title can be sent without subtitle text.*/
   export class cdpTitle extends jlObject {
      constructor (title: string);
      constructor (title: string, subtitle: string);
      constructor (title: string, subtitle: string, fadeIn: number, stay: number, fadeOut: number);
      constructor (title: nmbacBaseComponent);
      constructor (title: nmbacBaseComponent[]);
      constructor (title: nmbacBaseComponent[], subtitle: nmbacBaseComponent[]);
      constructor (
         title: nmbacBaseComponent[],
         subtitle: nmbacBaseComponent[],
         fadeIn: number,
         stay: number,
         fadeOut: number
      );
      constructor (title: nmbacBaseComponent, subtitle: nmbacBaseComponent);
      constructor (title: nmbacBaseComponent, subtitle: nmbacBaseComponent, fadeIn: number, stay: number, fadeOut: number);
      /**Sends the title directly to all online players*/
      broadcast (): void;
      static builder (): cdpTBuilder;
      /**Gets the number of ticks to fade in.*/
      getFadeIn (): number;
      /**Gets the number of ticks to fade out.*/
      getFadeOut (): number;
      /**Gets the number of ticks to stay.*/
      getStay (): number;
      /**Gets the text of this title's subtitle*/
      getSubtitle (): nmbacBaseComponent[];
      /**Gets the text of this title*/
      getTitle (): nmbacBaseComponent[];
      /**Sends the title directly to the defined players*/
      send (players: juCollection<obePlayer>): void;
      /**Sends the title directly to an player*/
      send (player: obePlayer): void;
      /**Sends the title directly to the defined players*/
      send (players: obePlayer[]): void;
   }
   /**A builder for creating titles*/
   export class cdpTBuilder extends jlObject {
      constructor ();
      /**Create a title based on the values in the builder.*/
      build (): cdpTitle;
      /**Sets the number of ticks for the title to fade in*/
      fadeIn (fadeIn: number): cdpTBuilder;
      /**Sets the number of ticks for the title to fade out.*/
      fadeOut (fadeOut: number): cdpTBuilder;
      /**Sets the number of ticks for the title to stay.*/
      stay (stay: number): cdpTBuilder;
      /**Sets the subtitle to the given text.*/
      subtitle (subtitle: string): cdpTBuilder;
      /**Sets the subtitle to the given text.*/
      subtitle (subtitle: nmbacBaseComponent): cdpTBuilder;
      /**Sets the subtitle to the given text.*/
      subtitle (subtitle: nmbacBaseComponent[]): cdpTBuilder;
      /**Sets the title to the given text.*/
      title (title: string): cdpTBuilder;
      /**Sets the title to the given text.*/
      title (title: nmbacBaseComponent): cdpTBuilder;
      /**Sets the title to the given text.*/
      title (title: nmbacBaseComponent[]): cdpTBuilder;
   }
   /**'unstable' indicates whether this TNT will explode on punching.*/
   export interface obbdtTNT extends obbdBlockData {
      /**Gets the value of the 'unstable' property.*/
      isUnstable(): boolean;
      /**Sets the value of the 'unstable' property.*/
      setUnstable(unstable: boolean): void;
   }
   /**Represents a Primed TNT.*/
   export interface obeTNTPrimed extends obeExplosive {
      /**Retrieve the number of ticks until the explosion of this TNTPrimed  entity*/
      getFuseTicks(): number;
      /**Gets the source of this primed TNT.*/
      getSource(): obeEntity;
      /**Set the number of ticks until the TNT blows up after being primed.*/
      setFuseTicks(fuseTicks: number): void;
      /**Sets the source of this primed TNT.*/
      setSource(source: obeEntity): void;
   }
   /**Called when TNT block is about to turn into TNTPrimed    Cancelling it won't turn TNT into TNTPrimed and leaves  the TNT block as-is*/
   export class cdpebTNTPrimeEvent extends obebBlockEvent implements obeCancellable {
      constructor (theBlock: obbBlock, reason: cdpebTPrimeReason, primerEntity: obeEntity);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the TNT primer Entity.*/
      getPrimerEntity (): obeEntity;
      /**Gets the TNT prime reason*/
      getReason (): cdpebTPrimeReason;
      /**Gets whether spawning TNTPrimed should be cancelled or not*/
      isCancelled (): boolean;
      /**Sets whether to cancel spawning TNTPrimed or not*/
      setCancelled (cancel: boolean): void;
   }
   export class cdpebTPrimeReason extends jlEnum<cdpebTPrimeReason> {
      /**When TNT prime was caused by other explosion (chain reaction)*/
      static EXPLOSION: cdpebTPrimeReason;
      /**When TNT prime was caused by fire*/
      static FIRE: cdpebTPrimeReason;
      /**When Player used Material.FLINT_AND_STEEL or  Material.FIRE_CHARGE on given TNT block*/
      static ITEM: cdpebTPrimeReason;
      /**When TNT prime was caused by an Entity shooting TNT  using a bow with Enchantment.ARROW_FIRE enchantment*/
      static PROJECTILE: cdpebTPrimeReason;
      /**When redstone power triggered the TNT prime*/
      static REDSTONE: cdpebTPrimeReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): cdpebTPrimeReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): cdpebTPrimeReason[];
   }
   /**Represents a trader Llama.*/
   export interface obeTraderLlama extends obeLlama {}
   /**This event is called whenever a player clicks a new trade on the trades  sidebar.    This event allows the user to get the index of the trade, letting them get  the MerchantRecipe via the Merchant.*/
   export class obeiTradeSelectEvent extends obeiInventoryInteractEvent {
      constructor (transaction: obiInventoryView, newIndex: number);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Used to get the index of the trade the player clicked on.*/
      getIndex (): number;
      /**Gets the primary Inventory involved in this transaction*/
      getInventory (): obiMerchantInventory;
      /**Get the Merchant involved.*/
      getMerchant (): obiMerchant;
   }
   export interface obbdtTrapDoor extends obbdBisected, obbdDirectional, obbdOpenable, obbdPowerable, obbdWaterlogged {}
   /**Represents the different species of trees regardless of size.*/
   export class obTreeSpecies extends jlEnum<obTreeSpecies> {
      /**Represents acacia trees.*/
      static ACACIA: obTreeSpecies;
      /**Represents birches.*/
      static BIRCH: obTreeSpecies;
      /**Represents dark oak trees.*/
      static DARK_OAK: obTreeSpecies;
      /**Represents the common tree species.*/
      static GENERIC: obTreeSpecies;
      /**Represents jungle trees.*/
      static JUNGLE: obTreeSpecies;
      /**Represents the darker barked\/leaved tree species.*/
      static REDWOOD: obTreeSpecies;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obTreeSpecies;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obTreeSpecies[];
   }
   /**Tree and organic structure types.*/
   export class obTreeType extends jlEnum<obTreeType> {
      /**Acacia tree.*/
      static ACACIA: obTreeType;
      /**Regular tree, extra tall with branches*/
      static BIG_TREE: obTreeType;
      /**Birch tree*/
      static BIRCH: obTreeType;
      /**Big brown mushroom; tall and umbrella-like*/
      static BROWN_MUSHROOM: obTreeType;
      /**Large plant native to The End*/
      static CHORUS_PLANT: obTreeType;
      /**Jungle tree with cocoa plants; 1 block wide*/
      static COCOA_TREE: obTreeType;
      /**Large crimson fungus native to the nether*/
      static CRIMSON_FUNGUS: obTreeType;
      /**Dark Oak tree.*/
      static DARK_OAK: obTreeType;
      /**Standard jungle tree; 4 blocks wide and tall*/
      static JUNGLE: obTreeType;
      /**Small bush that grows in the jungle*/
      static JUNGLE_BUSH: obTreeType;
      /**Mega redwood tree; 4 blocks wide and tall*/
      static MEGA_REDWOOD: obTreeType;
      /**Big red mushroom; short and fat*/
      static RED_MUSHROOM: obTreeType;
      /**Redwood tree, shaped like a pine tree*/
      static REDWOOD: obTreeType;
      /**Smaller jungle tree; 1 block wide*/
      static SMALL_JUNGLE: obTreeType;
      /**Swamp tree (regular with vines on the side)*/
      static SWAMP: obTreeType;
      /**Tall birch tree*/
      static TALL_BIRCH: obTreeType;
      /**Tall redwood tree with just a few leaves at the top*/
      static TALL_REDWOOD: obTreeType;
      /**Regular tree, no branches*/
      static TREE: obTreeType;
      /**Large warped fungus native to the nether*/
      static WARPED_FUNGUS: obTreeType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obTreeType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obTreeType[];
   }
   /**Represents a thrown trident.*/
   export interface obeTrident extends obeAbstractArrow, obeThrowableProjectile {}
   /**'disarmed' denotes that the tripwire was broken with shears and will not  subsequently produce a current when destroyed.*/
   export interface obbdtTripwire extends obbdAttachable, obbdMultipleFacing, obbdPowerable {
      /**Gets the value of the 'disarmed' property.*/
      isDisarmed(): boolean;
      /**Sets the value of the 'disarmed' property.*/
      setDisarmed(disarmed: boolean): void;
   }
   export interface obbdtTripwireHook extends obbdAttachable, obbdDirectional, obbdPowerable {}
   /**Tropical fish.*/
   export interface obeTropicalFish extends obeFish {
      /**Gets the color of the fish's body.*/
      getBodyColor(): obDyeColor;
      /**Gets the fish's pattern.*/
      getPattern(): obeTPattern;
      /**Gets the color of the fish's pattern.*/
      getPatternColor(): obDyeColor;
      /**Sets the color of the fish's body*/
      setBodyColor(color: obDyeColor): void;
      /**Sets the fish's pattern*/
      setPattern(pattern: obeTPattern): void;
      /**Sets the color of the fish's pattern*/
      setPatternColor(color: obDyeColor): void;
   }
   /**Enumeration of all different fish patterns. Refer to the  Minecraft Wiki  for pictures.*/
   export class obeTPattern extends jlEnum<obeTPattern> {
      static BETTY: obeTPattern;
      static BLOCKFISH: obeTPattern;
      static BRINELY: obeTPattern;
      static CLAYFISH: obeTPattern;
      static DASHER: obeTPattern;
      static FLOPPER: obeTPattern;
      static GLITTER: obeTPattern;
      static KOB: obeTPattern;
      static SNOOPER: obeTPattern;
      static SPOTTY: obeTPattern;
      static STRIPEY: obeTPattern;
      static SUNSTREAK: obeTPattern;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeTPattern;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeTPattern[];
   }
   /**Represents a bucket of tropical fish.*/
   export interface obimTropicalFishBucketMeta extends obimItemMeta {
      clone(): obimTropicalFishBucketMeta;
      /**Gets the color of the fish's body.*/
      getBodyColor(): obDyeColor;
      /**Gets the fish's pattern.*/
      getPattern(): obeTPattern;
      /**Gets the color of the fish's pattern.*/
      getPatternColor(): obDyeColor;
      /**Checks for existence of a variant tag indicating a specific fish will be  spawned.*/
      hasVariant(): boolean;
      /**Sets the color of the fish's body.*/
      setBodyColor(color: obDyeColor): void;
      /**Sets the fish's pattern.*/
      setPattern(pattern: obeTPattern): void;
      /**Sets the color of the fish's pattern.*/
      setPatternColor(color: obDyeColor): void;
   }
   /**Represents a turtle.*/
   export interface obeTurtle extends obeAnimals {
      /**Get the turtle's home location*/
      getHome(): obLocation;
      /**Get if turtle is carrying egg*/
      hasEgg(): boolean;
      /**Get if turtle is digging to lay eggs*/
      isDigging(): boolean;
      /**Check if turtle is currently pathfinding to it's home*/
      isGoingHome(): boolean;
      /**Set if turtle is carrying egg*/
      setHasEgg(hasEgg: boolean): void;
      /**Set the turtle's home location*/
      setHome(location: obLocation): void;
   }
   /**'hatch' is the number of turtles which may hatch from these eggs.    'eggs' is the number of eggs which appear in this block.*/
   export interface obbdtTurtleEgg extends obbdBlockData {
      /**Gets the value of the 'eggs' property.*/
      getEggs(): number;
      /**Gets the value of the 'hatch' property.*/
      getHatch(): number;
      /**Gets the maximum allowed value of the 'eggs' property.*/
      getMaximumEggs(): number;
      /**Gets the maximum allowed value of the 'hatch' property.*/
      getMaximumHatch(): number;
      /**Gets the minimum allowed value of the 'eggs' property.*/
      getMinimumEggs(): number;
      /**Sets the value of the 'eggs' property.*/
      setEggs(eggs: number): void;
      /**Sets the value of the 'hatch' property.*/
      setHatch(hatch: number): void;
   }
   /**Fired when a Turtle decides to go home*/
   export class cdpeeTurtleGoHomeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (turtle: obeTurtle);
      /**The turtle going home*/
      getEntity (): obeTurtle;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Fired when a Turtle lays eggs*/
   export class cdpeeTurtleLayEggEvent extends obeeEntityEvent implements obeCancellable {
      constructor (turtle: obeTurtle, location: obLocation, eggCount: number);
      /**Get the number of eggs being laid*/
      getEggCount (): number;
      /**The turtle laying the eggs*/
      getEntity (): obeTurtle;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the location where the eggs are being laid*/
      getLocation (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the number of eggs being laid*/
      setEggCount (eggCount: number): void;
   }
   /**Fired when a Turtle starts digging to lay eggs*/
   export class cdpeeTurtleStartDiggingEvent extends obeeEntityEvent implements obeCancellable {
      constructor (turtle: obeTurtle, location: obLocation);
      /**The turtle digging*/
      getEntity (): obeTurtle;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the location where the turtle is digging*/
      getLocation (): obLocation;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Thrown when a player executes a command that is not defined*/
   export class obecUnknownCommandEvent extends obeEvent {
      constructor (sender: obcCommandSender, commandLine: string, message: string);
      /**Gets the command that was send*/
      getCommandLine (): string;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets message that will be returned*/
      getMessage (): string;
      /**Gets the CommandSender or ConsoleCommandSender*/
      getSender (): obcCommandSender;
      /**Sets message that will be returned*/
      setMessage (message: string): void;
   }
   /**Thrown when attempting to load an invalid Plugin file*/
   export class obpUnknownDependencyException extends jlRuntimeException {
      constructor ();
      constructor (message: string);
      constructor (throwable: jlThrowable);
      constructor (throwable: jlThrowable, message: string);
   }
   /**Represents how a Structure can be used.*/
   export class obbsUsageMode extends jlEnum<obbsUsageMode> {
      /**Used when saving a structure for easy size calculation.*/
      static CORNER: obbsUsageMode;
      /**Used to run specific custom functions, which can only be used for certain  Structures.*/
      static DATA: obbsUsageMode;
      /**The mode used when loading a structure.*/
      static LOAD: obbsUsageMode;
      /**The mode used when saving a structure.*/
      static SAVE: obbsUsageMode;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbsUsageMode;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbsUsageMode[];
   }
   /**ValidatingPrompt is the base class for any prompt that requires validation.  ValidatingPrompt will keep replaying the prompt text until the user enters  a valid response.*/
   export class obcValidatingPrompt extends jlObject implements obcPrompt {
      constructor ();
      /**Accepts and processes input from the user and validates it.*/
      acceptInput (context: obcConversationContext, input: string): obcPrompt;
      /**Override this method to accept and processes the validated input from  the user.*/
      acceptValidatedInput (context: obcConversationContext, input: string): obcPrompt;
      /**Ensures that the prompt waits for the user to provide input.*/
      blocksForInput (context: obcConversationContext): boolean;
      /**Optionally override this method to display an additional message if the  user enters an invalid input.*/
      getFailedValidationText (context: obcConversationContext, invalidInput: string): string;
      /**Override this method to check the validity of the player's input.*/
      isInputValid (context: obcConversationContext, input: string): boolean;
   }
   /**Represents a vanilla goal. Plugins should never implement this.  Generated by VanillaPathfinderTest in paper-server*/
   export interface cdpeaVanillaGoal<T extends Mob> extends cdpeaGoal<T> {}
   /**Represents a mutable vector. Because the components of Vectors are mutable,  storing Vectors long term may be dangerous if passing code modifies the  Vector later. If you want to keep around a Vector, it may be wise to call  clone() in order to get a copy.*/
   export class obuVector extends jlObject implements jlCloneable, obcsConfigurationSerializable {
      constructor ();
      constructor (x: number, y: number, z: number);
      constructor (x: number, y: number, z: number);
      constructor (x: number, y: number, z: number);
      /**Adds a vector to this one*/
      add (vec: obuVector): obuVector;
      /**Gets the angle between this vector and another in radians.*/
      angle (other: obuVector): number;
      /**Check if each component of this Vector is finite.*/
      checkFinite (): void;
      /**Get a new vector.*/
      clone (): obuVector;
      /**Copies another vector*/
      copy (vec: obuVector): obuVector;
      /**Calculates the cross product of this vector with another.*/
      crossProduct (o: obuVector): obuVector;
      static deserialize (args: juMap<string, jlObject>): obuVector;
      /**Get the distance between this vector and another.*/
      distance (o: obuVector): number;
      /**Get the squared distance between this vector and another.*/
      distanceSquared (o: obuVector): number;
      /**Divides the vector by another.*/
      divide (vec: obuVector): obuVector;
      /**Calculates the dot product of this vector with another.*/
      dot (other: obuVector): number;
      /**Checks to see if two objects are equal.*/
      equals (obj: jlObject): boolean;
      /**Gets the floored value of the X component, indicating the block that  this vector is contained with.*/
      getBlockX (): number;
      /**Gets the floored value of the Y component, indicating the block that  this vector is contained with.*/
      getBlockY (): number;
      /**Gets the floored value of the Z component, indicating the block that  this vector is contained with.*/
      getBlockZ (): number;
      /**Calculates the cross product of this vector with another without mutating  the original.*/
      getCrossProduct (o: obuVector): obuVector;
      /**Get the threshold used for equals().*/
      static getEpsilon (): number;
      /**Gets the maximum components of two vectors.*/
      static getMaximum (v1: obuVector, v2: obuVector): obuVector;
      /**Gets a new midpoint vector between this vector and another.*/
      getMidpoint (other: obuVector): obuVector;
      /**Gets the minimum components of two vectors.*/
      static getMinimum (v1: obuVector, v2: obuVector): obuVector;
      /**Gets a random vector with components having a random value between 0  and 1.*/
      static getRandom (): obuVector;
      /**Gets the X component.*/
      getX (): number;
      /**Gets the Y component.*/
      getY (): number;
      /**Gets the Z component.*/
      getZ (): number;
      /**Returns a hash code for this vector*/
      hashCode (): number;
      /**Returns whether this vector is in an axis-aligned bounding box.*/
      isInAABB (min: obuVector, max: obuVector): boolean;
      /**Returns whether this vector is within a sphere.*/
      isInSphere (origin: obuVector, radius: number): boolean;
      /**Returns if a vector is normalized*/
      isNormalized (): boolean;
      /**Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2).*/
      length (): number;
      /**Gets the magnitude of the vector squared.*/
      lengthSquared (): number;
      /**Sets this vector to the midpoint between this vector and another.*/
      midpoint (other: obuVector): obuVector;
      /**Performs scalar multiplication, multiplying all components with a  scalar.*/
      multiply (m: number): obuVector;
      /**Performs scalar multiplication, multiplying all components with a  scalar.*/
      multiply (m: number): obuVector;
      /**Performs scalar multiplication, multiplying all components with a  scalar.*/
      multiply (m: number): obuVector;
      /**Multiplies the vector by another.*/
      multiply (vec: obuVector): obuVector;
      /**Converts this vector to a unit vector (a vector with length of 1).*/
      normalize (): obuVector;
      /**Rotates the vector around a given arbitrary axis in 3 dimensional space.*/
      rotateAroundAxis (axis: obuVector, angle: number): obuVector;
      /**Rotates the vector around a given arbitrary axis in 3 dimensional space.*/
      rotateAroundNonUnitAxis (axis: obuVector, angle: number): obuVector;
      /**Rotates the vector around the x axis.*/
      rotateAroundX (angle: number): obuVector;
      /**Rotates the vector around the y axis.*/
      rotateAroundY (angle: number): obuVector;
      /**Rotates the vector around the z axis*/
      rotateAroundZ (angle: number): obuVector;
      /**Creates a Map representation of this class.*/
      serialize (): juMap<string, jlObject>;
      /**Set the X component.*/
      setX (x: number): obuVector;
      /**Set the X component.*/
      setX (x: number): obuVector;
      /**Set the X component.*/
      setX (x: number): obuVector;
      /**Set the Y component.*/
      setY (y: number): obuVector;
      /**Set the Y component.*/
      setY (y: number): obuVector;
      /**Set the Y component.*/
      setY (y: number): obuVector;
      /**Set the Z component.*/
      setZ (z: number): obuVector;
      /**Set the Z component.*/
      setZ (z: number): obuVector;
      /**Set the Z component.*/
      setZ (z: number): obuVector;
      /**Subtracts a vector from this one.*/
      subtract (vec: obuVector): obuVector;
      /**Get the block vector of this vector.*/
      toBlockVector (): obuBlockVector;
      /**Gets a Location version of this vector with yaw and pitch being 0.*/
      toLocation (world: obWorld): obLocation;
      /**Gets a Location version of this vector.*/
      toLocation (world: obWorld, yaw: number, pitch: number): obLocation;
      /**Returns this vector's components as x,y,z.*/
      toString (): string;
      /**Zero this vector's components.*/
      zero (): obuVector;
   }
   /**Represents a vehicle entity.*/
   export interface obeVehicle extends obeEntity {
      /**Gets the vehicle's velocity.*/
      getVelocity(): obuVector;
      /**Sets the vehicle's velocity.*/
      setVelocity(vel: obuVector): void;
   }
   /**Raised when a vehicle collides with a block.*/
   export class obevVehicleBlockCollisionEvent extends obevVehicleCollisionEvent {
      constructor (vehicle: obeVehicle, block: obbBlock);
      /**Gets the block the vehicle collided with*/
      getBlock (): obbBlock;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Raised when a vehicle collides.*/
   export class obevVehicleCollisionEvent extends obevVehicleEvent {
      constructor (vehicle: obeVehicle);
   }
   /**Raised when a vehicle is created.*/
   export class obevVehicleCreateEvent extends obevVehicleEvent implements obeCancellable {
      constructor (vehicle: obeVehicle);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancelled: boolean): void;
   }
   /**Raised when a vehicle receives damage.*/
   export class obevVehicleDamageEvent extends obevVehicleEvent implements obeCancellable {
      constructor (vehicle: obeVehicle, attacker: obeEntity, damage: number);
      /**Gets the Entity that is attacking the vehicle*/
      getAttacker (): obeEntity;
      /**Gets the damage done to the vehicle*/
      getDamage (): number;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the damage done to the vehicle*/
      setDamage (damage: number): void;
   }
   /**Raised when a vehicle is destroyed, which could be caused by either a  player or the environment. This is not raised if the boat is simply  'removed' due to other means.*/
   export class obevVehicleDestroyEvent extends obevVehicleEvent implements obeCancellable {
      constructor (vehicle: obeVehicle, attacker: obeEntity);
      /**Gets the Entity that has destroyed the vehicle, potentially null*/
      getAttacker (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Raised when an entity enters a vehicle.*/
   export class obevVehicleEnterEvent extends obevVehicleEvent implements obeCancellable {
      constructor (vehicle: obeVehicle, entered: obeEntity);
      /**Gets the Entity that entered the vehicle.*/
      getEntered (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Raised when a vehicle collides with an entity.*/
   export class obevVehicleEntityCollisionEvent extends obevVehicleCollisionEvent implements obeCancellable {
      constructor (vehicle: obeVehicle, entity: obeEntity);
      getEntity (): obeEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      isCollisionCancelled (): boolean;
      isPickupCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      setCollisionCancelled (cancel: boolean): void;
      setPickupCancelled (cancel: boolean): void;
   }
   /**Represents a vehicle-related event.*/
   export class obevVehicleEvent extends obeEvent {
      constructor (vehicle: obeVehicle);
      /**Get the vehicle.*/
      getVehicle (): obeVehicle;
   }
   /**Raised when a living entity exits a vehicle.*/
   export class obevVehicleExitEvent extends obevVehicleEvent implements obeCancellable {
      constructor (vehicle: obeVehicle, exited: obeLivingEntity);
      constructor (vehicle: obeVehicle, exited: obeLivingEntity, isCancellable: boolean);
      /**Get the living entity that exited the vehicle.*/
      getExited (): obeLivingEntity;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      isCancellable (): boolean;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**Raised when a vehicle moves.*/
   export class obevVehicleMoveEvent extends obevVehicleEvent {
      constructor (vehicle: obeVehicle, from: obLocation, to: obLocation);
      /**Get the previous position.*/
      getFrom (): obLocation;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the next position.*/
      getTo (): obLocation;
   }
   /**Called when a vehicle updates*/
   export class obevVehicleUpdateEvent extends obevVehicleEvent {
      constructor (vehicle: obeVehicle);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   export class obcdVersionCommand extends obcdBukkitCommand {
      constructor (name: string);
      /**Executes the command, returning its success*/
      execute (sender: obcCommandSender, currentAlias: string, args: string[]): boolean;
      /**Executed on tab completion for this command, returning a list of  options the player can tab through.*/
      tabComplete (sender: obcCommandSender, alias: string, args: string[]): juList<string>;
   }
   export interface cdpuVersionFetcher {
      /**Amount of time to cache results for in milliseconds*/
      getCacheTime(): number;
      /**Gets the version message to cache and show to command senders.*/
      getVersionMessage(serverVersion: string): string;
   }
   export class cdpuVDummyVersionFetcher extends jlObject implements cdpuVersionFetcher {
      constructor ();
      /**Amount of time to cache results for in milliseconds*/
      getCacheTime (): number;
      /**Gets the version message to cache and show to command senders.*/
      getVersionMessage (serverVersion: string): string;
   }
   /**Represents a Vex.*/
   export interface obeVex extends obeMonster {
      /**Get the Mob that summoned this vex*/
      getSummoner(): obeMob;
      /**Gets the charging state of this entity.*/
      isCharging(): boolean;
      /**Sets the charging state of this entity.*/
      setCharging(charging: boolean): void;
      /**Set the summoner of this vex*/
      setSummoner(summoner: obeMob): void;
   }
   /**Represents a villager NPC*/
   export interface obeVillager extends obeAbstractVillager {
      /**Clear all reputations from this villager.*/
      clearReputations(): void;
      /**Gets the current profession of this villager.*/
      getProfession(): obeVProfession;
      /**Get the reputation  for a specific player by UUID.*/
      getReputation(uniqueId: juUUID): cdpevReputation;
      /**Get all reputations  for all players mapped by their unique IDs.*/
      getReputations(): juMap<juUUID, cdpevReputation>;
      /**Gets the amount of times a villager has restocked their trades today*/
      getRestocksToday(): number;
      /**Gets the trading experience of this villager.*/
      getVillagerExperience(): number;
      /**Gets the level of this villager.*/
      getVillagerLevel(): number;
      /**Gets the current type of this villager.*/
      getVillagerType(): obeVType;
      /**Sets the new profession of this villager.*/
      setProfession(profession: obeVProfession): void;
      /**Set the reputation  for a specific player by UUID.*/
      setReputation(uniqueId: juUUID, reputation: cdpevReputation): void;
      /**Set all reputations  for all players mapped by their unique IDs.*/
      setReputations(reputations: juMap<juUUID, cdpevReputation>): void;
      /**Sets the amount of times a villager has restocked their trades today*/
      setRestocksToday(restocksToday: number): void;
      /**Sets the trading experience of this villager.*/
      setVillagerExperience(experience: number): void;
      /**Sets the level of this villager.*/
      setVillagerLevel(level: number): void;
      /**Sets the new type of this villager.*/
      setVillagerType(type: obeVType): void;
      /**Attempts to make this villager sleep at the given location.*/
      sleep(location: obLocation): boolean;
      /**Causes this villager to wake up if he's currently sleeping.*/
      wakeup(): void;
   }
   /**Represents the various different Villager professions there may be.  Villagers have different trading options depending on their profession,*/
   export class obeVProfession extends jlEnum<obeVProfession> implements obKeyed {
      /**Armorer profession.*/
      static ARMORER: obeVProfession;
      /**Butcher profession.*/
      static BUTCHER: obeVProfession;
      /**Cartographer profession.*/
      static CARTOGRAPHER: obeVProfession;
      /**Cleric profession.*/
      static CLERIC: obeVProfession;
      /**Farmer profession.*/
      static FARMER: obeVProfession;
      /**Fisherman profession.*/
      static FISHERMAN: obeVProfession;
      /**Fletcher profession.*/
      static FLETCHER: obeVProfession;
      /**Leatherworker profession.*/
      static LEATHERWORKER: obeVProfession;
      /**Librarian profession.*/
      static LIBRARIAN: obeVProfession;
      /**Mason profession.*/
      static MASON: obeVProfession;
      /**Nitwit profession.*/
      static NITWIT: obeVProfession;
      static NONE: obeVProfession;
      /**Sheperd profession.*/
      static SHEPHERD: obeVProfession;
      /**Toolsmith profession.*/
      static TOOLSMITH: obeVProfession;
      /**Weaponsmith profession.*/
      static WEAPONSMITH: obeVProfession;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeVProfession;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeVProfession[];
   }
   /**Represents Villager type, usually corresponding to what biome they spawn  in.*/
   export class obeVType extends jlEnum<obeVType> implements obKeyed {
      static DESERT: obeVType;
      static JUNGLE: obeVType;
      static PLAINS: obeVType;
      static SAVANNA: obeVType;
      static SNOW: obeVType;
      static SWAMP: obeVType;
      static TAIGA: obeVType;
      /**Return the namespaced identifier for this object.*/
      getKey (): obNamespacedKey;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeVType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeVType[];
   }
   /**Called whenever a villager acquires a new trade.*/
   export class obeeVillagerAcquireTradeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeAbstractVillager, recipe: obiMerchantRecipe);
      /**Returns the Entity involved in this event*/
      getEntity (): obeAbstractVillager;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the recipe to be acquired.*/
      getRecipe (): obiMerchantRecipe;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the recipe to be acquired.*/
      setRecipe (recipe: obiMerchantRecipe): void;
   }
   export class obeeVillagerCareerChangeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeVillager, profession: obeVProfession, reason: obeeVChangeReason);
      /**Returns the Entity involved in this event*/
      getEntity (): obeVillager;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the future profession of the villager.*/
      getProfession (): obeVProfession;
      /**Gets the reason for why the villager's career is changing.*/
      getReason (): obeeVChangeReason;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the profession the villager will become from this event.*/
      setProfession (profession: obeVProfession): void;
   }
   /**Reasons for the villager's profession changing.*/
   export class obeeVChangeReason extends jlEnum<obeeVChangeReason> {
      /**Villager gained employment.*/
      static EMPLOYED: obeeVChangeReason;
      /**Villager lost their job due to too little experience.*/
      static LOSING_JOB: obeeVChangeReason;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obeeVChangeReason;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obeeVChangeReason[];
   }
   /**Called when a villager's trade's maximum uses is increased, due to a player's  trade.*/
   export class obeeVillagerReplenishTradeEvent extends obeeEntityEvent implements obeCancellable {
      constructor (what: obeAbstractVillager, recipe: obiMerchantRecipe, bonus: number);
      /**Get the bonus uses added.*/
      getBonus (): number;
      /**Returns the Entity involved in this event*/
      getEntity (): obeAbstractVillager;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Get the recipe to replenish.*/
      getRecipe (): obiMerchantRecipe;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Set the bonus uses added.*/
      setBonus (bonus: number): void;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Set the recipe to replenish.*/
      setRecipe (recipe: obiMerchantRecipe): void;
   }
   /**Represents a Vindicator.*/
   export interface obeVindicator extends obeIllager {
      /**Check if this Vindicator is set to Johnny mode.*/
      isJohnny(): boolean;
      /**Set this Vindicator's Johnny mode.*/
      setJohnny(johnny: boolean): void;
   }
   /**This class encompasses the 'north', 'east', 'south', 'west', height flags  which are used to set the height of a wall.   'up' denotes whether the well has a center post.*/
   export interface obbdtWall extends obbdWaterlogged {
      /**Gets the height of the specified face.*/
      getHeight(face: obbBlockFace): obbdtWHeight;
      /**Gets the value of the 'up' property.*/
      isUp(): boolean;
      /**Set the height of the specified face.*/
      setHeight(face: obbBlockFace, height: obbdtWHeight): void;
      /**Sets the value of the 'up' property.*/
      setUp(up: boolean): void;
   }
   /**The different heights a face of a wall may have.*/
   export class obbdtWHeight extends jlEnum<obbdtWHeight> {
      /**Low wall present.*/
      static LOW: obbdtWHeight;
      /**No wall present.*/
      static NONE: obbdtWHeight;
      /**Tall wall present.*/
      static TALL: obbdtWHeight;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obbdtWHeight;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obbdtWHeight[];
   }
   export interface obbdtWallSign extends obbdDirectional, obbdWaterlogged {}
   /**Represents a wandering trader NPC*/
   export interface obeWanderingTrader extends obeAbstractVillager {}
   /**This represents the states that server verbose for warnings may be.*/
   export class obWWarningState extends jlEnum<obWWarningState> {
      /**Indicates each warning would default to the configured Warning annotation, or always if annotation not found.*/
      static DEFAULT: obWWarningState;
      /**Indicates no warnings should be printed for deprecated items.*/
      static OFF: obWWarningState;
      /**Indicates all warnings should be printed for deprecated items.*/
      static ON: obWWarningState;
      /**This method checks the provided warning should be printed for this  state*/
      printFor (warning: obWarning): boolean;
      /**This method returns the corresponding warning state for the given  string value.*/
      static value (value: string): obWWarningState;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obWWarningState;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obWWarningState[];
   }
   /**'waterlogged' denotes whether this block has fluid in it.*/
   export interface obbdWaterlogged extends obbdBlockData {
      /**Gets the value of the 'waterlogged' property.*/
      isWaterlogged(): boolean;
      /**Sets the value of the 'waterlogged' property.*/
      setWaterlogged(waterlogged: boolean): void;
   }
   /**Represents a Water Mob*/
   export interface obeWaterMob extends obeCreature {}
   /**Stores data for weather changing in a world*/
   export class obewWeatherChangeEvent extends obewWeatherEvent implements obeCancellable {
      constructor (world: obWorld, to: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Gets the state of weather that the world is being set to*/
      toWeatherState (): boolean;
   }
   /**Represents a Weather-related event*/
   export class obewWeatherEvent extends obeEvent {
      constructor (where: obWorld);
      /**Returns the World where this event is occurring*/
      getWorld (): obWorld;
   }
   /**An enum of all current weather types*/
   export class obWeatherType extends jlEnum<obWeatherType> {
      /**Clear weather, clouds but no rain.*/
      static CLEAR: obWeatherType;
      /**Raining or snowing depending on biome.*/
      static DOWNFALL: obWeatherType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obWeatherType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obWeatherType[];
   }
   /**This event is fired when whitelist is toggled*/
   export class cdpesWhitelistToggleEvent extends obeEvent {
      constructor (enabled: boolean);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets whether whitelist is going to be enabled or not*/
      isEnabled (): boolean;
   }
   /**Represents a Witch*/
   export interface obeWitch extends obeRaider, cdpeRangedEntity {
      /**Get the potion the Witch is drinking*/
      getDrinkingPotion(): obiItemStack;
      /**Get time remaining (in ticks) the Witch is drinking a potion*/
      getPotionUseTimeLeft(): number;
      /**Check if Witch is drinking a potion*/
      isDrinkingPotion(): boolean;
      /**Set the potion the Witch should drink*/
      setDrinkingPotion(potion: obiItemStack): void;
   }
   /**Fired when a witch consumes the potion in their hand to buff themselves.*/
   export class cdpeeWitchConsumePotionEvent extends obeeEntityEvent implements obeCancellable {
      constructor (witch: obeWitch, potion: obiItemStack);
      /**Returns the Entity involved in this event*/
      getEntity (): obeWitch;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPotion (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the potion to be consumed and applied to the witch.*/
      setPotion (potion: obiItemStack): void;
   }
   export class cdpeeWitchReadyPotionEvent extends obeeEntityEvent implements obeCancellable {
      constructor (witch: obeWitch, potion: obiItemStack);
      /**Returns the Entity involved in this event*/
      getEntity (): obeWitch;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPotion (): obiItemStack;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Fires thee event, returning the desired potion, or air of cancelled*/
      static process (witch: obeWitch, potion: obiItemStack): obiItemStack;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the potion the which is going to hold and use*/
      setPotion (potion: obiItemStack): void;
   }
   /**Fired when a witch throws a potion at a player*/
   export class cdpeeWitchThrowPotionEvent extends obeeEntityEvent implements obeCancellable {
      constructor (witch: obeWitch, target: obeLivingEntity, potion: obiItemStack);
      /**Returns the Entity involved in this event*/
      getEntity (): obeWitch;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      getPotion (): obiItemStack;
      getTarget (): obeLivingEntity;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the potion to be thrown at a player*/
      setPotion (potion: obiItemStack): void;
   }
   /**Represents a Wither boss*/
   export interface obeWither extends obeMonster, obeBoss, cdpeRangedEntity {
      canTravelThroughPortals(): boolean;
      getInvulnerableTicks(): number;
      isCharged(): boolean;
      /**Sets whether the wither can travel through portals.*/
      setCanTravelThroughPortals(value: boolean): void;
      /**Sets for how long in the future, the wither should be invulnerable.*/
      setInvulnerableTicks(ticks: number): void;
   }
   /**Represents a WitherSkeleton - variant of Skeleton.*/
   export interface obeWitherSkeleton extends obeSkeleton {}
   /**Represents a wither skull Fireball.*/
   export interface obeWitherSkull extends obeFireball {
      /**Gets whether or not the wither skull is charged.*/
      isCharged(): boolean;
      /**Sets the charged status of the wither skull.*/
      setCharged(charged: boolean): void;
   }
   /**Represents a Wolf*/
   export interface obeWolf extends obeTameable, obeSittable {
      /**Get the collar color of this wolf*/
      getCollarColor(): obDyeColor;
      /**Checks if this wolf is angry*/
      isAngry(): boolean;
      /**Sets the anger of this wolf.*/
      setAngry(angry: boolean): void;
      /**Set the collar color of this wolf*/
      setCollarColor(color: obDyeColor): void;
   }
   /**Represents a world, which may contain entities, chunks and blocks*/
   export interface obWorld extends obpmPluginMessageRecipient, obmMetadatable {
      /**Adds a plugin ticket for the specified chunk, loading the chunk if it is  not already loaded.*/
      addPluginChunkTicket(x: number, z: number, plugin: obpPlugin): boolean;
      /**Gets whether or not structures are being generated.*/
      canGenerateStructures(): boolean;
      /**Creates explosion at given coordinates with given power*/
      createExplosion(x: number, y: number, z: number, power: number): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire.*/
      createExplosion(x: number, y: number, z: number, power: number, setFire: boolean): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire or breaking blocks.*/
      createExplosion(x: number, y: number, z: number, power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire or breaking blocks.*/
      createExplosion(
         x: number,
         y: number,
         z: number,
         power: number,
         setFire: boolean,
         breakBlocks: boolean,
         source: obeEntity
      ): boolean;
      /**Creates explosion at given entities location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion(source: obeEntity, power: number): boolean;
      /**Creates explosion at given entities location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion(source: obeEntity, power: number, setFire: boolean): boolean;
      /**Creates explosion at given entities location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion(source: obeEntity, power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Creates explosion at given location with given power, with the specified entity as the source.*/
      createExplosion(source: obeEntity, loc: obLocation, power: number): boolean;
      /**Creates explosion at given location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion(source: obeEntity, loc: obLocation, power: number, setFire: boolean): boolean;
      /**Creates explosion at given location with given power and optionally  setting blocks on fire, with the specified entity as the source.*/
      createExplosion(source: obeEntity, loc: obLocation, power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Creates explosion at given coordinates with given power*/
      createExplosion(loc: obLocation, power: number): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire.*/
      createExplosion(loc: obLocation, power: number, setFire: boolean): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire or breaking blocks.*/
      createExplosion(loc: obLocation, power: number, setFire: boolean, breakBlocks: boolean): boolean;
      /**Creates explosion at given coordinates with given power and optionally  setting blocks on fire or breaking blocks.*/
      createExplosion(loc: obLocation, power: number, setFire: boolean, breakBlocks: boolean, source: obeEntity): boolean;
      /**Drops an item at the specified Location*/
      dropItem(location: obLocation, item: obiItemStack): obeItem;
      /**Drops an item at the specified Location with a random offset*/
      dropItemNaturally(location: obLocation, item: obiItemStack): obeItem;
      /**Creates a tree at the given Location*/
      generateTree(location: obLocation, type: obTreeType): boolean;
      /**Creates a tree at the given Location*/
      generateTree(loc: obLocation, type: obTreeType, delegate: obBlockChangeDelegate): boolean;
      /**Gets whether animals can spawn in this world.*/
      getAllowAnimals(): boolean;
      /**Gets whether monsters can spawn in this world.*/
      getAllowMonsters(): boolean;
      /**Gets the limit for number of ambient mobs that can spawn in a chunk in  this world*/
      getAmbientSpawnLimit(): number;
      /**Gets the limit for number of animals that can spawn in a chunk in this  world*/
      getAnimalSpawnLimit(): number;
      /**Gets the biome for the given block coordinates.*/
      getBiome(x: number, y: number, z: number): obbBiome;
      /**Gets the Block at the given coordinates*/
      getBlockAt(x: number, y: number, z: number): obbBlock;
      /**Gets the Block at the given Location*/
      getBlockAt(location: obLocation): obbBlock;
      /**Gets the Block at the given block key*/
      getBlockAtKey(key: number): obbBlock;
      /**Gets the Chunk at the given coordinates*/
      getChunkAt(x: number, z: number): obChunk;
      /**Gets the chunk at the specified chunk key, which is the X and Z packed into a long.*/
      getChunkAt(chunkKey: number): obChunk;
      /**Gets the Chunk that contains the given Block*/
      getChunkAt(block: obbBlock): obChunk;
      /**Gets the Chunk at the given Location*/
      getChunkAt(location: obLocation): obChunk;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(x: number, z: number): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(x: number, z: number, gen: boolean): jucCompletableFuture<obChunk>;
      getChunkAtAsync(x: number, z: number, gen: boolean, urgent: boolean): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(x: number, z: number, gen: boolean, cb: jufConsumer<obChunk>): void;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(x: number, z: number, cb: jufConsumer<obChunk>): void;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(block: obbBlock): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(block: obbBlock, gen: boolean): jucCompletableFuture<obChunk>;
      /**Requests Chunk to be loaded that contains the given Block   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(block: obbBlock, gen: boolean, cb: jufConsumer<obChunk>): void;
      /**Requests Chunk to be loaded that contains the given Block   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(block: obbBlock, cb: jufConsumer<obChunk>): void;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(loc: obLocation): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(loc: obLocation, gen: boolean): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given Location   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(loc: obLocation, gen: boolean, cb: jufConsumer<obChunk>): void;
      /**Requests a Chunk to be loaded at the given Location   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsync(loc: obLocation, cb: jufConsumer<obChunk>): void;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsyncUrgently(x: number, z: number): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsyncUrgently(block: obbBlock): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsyncUrgently(block: obbBlock, gen: boolean): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsyncUrgently(loc: obLocation): jucCompletableFuture<obChunk>;
      /**Requests a Chunk to be loaded at the given coordinates   This method makes no guarantee on how fast the chunk will load,  and will return the chunk to the callback at a later time.*/
      getChunkAtAsyncUrgently(loc: obLocation, gen: boolean): jucCompletableFuture<obChunk>;
      getChunkCount(): number;
      /**Get the clear weather duration.*/
      getClearWeatherDuration(): number;
      /**Gets the Difficulty of the world.*/
      getDifficulty(): obDifficulty;
      /**Get empty chunk snapshot (equivalent to all air blocks), optionally  including valid biome data.*/
      getEmptyChunkSnapshot(x: number, z: number, includeBiome: boolean, includeBiomeTemp: boolean): obChunkSnapshot;
      /**Get the DragonBattle associated with this world.*/
      getEnderDragonBattle(): obbDragonBattle;
      /**Get a list of all entities in this World*/
      getEntities(): juList<obeEntity>;
      /**Get a collection of all entities in this World matching the given  class\/interface*/
      getEntitiesByClass<T extends obeEntity>(cls: jlClass<T>): juCollection<T>;
      /**Get a collection of all entities in this World matching any of the  given classes\/interfaces*/
      getEntitiesByClasses(...classes: jlClass<any>[]): juCollection<obeEntity>;
      /**Gets an entity in this world by its UUID*/
      getEntity(uuid: juUUID): obeEntity;
      getEntityCount(): number;
      /**Gets the World.Environment type of this world*/
      getEnvironment(): obWEnvironment;
      /**Returns all force loaded chunks in this world.*/
      getForceLoadedChunks(): juCollection<obChunk>;
      /**Gets the full in-game time on this world*/
      getFullTime(): number;
      /**Get the default value for a given GameRule.*/
      getGameRuleDefault<T>(rule: obGameRule<T>): T;
      /**Get an array containing the names of all the GameRules.*/
      getGameRules(): string[];
      /**Get the current value for a given GameRule.*/
      getGameRuleValue<T>(rule: obGameRule<T>): T;
      /**Gets the chunk generator for this world*/
      getGenerator(): obgChunkGenerator;
      /**Gets the highest non-empty (impassable) block at the given coordinates.*/
      getHighestBlockAt(x: number, z: number): obbBlock;
      /**Gets the highest block corresponding to the HeightMap at the  given coordinates.*/
      getHighestBlockAt(x: number, z: number, heightMap: obHeightMap): obbBlock;
      /**Gets the highest non-empty (impassable) block at the given coordinates.*/
      getHighestBlockAt(location: obLocation): obbBlock;
      /**Gets the highest block corresponding to the HeightMap at the  given coordinates.*/
      getHighestBlockAt(location: obLocation, heightMap: obHeightMap): obbBlock;
      /**Gets the highest non-empty (impassable) coordinate at the given  coordinates.*/
      getHighestBlockYAt(x: number, z: number): number;
      /**Gets the highest coordinate corresponding to the HeightMap at the  given coordinates.*/
      getHighestBlockYAt(x: number, z: number, heightMap: obHeightMap): number;
      /**Gets the highest non-empty (impassable) coordinate at the given  Location.*/
      getHighestBlockYAt(location: obLocation): number;
      /**Gets the highest coordinate corresponding to the HeightMap at the  given Location.*/
      getHighestBlockYAt(location: obLocation, heightMap: obHeightMap): number;
      /**Gets the humidity for the given block coordinates.*/
      getHumidity(x: number, y: number, z: number): number;
      /**Gets whether the world's spawn area should be kept loaded into memory  or not.*/
      getKeepSpawnInMemory(): boolean;
      /**Get a list of all living entities in this World*/
      getLivingEntities(): juList<obeLivingEntity>;
      /**Gets an array of all loaded Chunks*/
      getLoadedChunks(): obChunk[];
      /**Gets the Location at the given block key*/
      getLocationAtKey(key: number): obLocation;
      /**Gets the maximum height of this world.*/
      getMaxHeight(): number;
      /**Gets limit for number of monsters that can spawn in a chunk in this  world*/
      getMonsterSpawnLimit(): number;
      getMoonPhase(): ippwMoonPhase;
      /**Gets the unique name of this world*/
      getName(): string;
      /**Returns a list of entities within a bounding box centered around a  Location.*/
      getNearbyEntities(location: obLocation, x: number, y: number, z: number): juCollection<obeEntity>;
      /**Returns a list of entities within a bounding box centered around a  Location.*/
      getNearbyEntities(
         location: obLocation,
         x: number,
         y: number,
         z: number,
         filter: jufPredicate<obeEntity>
      ): juCollection<obeEntity>;
      /**Returns a list of entities within the given bounding box.*/
      getNearbyEntities(boundingBox: obuBoundingBox): juCollection<obeEntity>;
      /**Returns a list of entities within the given bounding box.*/
      getNearbyEntities(boundingBox: obuBoundingBox, filter: jufPredicate<obeEntity>): juCollection<obeEntity>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(
         clazz: jlClass<obeEntity>,
         loc: obLocation,
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(clazz: jlClass<T>, loc: obLocation, radius: number): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(
         clazz: jlClass<T>,
         loc: obLocation,
         xzRadius: number,
         yRadius: number
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(
         clazz: jlClass<T>,
         loc: obLocation,
         xRadius: number,
         yRadius: number,
         zRadius: number
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(
         clazz: jlClass<T>,
         loc: obLocation,
         xzRadius: number,
         yRadius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets all nearby entities of the specified type, within the specified radius (bounding box)*/
      getNearbyEntitiesByType<T extends obeEntity>(
         clazz: jlClass<T>,
         loc: obLocation,
         radius: number,
         predicate: jufPredicate<T>
      ): juCollection<T>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(loc: obLocation, radius: number): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(loc: obLocation, xzRadius: number, yRadius: number): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(
         loc: obLocation,
         xRadius: number,
         yRadius: number,
         zRadius: number
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(
         loc: obLocation,
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<obeLivingEntity>
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(
         loc: obLocation,
         xzRadius: number,
         yRadius: number,
         predicate: jufPredicate<obeLivingEntity>
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyLivingEntities(
         loc: obLocation,
         radius: number,
         predicate: jufPredicate<obeLivingEntity>
      ): juCollection<obeLivingEntity>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(loc: obLocation, radius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(loc: obLocation, xzRadius: number, yRadius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(loc: obLocation, xRadius: number, yRadius: number, zRadius: number): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(
         loc: obLocation,
         xRadius: number,
         yRadius: number,
         zRadius: number,
         predicate: jufPredicate<obePlayer>
      ): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(
         loc: obLocation,
         xzRadius: number,
         yRadius: number,
         predicate: jufPredicate<obePlayer>
      ): juCollection<obePlayer>;
      /**Gets nearby players within the specified radius (bounding box)*/
      getNearbyPlayers(loc: obLocation, radius: number, predicate: jufPredicate<obePlayer>): juCollection<obePlayer>;
      /**Returns the no-tick view distance for this world.*/
      getNoTickViewDistance(): number;
      getPlayerCount(): number;
      /**Get a list of all players in this World*/
      getPlayers(): juList<obePlayer>;
      /**Returns a map of which plugins have tickets for what chunks.*/
      getPluginChunkTickets(): juMap<obpPlugin, juCollection<obChunk>>;
      /**Retrieves a collection specifying which plugins have tickets for the  specified chunk.*/
      getPluginChunkTickets(x: number, z: number): juCollection<obpPlugin>;
      /**Gets a list of all applied BlockPopulators for this World*/
      getPopulators(): juList<obgBlockPopulator>;
      /**Gets the current PVP setting for this world.*/
      getPVP(): boolean;
      /**Gets all raids that are going on over this world.*/
      getRaids(): juList<obRaid>;
      /**Gets the sea level for this world.*/
      getSeaLevel(): number;
      /**Gets the Seed for this world.*/
      getSeed(): number;
      /**Gets the default spawn Location of this world*/
      getSpawnLocation(): obLocation;
      /**Gets the temperature for the given block coordinates.*/
      getTemperature(x: number, y: number, z: number): number;
      /**Get the thundering duration.*/
      getThunderDuration(): number;
      getTickableTileEntityCount(): number;
      /**Gets the world's ticks per ambient mob spawns value*/
      getTicksPerAmbientSpawns(): number;
      /**Gets the world's ticks per animal spawns value*/
      getTicksPerAnimalSpawns(): number;
      /**Gets the world's ticks per monster spawns value*/
      getTicksPerMonsterSpawns(): number;
      /**Gets the default ticks per water ambient mob spawns value.*/
      getTicksPerWaterAmbientSpawns(): number;
      /**Gets the world's ticks per water mob spawns value*/
      getTicksPerWaterSpawns(): number;
      getTileEntityCount(): number;
      /**Gets the relative in-game time of this world.*/
      getTime(): number;
      /**Gets the Unique ID of this world*/
      getUID(): juUUID;
      /**Returns the view distance used for this world.*/
      getViewDistance(): number;
      /**Gets user-specified limit for number of water ambient mobs that can spawn  in a chunk.*/
      getWaterAmbientSpawnLimit(): number;
      /**Gets the limit for number of water animals that can spawn in a chunk in  this world*/
      getWaterAnimalSpawnLimit(): number;
      /**Get the remaining time in ticks of the current conditions.*/
      getWeatherDuration(): number;
      /**Gets the world border for this world.*/
      getWorldBorder(): obWorldBorder;
      /**Gets the folder of this world on disk.*/
      getWorldFolder(): jiFile;
      /**Returns whether the world has an ongoing storm.*/
      hasStorm(): boolean;
      /**Gets whether or not the world will automatically save*/
      isAutoSave(): boolean;
      /**Gets whether the chunk at the specified chunk coordinates is force  loaded.*/
      isChunkForceLoaded(x: number, z: number): boolean;
      /**Checks if the Chunk at the specified coordinates is generated*/
      isChunkGenerated(x: number, z: number): boolean;
      /**Checks if a Chunk has been generated at the specified chunk key,  which is the X and Z packed into a long.*/
      isChunkGenerated(chunkKey: number): boolean;
      /**Checks if the Chunk at the specified coordinates is loaded*/
      isChunkLoaded(x: number, z: number): boolean;
      /**Checks if the specified Chunk is loaded*/
      isChunkLoaded(chunk: obChunk): boolean;
      /**Returns whether the world has clear weather.*/
      isClearWeather(): boolean;
      /**Check if it is currently daytime in this world*/
      isDayTime(): boolean;
      /**Checks if string is a valid game rule*/
      isGameRule(rule: string): boolean;
      /**Gets whether the world is hardcore or not.*/
      isHardcore(): boolean;
      /**Returns whether there is thunder.*/
      isThundering(): boolean;
      /**Loads the Chunk at the specified coordinates.*/
      loadChunk(x: number, z: number): void;
      /**Loads the Chunk at the specified coordinates.*/
      loadChunk(x: number, z: number, generate: boolean): boolean;
      /**Loads the specified Chunk.*/
      loadChunk(chunk: obChunk): void;
      /**Finds the nearest raid close to the given location.*/
      locateNearestRaid(location: obLocation, radius: number): obRaid;
      /**Find the closest nearby structure of a given StructureType.*/
      locateNearestStructure(
         origin: obLocation,
         structureType: obStructureType,
         radius: number,
         findUnexplored: boolean
      ): obLocation;
      /**Plays an effect to all players within a default radius around a given  location.*/
      playEffect(location: obLocation, effect: obEffect, data: number): void;
      /**Plays an effect to all players within a given radius around a location.*/
      playEffect(location: obLocation, effect: obEffect, data: number, radius: number): void;
      /**Plays an effect to all players within a default radius around a given  location.*/
      playEffect<T>(location: obLocation, effect: obEffect, data: T): void;
      /**Plays an effect to all players within a given radius around a location.*/
      playEffect<T>(location: obLocation, effect: obEffect, data: T, radius: number): void;
      /**Play a Sound at the provided Location in the World.*/
      playSound(location: obLocation, sound: string, volume: number, pitch: number): void;
      /**Play a Sound at the provided Location in the World.*/
      playSound(location: obLocation, sound: string, category: obSoundCategory, volume: number, pitch: number): void;
      /**Play a Sound at the provided Location in the World*/
      playSound(location: obLocation, sound: obSound, volume: number, pitch: number): void;
      /**Play a Sound at the provided Location in the World.*/
      playSound(location: obLocation, sound: obSound, category: obSoundCategory, volume: number, pitch: number): void;
      /**Performs a ray trace that checks for both block and entity collisions.*/
      rayTrace(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         fluidCollisionMode: obFluidCollisionMode,
         ignorePassableBlocks: boolean,
         raySize: number,
         filter: jufPredicate<obeEntity>
      ): obuRayTraceResult;
      /**Performs a ray trace that checks for block collisions using the blocks'  precise collision shapes.*/
      rayTraceBlocks(start: obLocation, direction: obuVector, maxDistance: number): obuRayTraceResult;
      /**Performs a ray trace that checks for block collisions using the blocks'  precise collision shapes.*/
      rayTraceBlocks(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         fluidCollisionMode: obFluidCollisionMode
      ): obuRayTraceResult;
      /**Performs a ray trace that checks for block collisions using the blocks'  precise collision shapes.*/
      rayTraceBlocks(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         fluidCollisionMode: obFluidCollisionMode,
         ignorePassableBlocks: boolean
      ): obuRayTraceResult;
      /**Performs a ray trace that checks for entity collisions.*/
      rayTraceEntities(start: obLocation, direction: obuVector, maxDistance: number): obuRayTraceResult;
      /**Performs a ray trace that checks for entity collisions.*/
      rayTraceEntities(start: obLocation, direction: obuVector, maxDistance: number, raySize: number): obuRayTraceResult;
      /**Performs a ray trace that checks for entity collisions.*/
      rayTraceEntities(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         raySize: number,
         filter: jufPredicate<obeEntity>
      ): obuRayTraceResult;
      /**Performs a ray trace that checks for entity collisions.*/
      rayTraceEntities(
         start: obLocation,
         direction: obuVector,
         maxDistance: number,
         filter: jufPredicate<obeEntity>
      ): obuRayTraceResult;
      /**Removes the specified plugin's ticket for the specified chunk*/
      removePluginChunkTicket(x: number, z: number, plugin: obpPlugin): boolean;
      /**Removes all plugin tickets for the specified plugin*/
      removePluginChunkTickets(plugin: obpPlugin): void;
      /**Saves world to disk*/
      save(): void;
      /**Sets the limit for number of ambient mobs that can spawn in a chunk in  this world*/
      setAmbientSpawnLimit(limit: number): void;
      /**Sets the limit for number of animals that can spawn in a chunk in this  world*/
      setAnimalSpawnLimit(limit: number): void;
      /**Sets whether or not the world will automatically save*/
      setAutoSave(value: boolean): void;
      /**Sets the biome for the given block coordinates*/
      setBiome(x: number, y: number, z: number, bio: obbBiome): void;
      /**Sets whether the chunk at the specified chunk coordinates is force  loaded.*/
      setChunkForceLoaded(x: number, z: number, forced: boolean): void;
      /**Set the clear weather duration.*/
      setClearWeatherDuration(duration: number): void;
      /**Sets the Difficulty of the world.*/
      setDifficulty(difficulty: obDifficulty): void;
      /**Sets the in-game time on the server*/
      setFullTime(time: number): void;
      /**Set the given GameRule's new value.*/
      setGameRule<T>(rule: obGameRule<T>, newValue: T): boolean;
      /**Sets whether the world is hardcore or not.*/
      setHardcore(hardcore: boolean): void;
      /**Sets whether the world's spawn area should be kept loaded into memory  or not.*/
      setKeepSpawnInMemory(keepLoaded: boolean): void;
      /**Sets the limit for number of monsters that can spawn in a chunk in this  world*/
      setMonsterSpawnLimit(limit: number): void;
      /**Sets the no-tick view distance for this world.*/
      setNoTickViewDistance(viewDistance: number): void;
      /**Sets the PVP setting for this world.*/
      setPVP(pvp: boolean): void;
      /**Sets the spawn flags for this.*/
      setSpawnFlags(allowMonsters: boolean, allowAnimals: boolean): void;
      /**Sets the spawn location of the world*/
      setSpawnLocation(x: number, y: number, z: number): boolean;
      /**Sets the spawn location of the world*/
      setSpawnLocation(x: number, y: number, z: number, angle: number): boolean;
      /**Sets the spawn location of the world.*/
      setSpawnLocation(location: obLocation): boolean;
      /**Set whether there is a storm.*/
      setStorm(hasStorm: boolean): void;
      /**Set the thundering duration.*/
      setThunderDuration(duration: number): void;
      /**Set whether it is thundering.*/
      setThundering(thundering: boolean): void;
      /**Sets the world's ticks per ambient mob spawns value*/
      setTicksPerAmbientSpawns(ticksPerAmbientSpawns: number): void;
      /**Sets the world's ticks per animal spawns value*/
      setTicksPerAnimalSpawns(ticksPerAnimalSpawns: number): void;
      /**Sets the world's ticks per monster spawns value*/
      setTicksPerMonsterSpawns(ticksPerMonsterSpawns: number): void;
      /**Sets the world's ticks per water ambient mob spawns value*/
      setTicksPerWaterAmbientSpawns(ticksPerAmbientSpawns: number): void;
      /**Sets the world's ticks per water mob spawns value*/
      setTicksPerWaterSpawns(ticksPerWaterSpawns: number): void;
      /**Sets the relative in-game time on the server.*/
      setTime(time: number): void;
      /**Sets the view distance for this world.*/
      setViewDistance(viewDistance: number): void;
      /**Sets the limit for number of water ambient mobs that can spawn in a chunk  in this world*/
      setWaterAmbientSpawnLimit(limit: number): void;
      /**Sets the limit for number of water animals that can spawn in a chunk in  this world*/
      setWaterAnimalSpawnLimit(limit: number): void;
      /**Set the remaining time in ticks of the current conditions.*/
      setWeatherDuration(duration: number): void;
      /**Spawn an entity of a specific class at the given Location*/
      spawn<T extends obeEntity>(location: obLocation, clazz: jlClass<T>): T;
      spawn<T extends obeEntity>(location: obLocation, clazz: jlClass<T>, reason: obeeCSpawnReason): T;
      spawn<T extends obeEntity>(
         location: obLocation,
         clazz: jlClass<T>,
         reason: obeeCSpawnReason,
         _function: obuConsumer<T>
      ): T;
      /**Spawn an entity of a specific class at the given Location, with  the supplied function run before the entity is added to the world.*/
      spawn<T extends obeEntity>(location: obLocation, clazz: jlClass<T>, _function: obuConsumer<T>): T;
      spawn<T extends obeEntity>(
         location: obLocation,
         clazz: jlClass<T>,
         _function: obuConsumer<T>,
         reason: obeeCSpawnReason
      ): T;
      /**Creates an Arrow entity at the given Location*/
      spawnArrow(location: obLocation, direction: obuVector, speed: number, spread: number): obeArrow;
      /**Creates an arrow entity of the given class at the given Location*/
      spawnArrow<T extends obeAbstractArrow>(
         location: obLocation,
         direction: obuVector,
         speed: number,
         spread: number,
         clazz: jlClass<T>
      ): T;
      /**Creates a entity at the given Location*/
      spawnEntity(loc: obLocation, type: obeEntityType): obeEntity;
      spawnEntity(loc: obLocation, type: obeEntityType, reason: obeeCSpawnReason): obeEntity;
      spawnEntity(
         loc: obLocation,
         type: obeEntityType,
         reason: obeeCSpawnReason,
         _function: obuConsumer<obeEntity>
      ): obeEntity;
      /**Spawn a FallingBlock entity at the given Location of  the specified Material.*/
      spawnFallingBlock(location: obLocation, data: obbdBlockData): obeFallingBlock;
      /**Spawn a FallingBlock entity at the given Location of  the specified Material.*/
      spawnFallingBlock(location: obLocation, data: obmMaterialData): obeFallingBlock;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(particle: obParticle, x: number, y: number, z: number, count: number): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T,
         force: boolean
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(particle: obParticle, x: number, y: number, z: number, count: number, data: T): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         receivers: juList<obePlayer>,
         source: obePlayer,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         receivers: juList<obePlayer>,
         source: obePlayer,
         x: number,
         y: number,
         z: number,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T,
         force: boolean
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(particle: obParticle, location: obLocation, count: number): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         extra: number,
         data: T,
         force: boolean
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(
         particle: obParticle,
         location: obLocation,
         count: number,
         offsetX: number,
         offsetY: number,
         offsetZ: number,
         data: T
      ): void;
      /**Spawns the particle (the number of times specified by count)  at the target location.*/
      spawnParticle<T>(particle: obParticle, location: obLocation, count: number, data: T): void;
      spigot(): obWSpigot;
      /**Strikes lightning at the given Location*/
      strikeLightning(loc: obLocation): obeLightningStrike;
      /**Strikes lightning at the given Location without doing damage*/
      strikeLightningEffect(loc: obLocation): obeLightningStrike;
      /**Safely unloads and saves the Chunk at the specified coordinates*/
      unloadChunk(x: number, z: number): boolean;
      /**Safely unloads and optionally saves the Chunk at the specified  coordinates.*/
      unloadChunk(x: number, z: number, save: boolean): boolean;
      /**Safely unloads and saves the Chunk at the specified coordinates*/
      unloadChunk(chunk: obChunk): boolean;
      /**Safely queues the Chunk at the specified coordinates for  unloading.*/
      unloadChunkRequest(x: number, z: number): boolean;
   }
   /**Represents various map environment types that a world may be*/
   export class obWEnvironment extends jlEnum<obWEnvironment> {
      /**Represents a nether based map ("hell")*/
      static NETHER: obWEnvironment;
      /**Represents the "normal"\/"surface world" map*/
      static NORMAL: obWEnvironment;
      /**Represents the "end" map*/
      static THE_END: obWEnvironment;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obWEnvironment;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obWEnvironment[];
   }
   export class obWSpigot extends jlObject {
      constructor ();
      /**Strikes lightning at the given Location and possibly without sound*/
      strikeLightning (loc: obLocation, isSilent: boolean): obeLightningStrike;
      /**Strikes lightning at the given Location without doing damage and possibly without sound*/
      strikeLightningEffect (loc: obLocation, isSilent: boolean): obeLightningStrike;
   }
   export interface obWorldBorder {
      /**Gets the current border center.*/
      getCenter(): obLocation;
      /**Gets the current border damage amount.*/
      getDamageAmount(): number;
      /**Gets the current border damage buffer.*/
      getDamageBuffer(): number;
      /**Gets the current side length of the border.*/
      getSize(): number;
      /**Gets the current border warning distance.*/
      getWarningDistance(): number;
      /**Gets the current border warning time in seconds.*/
      getWarningTime(): number;
      /**Check if the specified location is inside this border.*/
      isInside(location: obLocation): boolean;
      /**Resets the border to default values.*/
      reset(): void;
      /**Sets the new border center.*/
      setCenter(x: number, z: number): void;
      /**Sets the new border center.*/
      setCenter(location: obLocation): void;
      /**Sets the amount of damage a player takes when outside the border plus the border buffer.*/
      setDamageAmount(damage: number): void;
      /**Sets the amount of blocks a player may safely be outside the border before taking damage.*/
      setDamageBuffer(blocks: number): void;
      /**Sets the border to a square region with the specified side length in blocks.*/
      setSize(newSize: number): void;
      /**Sets the border to a square region with the specified side length in blocks.*/
      setSize(newSize: number, seconds: number): void;
      /**Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.*/
      setWarningDistance(distance: number): void;
      /**Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.*/
      setWarningTime(seconds: number): void;
   }
   /**Represents various types of options that may be used to create a world.*/
   export class obWorldCreator extends jlObject {
      constructor (name: string);
      /**Copies the options from the specified world*/
      copy (world: obWorld): obWorldCreator;
      /**Copies the options from the specified WorldCreator*/
      copy (creator: obWorldCreator): obWorldCreator;
      /**Creates a world with the specified options.*/
      createWorld (): obWorld;
      /**Gets the environment that will be used to create or load the world*/
      environment (): obWEnvironment;
      /**Sets the environment that will be used to create or load the world*/
      environment (env: obWEnvironment): obWorldCreator;
      /**Gets whether or not structures will be generated in the world.*/
      generateStructures (): boolean;
      /**Sets whether or not worlds created or loaded with this creator will  have structures.*/
      generateStructures (generate: boolean): obWorldCreator;
      /**Gets the generator that will be used to create or load the world.*/
      generator (): obgChunkGenerator;
      /**Sets the generator that will be used to create or load the world.*/
      generator (generator: string): obWorldCreator;
      /**Sets the generator that will be used to create or load the world.*/
      generator (generator: string, output: obcCommandSender): obWorldCreator;
      /**Sets the generator that will be used to create or load the world.*/
      generator (generator: obgChunkGenerator): obWorldCreator;
      /**Gets the generator settings of the world that will be created or loaded.*/
      generatorSettings (): string;
      /**Sets the generator settings of the world that will be created or loaded.*/
      generatorSettings (generatorSettings: string): obWorldCreator;
      /**Attempts to get the ChunkGenerator with the given name.*/
      static getGeneratorForName (world: string, name: string, output: obcCommandSender): obgChunkGenerator;
      /**Gets whether the world will be hardcore or not.*/
      hardcore (): boolean;
      /**Sets whether the world will be hardcore or not.*/
      hardcore (hardcore: boolean): obWorldCreator;
      /**Gets the name of the world that is to be loaded or created.*/
      name (): string;
      /**Creates a new WorldCreator for the given world name*/
      static name (name: string): obWorldCreator;
      /**Gets the seed that will be used to create this world*/
      seed (): number;
      /**Sets the seed that will be used to create this world*/
      seed (seed: number): obWorldCreator;
      /**Gets the type of the world that will be created or loaded*/
      type (): obWorldType;
      /**Sets the type of the world that will be created or loaded*/
      type (type: obWorldType): obWorldCreator;
   }
   /**Represents events within a world*/
   export class obewWorldEvent extends obeEvent {
      constructor (world: obWorld);
      /**Gets the world primarily involved with this event*/
      getWorld (): obWorld;
   }
   /**Called when a world's gamerule is changed, either by command or by api.*/
   export class ippewWorldGameRuleChangeEvent extends obewWorldEvent implements obeCancellable {
      constructor (world: obWorld, commandSender: obcCommandSender, gameRule: obGameRule<any>, value: string);
      /**Gets the command sender associated with this event.*/
      getCommandSender (): obcCommandSender;
      /**Gets the game rule associated with this event.*/
      getGameRule (): obGameRule<any>;
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the new value of the gamerule.*/
      getValue (): string;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
      /**Sets the new value of this gamerule.*/
      setValue (value: string): void;
   }
   /**Called when a World is initializing*/
   export class obewWorldInitEvent extends obewWorldEvent {
      constructor (world: obWorld);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a World is loaded*/
   export class obewWorldLoadEvent extends obewWorldEvent {
      constructor (world: obWorld);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Called when a World is saved.*/
   export class obewWorldSaveEvent extends obewWorldEvent {
      constructor (world: obWorld);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
   }
   /**Represents various types of worlds that may exist*/
   export class obWorldType extends jlEnum<obWorldType> {
      static AMPLIFIED: obWorldType;
      static FLAT: obWorldType;
      static LARGE_BIOMES: obWorldType;
      static NORMAL: obWorldType;
      /**Gets a WorldType by its name*/
      static getByName (name: string): obWorldType;
      /**Gets the name of this WorldType*/
      getName (): string;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): obWorldType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): obWorldType[];
   }
   /**Called when a World is unloaded*/
   export class obewWorldUnloadEvent extends obewWorldEvent implements obeCancellable {
      constructor (world: obWorld);
      static getHandlerList (): obeHandlerList;
      getHandlers (): obeHandlerList;
      /**Gets the cancellation state of this event.*/
      isCancelled (): boolean;
      /**Sets the cancellation state of this event.*/
      setCancelled (cancel: boolean): void;
   }
   /**An implementation of Configuration which saves all files in Yaml.  Note that this implementation is not synchronized.*/
   export class obcfYamlConfiguration extends obcfFileConfiguration {
      constructor ();
      /**Compiles the header for this FileConfiguration and returns the  result.*/
      buildHeader (): string;
      convertMapsToSections (input: juMap<any, any>, section: obcConfigurationSection): void;
      /**Creates a new YamlConfiguration, loading from the given file.*/
      static loadConfiguration (file: jiFile): obcfYamlConfiguration;
      /**Creates a new YamlConfiguration, loading from the given reader.*/
      static loadConfiguration (reader: jiReader): obcfYamlConfiguration;
      /**Loads this FileConfiguration from the specified string, as  opposed to from file.*/
      loadFromString (contents: string): void;
      /**Gets the ConfigurationOptions for this Configuration.*/
      options (): obcfYamlConfigurationOptions;
      parseHeader (input: string): string;
      /**Saves this FileConfiguration to a string, and returns it.*/
      saveToString (): string;
   }
   /**Various settings for controlling the input and output of a YamlConfiguration*/
   export class obcfYamlConfigurationOptions extends obcfFileConfigurationOptions {
      constructor (configuration: obcfYamlConfiguration);
      /**Returns the Configuration that this object is responsible for.*/
      configuration (): obcfYamlConfiguration;
      /**Sets if the Configuration should copy values from its default  Configuration directly.*/
      copyDefaults (value: boolean): obcfYamlConfigurationOptions;
      /**Sets whether or not the header should be copied from a default source.*/
      copyHeader (value: boolean): obcfYamlConfigurationOptions;
      /**Sets the header that will be applied to the top of the saved output.*/
      header (value: string): obcfYamlConfigurationOptions;
      /**Gets how much spaces should be used to indent each line.*/
      indent (): number;
      /**Sets how much spaces should be used to indent each line.*/
      indent (value: number): obcfYamlConfigurationOptions;
      /**Sets the char that will be used to separate ConfigurationSections*/
      pathSeparator (value: string): obcfYamlConfigurationOptions;
   }
   export class obcfYamlConstructor extends oyscSafeConstructor {
      constructor ();
   }
   export class obcfYamlRepresenter extends oysrRepresenter {
      constructor ();
      addClassTag (arg0: jlClass<jlObject>, arg1: oysnTag): oysnTag;
      getTag (arg0: jlClass<any>, arg1: oysnTag): oysnTag;
      getTimeZone (): juTimeZone;
      setTimeZone (arg0: juTimeZone): void;
   }
   /**Represents a Zoglin.*/
   export interface obeZoglin extends obeMonster, obeAgeable {}
   /**Represents a Zombie.*/
   export interface obeZombie extends obeMonster, obeAgeable {
      /**Check if this zombie can break doors*/
      canBreakDoors(): boolean;
      /**Gets the amount of ticks until this entity will be converted to a Drowned  as a result of being underwater.*/
      getConversionTime(): number;
      /**Check if zombie has arms raised*/
      isArmsRaised(): boolean;
      /**Get if this entity is in the process of converting to a Drowned as a  result of being underwater.*/
      isConverting(): boolean;
      /**Check if zombie is drowning*/
      isDrowning(): boolean;
      /**Set if zombie has its arms raised*/
      setArmsRaised(raised: boolean): void;
      /**Sets if this zombie can break doors*/
      setCanBreakDoors(canBreakDoors: boolean): void;
      /**Sets the amount of ticks until this entity will be converted to a Drowned  as a result of being underwater.*/
      setConversionTime(time: number): void;
      /**Set if this zombie should burn in the sunlight*/
      setShouldBurnInDay(shouldBurnInDay: boolean): void;
      /**Check if this zombie will burn in the sunlight*/
      shouldBurnInDay(): boolean;
      /**Stop a zombie from starting the drowning conversion process*/
      stopDrowning(): void;
   }
   /**Represents a ZombieHorse - variant of AbstractHorse.*/
   export interface obeZombieHorse extends obeAbstractHorse {}
   /**Represents a Zombie which was once a Villager.*/
   export interface obeZombieVillager extends obeZombie {
      /**Gets the player who initiated the conversion.*/
      getConversionPlayer(): obOfflinePlayer;
      /**Gets the amount of ticks until this entity will be converted to a  Villager as a result of being cured.*/
      getConversionTime(): number;
      /**Returns the villager profession of this zombie.*/
      getVillagerProfession(): obeVProfession;
      /**Gets the current type of this villager.*/
      getVillagerType(): obeVType;
      /**Get if this entity is in the process of converting to a Villager as a  result of being cured.*/
      isConverting(): boolean;
      /**Sets the player who initiated the conversion.*/
      setConversionPlayer(conversionPlayer: obOfflinePlayer): void;
      /**Sets the amount of ticks until this entity will be converted to a  Villager as a result of being cured.*/
      setConversionTime(time: number): void;
      /**Sets the villager profession of this zombie.*/
      setVillagerProfession(profession: obeVProfession): void;
      /**Sets the new type of this villager.*/
      setVillagerType(type: obeVType): void;
   }
   export class nmbacBaseComponent extends jlObject {
      constructor ();
      /**Appends a component to the component.*/
      addExtra (component: nmbacBaseComponent): void;
      /**Appends a text element to the component.*/
      addExtra (text: string): void;
      canEqual (other: jlObject): boolean;
      /**Copies the events and formatting of a BaseComponent.*/
      copyFormatting (component: nmbacBaseComponent): void;
      /**Copies the events and formatting of a BaseComponent.*/
      copyFormatting (component: nmbacBaseComponent, replace: boolean): void;
      /**Copies the specified formatting of a BaseComponent.*/
      copyFormatting (component: nmbacBaseComponent, retention: nmbacCFormatRetention, replace: boolean): void;
      /**Clones the BaseComponent and returns the clone.*/
      duplicate (): nmbacBaseComponent;
      equals (o: jlObject): boolean;
      /**The action to perform when this component (and child components) are  clicked*/
      getClickEvent (): nmbacClickEvent;
      /**Returns the color of this component.*/
      getColor (): nmbaChatColor;
      /**Returns the color of this component without checking the parents color.*/
      getColorRaw (): nmbaChatColor;
      /**Appended components that inherit this component's formatting and events*/
      getExtra (): juList<nmbacBaseComponent>;
      /**Returns the font of this component.*/
      getFont (): string;
      /**Returns the font of this component without checking the parents font.*/
      getFontRaw (): string;
      /**The action to perform when this component (and child components) are  hovered over*/
      getHoverEvent (): nmbacHoverEvent;
      /**The text to insert into the chat when this component (and child  components) are clicked while pressing the shift key*/
      getInsertion (): string;
      /**Returns whether the component has any formatting or events applied to it*/
      hasFormatting (): boolean;
      hashCode (): number;
      /**Returns whether this component is bold.*/
      isBold (): boolean;
      /**Returns whether this component is bold without checking the parents  setting.*/
      isBoldRaw (): boolean;
      /**Returns whether this component is italic.*/
      isItalic (): boolean;
      /**Returns whether this component is italic without checking the parents  setting.*/
      isItalicRaw (): boolean;
      /**Returns whether this component is obfuscated.*/
      isObfuscated (): boolean;
      /**Returns whether this component is obfuscated without checking the parents  setting.*/
      isObfuscatedRaw (): boolean;
      /**Returns whether this component is strikethrough.*/
      isStrikethrough (): boolean;
      /**Returns whether this component is strikethrough without checking the  parents setting.*/
      isStrikethroughRaw (): boolean;
      /**Returns whether this component is underlined.*/
      isUnderlined (): boolean;
      /**Returns whether this component is underlined without checking the parents  setting.*/
      isUnderlinedRaw (): boolean;
      /**Retains only the specified formatting.*/
      retain (retention: nmbacCFormatRetention): void;
      /**Whether this component and any child components (unless overridden) is  bold*/
      setBold (bold: boolean): void;
      /**The action to perform when this component (and child components) are  clicked*/
      setClickEvent (clickEvent: nmbacClickEvent): void;
      /**The color of this component and any child components (unless overridden)*/
      setColor (color: nmbaChatColor): void;
      setExtra (components: juList<nmbacBaseComponent>): void;
      /**The font of this component and any child components (unless overridden)*/
      setFont (font: string): void;
      /**The action to perform when this component (and child components) are  hovered over*/
      setHoverEvent (hoverEvent: nmbacHoverEvent): void;
      /**The text to insert into the chat when this component (and child  components) are clicked while pressing the shift key*/
      setInsertion (insertion: string): void;
      /**Whether this component and any child components (unless overridden) is  italic*/
      setItalic (italic: boolean): void;
      /**Whether this component and any child components (unless overridden) is  obfuscated*/
      setObfuscated (obfuscated: boolean): void;
      /**Whether this component and any child components (unless overridden) is  strikethrough*/
      setStrikethrough (strikethrough: boolean): void;
      /**Whether this component and any child components (unless overridden) is  underlined*/
      setUnderlined (underlined: boolean): void;
      /**Converts the component to a string that uses the old formatting codes  (ChatColor.COLOR_CHAR*/
      toLegacyText (): string;
      /**Converts the components to a string that uses the old formatting codes  (ChatColor.COLOR_CHAR*/
      static toLegacyText (...components: nmbacBaseComponent[]): string;
      /**Converts the component into a string without any formatting*/
      toPlainText (): string;
      /**Converts the components into a string without any formatting*/
      static toPlainText (...components: nmbacBaseComponent[]): string;
      toString (): string;
   }
   export class nmbcBaseComponentSerializer extends jlObject {
      constructor ();
      deserialize (
         object: com.google.gson.JsonObject,
         component: nmbacBaseComponent,
         context: com.google.gson.JsonDeserializationContext
      ): void;
      serialize (
         object: com.google.gson.JsonObject,
         component: nmbacBaseComponent,
         context: com.google.gson.JsonSerializationContext
      ): void;
   }
   /**Simplistic enumeration of all supported color values for chat.*/
   export class nmbaChatColor extends jlObject {
      equals (obj: jlObject): boolean;
      /**Get the colour represented by the specified code.*/
      static getByChar (code: string): nmbaChatColor;
      /**The RGB color of the ChatColor.*/
      getColor (): jaColor;
      getName (): string;
      hashCode (): number;
      static of (color: jaColor): nmbaChatColor;
      static of (string: string): nmbaChatColor;
      /**Strips the given message of all color codes*/
      static stripColor (input: string): string;
      toString (): string;
      static translateAlternateColorCodes (altColorChar: string, textToTranslate: string): string;
   }
   /**Represents the position on the screen where a message will appear.*/
   export class nmbaChatMessageType extends jlEnum<nmbaChatMessageType> {
      static ACTION_BAR: nmbaChatMessageType;
      static CHAT: nmbaChatMessageType;
      static SYSTEM: nmbaChatMessageType;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): nmbaChatMessageType;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): nmbaChatMessageType[];
   }
   export class nmbacClickEvent extends jlObject {
      constructor (action: nmbacCAction, value: string);
      equals (o: jlObject): boolean;
      /**The type of action to perform on click.*/
      getAction (): nmbacCAction;
      /**Depends on the action.*/
      getValue (): string;
      hashCode (): number;
      toString (): string;
   }
   export class nmbacCAction extends jlEnum<nmbacCAction> {
      /**Change to the page number given by  ClickEvent.value in a book.*/
      static CHANGE_PAGE: nmbacCAction;
      /**Copy the string given by  ClickEvent.value into the player's  clipboard.*/
      static COPY_TO_CLIPBOARD: nmbacCAction;
      /**Open a file at the path given by  ClickEvent.value.*/
      static OPEN_FILE: nmbacCAction;
      /**Open a url at the path given by  ClickEvent.value.*/
      static OPEN_URL: nmbacCAction;
      /**Run the command given by  ClickEvent.value.*/
      static RUN_COMMAND: nmbacCAction;
      /**Inserts the string given by  ClickEvent.value into the player's  text box.*/
      static SUGGEST_COMMAND: nmbacCAction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): nmbacCAction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): nmbacCAction[];
   }
   /**ComponentBuilder simplifies creating basic messages by allowing the use of a  chainable builder.     new ComponentBuilder("Hello ").color(ChatColor.RED).  append("World").color(ChatColor.BLUE). append("!").bold(true).create();      All methods (excluding append(String) and create() work on  the last part appended to the builder, so in the example above "Hello " would  be ChatColor.RED and "World" would be  ChatColor.BLUE but "!" would be bold and  ChatColor.BLUE because append copies the previous  part's formatting*/
   export class nmbacComponentBuilder extends jlObject {
      constructor ();
      constructor (component: nmbacBaseComponent);
      constructor (original: nmbacComponentBuilder);
      constructor (text: string);
      /**Appends a component to the builder and makes it the current target for  formatting.*/
      append (component: nmbacBaseComponent): nmbacComponentBuilder;
      /**Appends the components to the builder and makes the last element the  current target for formatting.*/
      append (components: nmbacBaseComponent[]): nmbacComponentBuilder;
      /**Appends the components to the builder and makes the last element the  current target for formatting.*/
      append (components: nmbacBaseComponent[], retention: nmbacCFormatRetention): nmbacComponentBuilder;
      /**Appends a component to the builder and makes it the current target for  formatting.*/
      append (component: nmbacBaseComponent, retention: nmbacCFormatRetention): nmbacComponentBuilder;
      /**Allows joining additional components to this builder using the given  ComponentBuilder.Joiner and ComponentBuilder.FormatRetention.ALL.*/
      append (joiner: nmbacCJoiner): nmbacComponentBuilder;
      /**Allows joining additional components to this builder using the given  ComponentBuilder.Joiner.*/
      append (joiner: nmbacCJoiner, retention: nmbacCFormatRetention): nmbacComponentBuilder;
      /**Appends the text to the builder and makes it the current target for  formatting.*/
      append (text: string): nmbacComponentBuilder;
      /**Appends the text to the builder and makes it the current target for  formatting.*/
      append (text: string, retention: nmbacCFormatRetention): nmbacComponentBuilder;
      /**Parse text to BaseComponent[] with colors and format, appends the text to  the builder and makes it the current target for formatting.*/
      appendLegacy (text: string): nmbacComponentBuilder;
      /**Sets whether the current part is bold.*/
      bold (bold: boolean): nmbacComponentBuilder;
      /**Sets the color of the current part.*/
      color (color: nmbaChatColor): nmbacComponentBuilder;
      /**Returns the components needed to display the message created by this  builder.git*/
      create (): nmbacBaseComponent[];
      /**Sets the click event for the current part.*/
      event (clickEvent: nmbacClickEvent): nmbacComponentBuilder;
      /**Sets the hover event for the current part.*/
      event (hoverEvent: nmbacHoverEvent): nmbacComponentBuilder;
      /**Sets the font of the current part.*/
      font (font: string): nmbacComponentBuilder;
      /**Gets the component part at the position of given index.*/
      getComponent (pos: number): nmbacBaseComponent;
      /**Gets the component at the position of the cursor.*/
      getCurrentComponent (): nmbacBaseComponent;
      /**The position for the current part to modify.*/
      getCursor (): number;
      getParts (): juList<nmbacBaseComponent>;
      /**Sets the insertion text for the current part.*/
      insertion (insertion: string): nmbacComponentBuilder;
      /**Sets whether the current part is italic.*/
      italic (italic: boolean): nmbacComponentBuilder;
      /**Sets whether the current part is obfuscated.*/
      obfuscated (obfuscated: boolean): nmbacComponentBuilder;
      /**Remove the component part at the position of given index.*/
      removeComponent (pos: number): void;
      /**Sets the current part back to normal settings.*/
      reset (): nmbacComponentBuilder;
      /**Resets the cursor to index of the last element.*/
      resetCursor (): nmbacComponentBuilder;
      /**Retains only the specified formatting.*/
      retain (retention: nmbacCFormatRetention): nmbacComponentBuilder;
      /**Sets the position of the current component to be modified*/
      setCursor (pos: number): nmbacComponentBuilder;
      /**Sets whether the current part is strikethrough.*/
      strikethrough (strikethrough: boolean): nmbacComponentBuilder;
      /**Sets whether the current part is underlined.*/
      underlined (underlined: boolean): nmbacComponentBuilder;
   }
   export class nmbacCFormatRetention extends jlEnum<nmbacCFormatRetention> {
      /**Specify that we want to retain everything from the previous  component.*/
      static ALL: nmbacCFormatRetention;
      /**Specify that we want the events retained from the previous component.*/
      static EVENTS: nmbacCFormatRetention;
      /**Specify that we want the formatting retained from the previous  component.*/
      static FORMATTING: nmbacCFormatRetention;
      /**Specify that we do not want to retain anything from the previous  component.*/
      static NONE: nmbacCFormatRetention;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): nmbacCFormatRetention;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): nmbacCFormatRetention[];
   }
   /**Functional interface to join additional components to a ComponentBuilder.*/
   export interface nmbacCJoiner {
      /**Joins additional components to the provided ComponentBuilder  and then returns it to fulfill a chain pattern.*/
      join(componentBuilder: nmbacComponentBuilder, retention: nmbacCFormatRetention): nmbacComponentBuilder;
   }
   export class nmbcComponentSerializer extends jlObject implements com.google.gson.JsonDeserializer<nmbacBaseComponent> {
      constructor ();
      deserialize (
         json: com.google.gson.JsonElement,
         typeOfT: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacBaseComponent;
      static parse (json: string): nmbacBaseComponent[];
      static toString (...components: nmbacBaseComponent[]): string;
      static toString (component: nmbacBaseComponent): string;
      static toString (object: jlObject): string;
   }
   export class nmbachcContent extends jlObject {
      constructor ();
      /**Tests this content against an action*/
      assertAction (input: nmbacHAction): void;
      canEqual (other: jlObject): boolean;
      equals (o: jlObject): boolean;
      hashCode (): number;
      /**Required action for this content type.*/
      requiredAction (): nmbacHAction;
      toString (): string;
   }
   export class nmbachcEntity extends nmbachcContent {
      constructor (type: string, id: string, name: nmbacBaseComponent);
      canEqual (other: jlObject): boolean;
      equals (o: jlObject): boolean;
      /**Entity UUID in hyphenated hexadecimal format.*/
      getId (): string;
      /**Name to display as the entity.*/
      getName (): nmbacBaseComponent;
      /**Namespaced entity ID.*/
      getType (): string;
      hashCode (): number;
      /**Required action for this content type.*/
      requiredAction (): nmbacHAction;
      /**Entity UUID in hyphenated hexadecimal format.*/
      setId (id: string): void;
      /**Name to display as the entity.*/
      setName (name: nmbacBaseComponent): void;
      /**Namespaced entity ID.*/
      setType (type: string): void;
      toString (): string;
   }
   export class nmbachcEntitySerializer extends jlObject
      implements com.google.gson.JsonSerializer<nmbachcEntity>, com.google.gson.JsonDeserializer<nmbachcEntity> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbachcEntity;
      serialize (content: nmbachcEntity, type: jlrType, context: com.google.gson.JsonSerializationContext): cggJsonElement;
   }
   export class nmbacHoverEvent extends jlObject {
      constructor (action: nmbacHAction, value: nmbacBaseComponent[]);
      constructor (action: nmbacHAction, ...contents: nmbachcContent[]);
      constructor (action: nmbacHAction, contents: juList<nmbachcContent>);
      /**Adds a content to this hover event.*/
      addContent (content: nmbachcContent): void;
      equals (o: jlObject): boolean;
      /**The action of this event.*/
      getAction (): nmbacHAction;
      /**Gets the appropriate Content class for an HoverEvent.Action for the  GSON serialization*/
      static getClass (action: nmbacHAction, array: boolean): jlClass<any>;
      /**List of contents to provide for this event.*/
      getContents (): juList<nmbachcContent>;
      hashCode (): number;
      /**Returns whether this hover event is prior to 1.16*/
      isLegacy (): boolean;
      /**Returns whether this hover event is prior to 1.16*/
      setLegacy (legacy: boolean): void;
      toString (): string;
   }
   export class nmbacHAction extends jlEnum<nmbacHAction> {
      static SHOW_ENTITY: nmbacHAction;
      static SHOW_ITEM: nmbacHAction;
      static SHOW_TEXT: nmbacHAction;
      /**Returns the enum constant of this type with the specified name.*/
      static valueOf (name: string): nmbacHAction;
      /**Returns an array containing the constants of this enum type, in the order they are declared.*/
      static values (): nmbacHAction[];
   }
   export class nmbachcItem extends nmbachcContent {
      constructor (id: string, count: number, tag: nmbacItemTag);
      canEqual (other: jlObject): boolean;
      equals (o: jlObject): boolean;
      /**Optional.*/
      getCount (): number;
      /**Namespaced item ID.*/
      getId (): string;
      /**Optional.*/
      getTag (): nmbacItemTag;
      hashCode (): number;
      /**Required action for this content type.*/
      requiredAction (): nmbacHAction;
      /**Optional.*/
      setCount (count: number): void;
      /**Namespaced item ID.*/
      setId (id: string): void;
      /**Optional.*/
      setTag (tag: nmbacItemTag): void;
      toString (): string;
   }
   export class nmbachcItemSerializer extends jlObject
      implements com.google.gson.JsonSerializer<nmbachcItem>, com.google.gson.JsonDeserializer<nmbachcItem> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbachcItem;
      serialize (content: nmbachcItem, type: jlrType, context: com.google.gson.JsonSerializationContext): cggJsonElement;
   }
   /**Metadata for use in conjunction with HoverEvent.Action.SHOW_ITEM*/
   export class nmbacItemTag extends jlObject {
      equals (o: jlObject): boolean;
      getNbt (): string;
      hashCode (): number;
      static ofNbt (nbt: string): nmbacItemTag;
      toString (): string;
   }
   export class nmbacISerializer extends jlObject
      implements com.google.gson.JsonSerializer<nmbacItemTag>, com.google.gson.JsonDeserializer<nmbacItemTag> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacItemTag;
      serialize (itemTag: nmbacItemTag, type: jlrType, context: com.google.gson.JsonSerializationContext): cggJsonElement;
   }
   export class nmbacKeybindComponent extends nmbacBaseComponent {
      constructor ();
      constructor (original: nmbacKeybindComponent);
      constructor (keybind: string);
      canEqual (other: jlObject): boolean;
      /**Clones the BaseComponent and returns the clone.*/
      duplicate (): nmbacKeybindComponent;
      equals (o: jlObject): boolean;
      /**The keybind identifier to use.*/
      getKeybind (): string;
      hashCode (): number;
      /**The keybind identifier to use.*/
      setKeybind (keybind: string): void;
      toLegacyText (builder: stringBuilder): void;
      toPlainText (builder: stringBuilder): void;
      toString (): string;
   }
   export class nmbcKeybindComponentSerializer extends nmbcBaseComponentSerializer
      implements com.google.gson.JsonSerializer<nmbacKeybindComponent>,
         com.google.gson.JsonDeserializer<nmbacKeybindComponent> {
      constructor ();
      deserialize (
         json: com.google.gson.JsonElement,
         typeOfT: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacKeybindComponent;
      serialize (
         src: nmbacKeybindComponent,
         typeOfSrc: jlrType,
         context: com.google.gson.JsonSerializationContext
      ): cggJsonElement;
   }
   /**All keybind values supported by vanilla Minecraft.    Values may be removed if they are no longer supported.*/
   export interface nmbacKeybinds {}
   /**This component displays the score based on a player score on the scoreboard.    The name is the name of the player stored on the scoreboard, which may  be a "fake" player. It can also be a target selector that must resolve  to 1 target, and may target non-player entities.    With a book, \/tellraw, or \/title, using the wildcard '*' in the place of a  name or target selector will cause all players to see their own score in the  specified objective.    Signs cannot use the '*' wildcard    These values are filled in by the server-side implementation.    As of 1.12.2, a bug ( MC-56373 ) prevents full usage within hover events.*/
   export class nmbacScoreComponent extends nmbacBaseComponent {
      constructor (original: nmbacScoreComponent);
      constructor (name: string, objective: string);
      constructor (name: string, objective: string, value: string);
      canEqual (other: jlObject): boolean;
      /**Clones the BaseComponent and returns the clone.*/
      duplicate (): nmbacScoreComponent;
      equals (o: jlObject): boolean;
      /**The name of the entity whose score should be displayed.*/
      getName (): string;
      /**The internal name of the objective the score is attached to.*/
      getObjective (): string;
      /**The optional value to use instead of the one present in the Scoreboard.*/
      getValue (): string;
      hashCode (): number;
      /**The name of the entity whose score should be displayed.*/
      setName (name: string): void;
      /**The internal name of the objective the score is attached to.*/
      setObjective (objective: string): void;
      /**The optional value to use instead of the one present in the Scoreboard.*/
      setValue (value: string): void;
      toLegacyText (builder: stringBuilder): void;
      toPlainText (builder: stringBuilder): void;
      toString (): string;
   }
   export class nmbcScoreComponentSerializer extends nmbcBaseComponentSerializer
      implements com.google.gson.JsonSerializer<nmbacScoreComponent>,
         com.google.gson.JsonDeserializer<nmbacScoreComponent> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacScoreComponent;
      serialize (
         component: nmbacScoreComponent,
         type: jlrType,
         context: com.google.gson.JsonSerializationContext
      ): cggJsonElement;
   }
   /**This component processes a target selector into a pre-formatted set of  discovered names.    Multiple targets may be obtained, and with commas separating each one and a  final "and" for the last target. The resulting format cannot be overwritten.  This includes all styling from team prefixes, insertions, click events, and  hover events.    These values are filled in by the server-side implementation.    As of 1.12.2, a bug ( MC-56373 ) prevents full usage within hover events.*/
   export class nmbacSelectorComponent extends nmbacBaseComponent {
      constructor (original: nmbacSelectorComponent);
      constructor (selector: string);
      canEqual (other: jlObject): boolean;
      /**Clones the BaseComponent and returns the clone.*/
      duplicate (): nmbacSelectorComponent;
      equals (o: jlObject): boolean;
      /**An entity target selector (@p, @a, @r, @e, or @s) and, optionally,  selector arguments (e.g.*/
      getSelector (): string;
      hashCode (): number;
      /**An entity target selector (@p, @a, @r, @e, or @s) and, optionally,  selector arguments (e.g.*/
      setSelector (selector: string): void;
      toLegacyText (builder: stringBuilder): void;
      toPlainText (builder: stringBuilder): void;
      toString (): string;
   }
   export class nmbcSelectorComponentSerializer extends nmbcBaseComponentSerializer
      implements com.google.gson.JsonSerializer<nmbacSelectorComponent>,
         com.google.gson.JsonDeserializer<nmbacSelectorComponent> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacSelectorComponent;
      serialize (
         component: nmbacSelectorComponent,
         type: jlrType,
         context: com.google.gson.JsonSerializationContext
      ): cggJsonElement;
   }
   export class nmbachcText extends nmbachcContent {
      constructor (value: nmbacBaseComponent[]);
      constructor (value: string);
      equals (o: jlObject): boolean;
      /**The value.*/
      getValue (): jlObject;
      hashCode (): number;
      /**Required action for this content type.*/
      requiredAction (): nmbacHAction;
      toString (): string;
   }
   export class nmbacTextComponent extends nmbacBaseComponent {
      constructor ();
      constructor (...extras: nmbacBaseComponent[]);
      constructor (text: string);
      constructor (textComponent: nmbacTextComponent);
      canEqual (other: jlObject): boolean;
      /**Creates a duplicate of this TextComponent.*/
      duplicate (): nmbacTextComponent;
      equals (o: jlObject): boolean;
      /**Converts the old formatting system that used  ChatColor.COLOR_CHAR into the new json based  system.*/
      static fromLegacyText (message: string): nmbacBaseComponent[];
      /**Converts the old formatting system that used  ChatColor.COLOR_CHAR into the new json based  system.*/
      static fromLegacyText (message: string, defaultColor: nmbaChatColor): nmbacBaseComponent[];
      /**The text of the component that will be displayed to the client*/
      getText (): string;
      hashCode (): number;
      /**The text of the component that will be displayed to the client*/
      setText (text: string): void;
      toLegacyText (builder: stringBuilder): void;
      toPlainText (builder: stringBuilder): void;
      toString (): string;
   }
   export class nmbcTextComponentSerializer extends nmbcBaseComponentSerializer
      implements com.google.gson.JsonSerializer<nmbacTextComponent>, com.google.gson.JsonDeserializer<nmbacTextComponent> {
      constructor ();
      deserialize (
         json: com.google.gson.JsonElement,
         typeOfT: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacTextComponent;
      serialize (
         src: nmbacTextComponent,
         typeOfSrc: jlrType,
         context: com.google.gson.JsonSerializationContext
      ): cggJsonElement;
   }
   export class nmbachcTextSerializer extends jlObject
      implements com.google.gson.JsonSerializer<nmbachcText>, com.google.gson.JsonDeserializer<nmbachcText> {
      constructor ();
      deserialize (
         element: com.google.gson.JsonElement,
         type: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbachcText;
      serialize (content: nmbachcText, type: jlrType, context: com.google.gson.JsonSerializationContext): cggJsonElement;
   }
   export class nmbacTranslatableComponent extends nmbacBaseComponent {
      constructor ();
      constructor (translate: string, ..._with: jlObject[]);
      constructor (original: nmbacTranslatableComponent);
      /**Adds a component substitution to the component.*/
      addWith (component: nmbacBaseComponent): void;
      /**Adds a text substitution to the component.*/
      addWith (text: string): void;
      canEqual (other: jlObject): boolean;
      /**Creates a duplicate of this TranslatableComponent.*/
      duplicate (): nmbacTranslatableComponent;
      equals (o: jlObject): boolean;
      getFormat (): jurPattern;
      /**The key into the Minecraft locale files to use for the translation.*/
      getTranslate (): string;
      /**The components to substitute into the translation*/
      getWith (): juList<nmbacBaseComponent>;
      hashCode (): number;
      /**The key into the Minecraft locale files to use for the translation.*/
      setTranslate (translate: string): void;
      /**Sets the translation substitutions to be used in this component.*/
      setWith (components: juList<nmbacBaseComponent>): void;
      toLegacyText (builder: stringBuilder): void;
      toPlainText (builder: stringBuilder): void;
      toString (): string;
   }
   export class nmbcTranslatableComponentSerializer extends nmbcBaseComponentSerializer
      implements com.google.gson.JsonSerializer<nmbacTranslatableComponent>,
         com.google.gson.JsonDeserializer<nmbacTranslatableComponent> {
      constructor ();
      deserialize (
         json: com.google.gson.JsonElement,
         typeOfT: jlrType,
         context: com.google.gson.JsonDeserializationContext
      ): nmbacTranslatableComponent;
      serialize (
         src: nmbacTranslatableComponent,
         typeOfSrc: jlrType,
         context: com.google.gson.JsonSerializationContext
      ): cggJsonElement;
   }
   export class nmbcTranslationRegistry extends jlObject {
      equals (o: jlObject): boolean;
      getProviders (): juList<nmbcTTranslationProvider>;
      hashCode (): number;
      toString (): string;
      translate (s: string): string;
   }
}